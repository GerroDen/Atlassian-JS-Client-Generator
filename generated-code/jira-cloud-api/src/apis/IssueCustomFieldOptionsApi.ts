/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkCustomFieldOptionCreateRequest,
  BulkCustomFieldOptionUpdateRequest,
  CustomFieldCreatedContextOptionsList,
  CustomFieldOption,
  CustomFieldUpdatedContextOptionsList,
  OrderOfCustomFieldOptions,
  PageBeanCustomFieldContextOption,
} from '../models';

export interface CreateCustomFieldOptionRequest {
    fieldId: string;
    contextId: number;
    bulkCustomFieldOptionCreateRequest: BulkCustomFieldOptionCreateRequest;
}

export interface DeleteCustomFieldOptionRequest {
    fieldId: string;
    contextId: number;
    optionId: number;
}

export interface GetCustomFieldOptionRequest {
    id: string;
}

export interface GetOptionsForContextRequest {
    fieldId: string;
    contextId: number;
    optionId?: number;
    onlyOptions?: boolean;
    startAt?: number;
    maxResults?: number;
}

export interface ReorderCustomFieldOptionsRequest {
    fieldId: string;
    contextId: number;
    orderOfCustomFieldOptions: OrderOfCustomFieldOptions;
}

export interface UpdateCustomFieldOptionRequest {
    fieldId: string;
    contextId: number;
    bulkCustomFieldOptionUpdateRequest: BulkCustomFieldOptionUpdateRequest;
}

/**
 * 
 */
export class IssueCustomFieldOptionsApi extends runtime.BaseAPI {

    /**
     * Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create custom field options (context)
     */
    async createCustomFieldOptionRaw(requestParameters: CreateCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomFieldCreatedContextOptionsList>> {
        if (requestParameters.fieldId === null || requestParameters.fieldId === undefined) {
            throw new runtime.RequiredError('fieldId','Required parameter requestParameters.fieldId was null or undefined when calling createCustomFieldOption.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling createCustomFieldOption.');
        }

        if (requestParameters.bulkCustomFieldOptionCreateRequest === null || requestParameters.bulkCustomFieldOptionCreateRequest === undefined) {
            throw new runtime.RequiredError('bulkCustomFieldOptionCreateRequest','Required parameter requestParameters.bulkCustomFieldOptionCreateRequest was null or undefined when calling createCustomFieldOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/option`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters.fieldId))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.bulkCustomFieldOptionCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create custom field options (context)
     */
    async createCustomFieldOption(requestParameters: CreateCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomFieldCreatedContextOptionsList> {
        const response = await this.createCustomFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete custom field options (context)
     */
    async deleteCustomFieldOptionRaw(requestParameters: DeleteCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fieldId === null || requestParameters.fieldId === undefined) {
            throw new runtime.RequiredError('fieldId','Required parameter requestParameters.fieldId was null or undefined when calling deleteCustomFieldOption.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling deleteCustomFieldOption.');
        }

        if (requestParameters.optionId === null || requestParameters.optionId === undefined) {
            throw new runtime.RequiredError('optionId','Required parameter requestParameters.optionId was null or undefined when calling deleteCustomFieldOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters.fieldId))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters.contextId))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters.optionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete custom field options (context)
     */
    async deleteCustomFieldOption(requestParameters: DeleteCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomFieldOptionRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     * Get custom field option
     */
    async getCustomFieldOptionRaw(requestParameters: GetCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomFieldOption>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomFieldOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/customFieldOption/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     * Get custom field option
     */
    async getCustomFieldOption(requestParameters: GetCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomFieldOption> {
        const response = await this.getCustomFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field options (context)
     */
    async getOptionsForContextRaw(requestParameters: GetOptionsForContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanCustomFieldContextOption>> {
        if (requestParameters.fieldId === null || requestParameters.fieldId === undefined) {
            throw new runtime.RequiredError('fieldId','Required parameter requestParameters.fieldId was null or undefined when calling getOptionsForContext.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling getOptionsForContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.optionId !== undefined) {
            queryParameters['optionId'] = requestParameters.optionId;
        }

        if (requestParameters.onlyOptions !== undefined) {
            queryParameters['onlyOptions'] = requestParameters.onlyOptions;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/option`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters.fieldId))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field options (context)
     */
    async getOptionsForContext(requestParameters: GetOptionsForContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanCustomFieldContextOption> {
        const response = await this.getOptionsForContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Reorder custom field options (context)
     */
    async reorderCustomFieldOptionsRaw(requestParameters: ReorderCustomFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.fieldId === null || requestParameters.fieldId === undefined) {
            throw new runtime.RequiredError('fieldId','Required parameter requestParameters.fieldId was null or undefined when calling reorderCustomFieldOptions.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling reorderCustomFieldOptions.');
        }

        if (requestParameters.orderOfCustomFieldOptions === null || requestParameters.orderOfCustomFieldOptions === undefined) {
            throw new runtime.RequiredError('orderOfCustomFieldOptions','Required parameter requestParameters.orderOfCustomFieldOptions was null or undefined when calling reorderCustomFieldOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/option/move`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters.fieldId))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderOfCustomFieldOptions,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Reorder custom field options (context)
     */
    async reorderCustomFieldOptions(requestParameters: ReorderCustomFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reorderCustomFieldOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren\'t updated and aren\'t reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update custom field options (context)
     */
    async updateCustomFieldOptionRaw(requestParameters: UpdateCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomFieldUpdatedContextOptionsList>> {
        if (requestParameters.fieldId === null || requestParameters.fieldId === undefined) {
            throw new runtime.RequiredError('fieldId','Required parameter requestParameters.fieldId was null or undefined when calling updateCustomFieldOption.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling updateCustomFieldOption.');
        }

        if (requestParameters.bulkCustomFieldOptionUpdateRequest === null || requestParameters.bulkCustomFieldOptionUpdateRequest === undefined) {
            throw new runtime.RequiredError('bulkCustomFieldOptionUpdateRequest','Required parameter requestParameters.bulkCustomFieldOptionUpdateRequest was null or undefined when calling updateCustomFieldOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/option`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters.fieldId))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters.contextId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.bulkCustomFieldOptionUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren\'t updated and aren\'t reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update custom field options (context)
     */
    async updateCustomFieldOption(requestParameters: UpdateCustomFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomFieldUpdatedContextOptionsList> {
        const response = await this.updateCustomFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
