/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchPageResponseSearchResult,
} from '../models';

export interface SearchByCQLRequest {
    cql: string;
    cqlcontext?: string;
    cursor?: string;
    next?: boolean;
    prev?: boolean;
    limit?: number;
    start?: number;
    includeArchivedSpaces?: boolean;
    excludeCurrentSpaces?: boolean;
    excerpt?: SearchByCQLExcerptEnum;
    sitePermissionTypeFilter?: SearchByCQLSitePermissionTypeFilterEnum;
    u?: number;
    expand?: Array<string>;
}

export interface SearchUserRequest {
    cql: string;
    start?: number;
    limit?: number;
    expand?: Array<string>;
    sitePermissionTypeFilter?: SearchUserSitePermissionTypeFilterEnum;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: ``` /wiki/rest/api/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.  Example subsequent call (taken from example response): ``` /wiki/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.
     * Search content
     */
    async searchByCQLRaw(requestParameters: SearchByCQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPageResponseSearchResult>> {
        if (requestParameters.cql === null || requestParameters.cql === undefined) {
            throw new runtime.RequiredError('cql','Required parameter requestParameters.cql was null or undefined when calling searchByCQL.');
        }

        const queryParameters: any = {};

        if (requestParameters.cql !== undefined) {
            queryParameters['cql'] = requestParameters.cql;
        }

        if (requestParameters.cqlcontext !== undefined) {
            queryParameters['cqlcontext'] = requestParameters.cqlcontext;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        if (requestParameters.prev !== undefined) {
            queryParameters['prev'] = requestParameters.prev;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.includeArchivedSpaces !== undefined) {
            queryParameters['includeArchivedSpaces'] = requestParameters.includeArchivedSpaces;
        }

        if (requestParameters.excludeCurrentSpaces !== undefined) {
            queryParameters['excludeCurrentSpaces'] = requestParameters.excludeCurrentSpaces;
        }

        if (requestParameters.excerpt !== undefined) {
            queryParameters['excerpt'] = requestParameters.excerpt;
        }

        if (requestParameters.sitePermissionTypeFilter !== undefined) {
            queryParameters['sitePermissionTypeFilter'] = requestParameters.sitePermissionTypeFilter;
        }

        if (requestParameters.u !== undefined) {
            queryParameters['_'] = requestParameters.u;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["search:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: ``` /wiki/rest/api/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.  Example subsequent call (taken from example response): ``` /wiki/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.
     * Search content
     */
    async searchByCQL(requestParameters: SearchByCQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPageResponseSearchResult> {
        const response = await this.searchByCQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.  Note that some user fields may be set to null depending on the user\'s privacy settings. These are: email, profilePicture, displayName, and timeZone.
     * Search users
     */
    async searchUserRaw(requestParameters: SearchUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPageResponseSearchResult>> {
        if (requestParameters.cql === null || requestParameters.cql === undefined) {
            throw new runtime.RequiredError('cql','Required parameter requestParameters.cql was null or undefined when calling searchUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.cql !== undefined) {
            queryParameters['cql'] = requestParameters.cql;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sitePermissionTypeFilter !== undefined) {
            queryParameters['sitePermissionTypeFilter'] = requestParameters.sitePermissionTypeFilter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:content-details:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/search/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.  Note that some user fields may be set to null depending on the user\'s privacy settings. These are: email, profilePicture, displayName, and timeZone.
     * Search users
     */
    async searchUser(requestParameters: SearchUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPageResponseSearchResult> {
        const response = await this.searchUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchByCQLExcerptEnum = {
    Highlight: 'highlight',
    Indexed: 'indexed',
    None: 'none',
    HighlightUnescaped: 'highlight_unescaped',
    IndexedUnescaped: 'indexed_unescaped'
} as const;
export type SearchByCQLExcerptEnum = typeof SearchByCQLExcerptEnum[keyof typeof SearchByCQLExcerptEnum];
/**
 * @export
 */
export const SearchByCQLSitePermissionTypeFilterEnum = {
    All: 'all',
    ExternalCollaborator: 'externalCollaborator',
    None: 'none'
} as const;
export type SearchByCQLSitePermissionTypeFilterEnum = typeof SearchByCQLSitePermissionTypeFilterEnum[keyof typeof SearchByCQLSitePermissionTypeFilterEnum];
/**
 * @export
 */
export const SearchUserSitePermissionTypeFilterEnum = {
    All: 'all',
    ExternalCollaborator: 'externalCollaborator',
    None: 'none'
} as const;
export type SearchUserSitePermissionTypeFilterEnum = typeof SearchUserSitePermissionTypeFilterEnum[keyof typeof SearchUserSitePermissionTypeFilterEnum];
