/* tslint:disable */
/* eslint-disable */
/**
 * IDv2: User management
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AtlassianAccountUser,
  NotFoundAccount,
  Unauthorized,
  UsersAccountIdManageGet403Response,
  UsersAccountIdManageProfileGet200Response,
  UsersAccountIdManageProfilePatch400Response,
  UsersAccountIdManageProfilePatch403Response,
} from '../models';

export interface UsersAccountIdManageProfileGetRequest {
    accountId: string;
}

export interface UsersAccountIdManageProfilePatchRequest {
    accountId: string;
    atlassianAccountUser: AtlassianAccountUser;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Returns information about a single Atlassian account by ID
     * Get profile
     */
    async usersAccountIdManageProfileGetRaw(requestParameters: UsersAccountIdManageProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersAccountIdManageProfileGet200Response>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling usersAccountIdManageProfileGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{account_id}/manage/profile`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns information about a single Atlassian account by ID
     * Get profile
     */
    async usersAccountIdManageProfileGet(requestParameters: UsersAccountIdManageProfileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersAccountIdManageProfileGet200Response> {
        const response = await this.usersAccountIdManageProfileGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates fields in a user account. The `profile.write` privilege details which fields you can change.
     * Update profile
     */
    async usersAccountIdManageProfilePatchRaw(requestParameters: UsersAccountIdManageProfilePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersAccountIdManageProfileGet200Response>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling usersAccountIdManageProfilePatch.');
        }

        if (requestParameters.atlassianAccountUser === null || requestParameters.atlassianAccountUser === undefined) {
            throw new runtime.RequiredError('atlassianAccountUser','Required parameter requestParameters.atlassianAccountUser was null or undefined when calling usersAccountIdManageProfilePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{account_id}/manage/profile`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.atlassianAccountUser,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates fields in a user account. The `profile.write` privilege details which fields you can change.
     * Update profile
     */
    async usersAccountIdManageProfilePatch(requestParameters: UsersAccountIdManageProfilePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersAccountIdManageProfileGet200Response> {
        const response = await this.usersAccountIdManageProfilePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
