/* tslint:disable */
/* eslint-disable */
/**
 * App Migration
 * Endpoints available in Jira and Confluence cloud instances to support app migrations
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContainerFetchResponse,
  TransferMetadata,
} from '../models/index';

export interface GetContainersByPageUsingGET1Request {
    transferId: string;
    containerType: GetContainersByPageUsingGET1ContainerTypeEnum;
    lastEntity?: string;
    pageSize?: number;
}

/**
 * 
 */
export class TransferRetrievalAPIApi extends runtime.BaseAPI {

    /**
     * Returns containers for a given container type
     * Get containers in pages
     */
    async getContainersByPageUsingGET1Raw(requestParameters: GetContainersByPageUsingGET1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerFetchResponse>> {
        if (requestParameters['transferId'] == null) {
            throw new runtime.RequiredError(
                'transferId',
                'Required parameter "transferId" was null or undefined when calling getContainersByPageUsingGET1().'
            );
        }

        if (requestParameters['containerType'] == null) {
            throw new runtime.RequiredError(
                'containerType',
                'Required parameter "containerType" was null or undefined when calling getContainersByPageUsingGET1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['containerType'] != null) {
            queryParameters['containerType'] = requestParameters['containerType'];
        }

        if (requestParameters['lastEntity'] != null) {
            queryParameters['lastEntity'] = requestParameters['lastEntity'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/container/{transferId}/page`.replace(`{${"transferId"}}`, encodeURIComponent(String(requestParameters['transferId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns containers for a given container type
     * Get containers in pages
     */
    async getContainersByPageUsingGET1(requestParameters: GetContainersByPageUsingGET1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerFetchResponse> {
        const response = await this.getContainersByPageUsingGET1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of latest active transfers (upto 100) with migration details
     * Get list of active transfers
     */
    async getRecentTransferUsingGETRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransferMetadata>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transfer/recent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of latest active transfers (upto 100) with migration details
     * Get list of active transfers
     */
    async getRecentTransferUsingGET(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransferMetadata>> {
        const response = await this.getRecentTransferUsingGETRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetContainersByPageUsingGET1ContainerTypeEnum = {
    ConfluenceSpace: 'ConfluenceSpace',
    JiraProject: 'JiraProject',
    Site: 'Site'
} as const;
export type GetContainersByPageUsingGET1ContainerTypeEnum = typeof GetContainersByPageUsingGET1ContainerTypeEnum[keyof typeof GetContainersByPageUsingGET1ContainerTypeEnum];
