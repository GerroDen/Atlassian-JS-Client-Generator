/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Task,
  TaskPageResponse,
  TaskStatusUpdate,
} from '../models';

export interface GetTaskByIdRequest {
    inlineTaskId: string;
}

export interface SearchTasksRequest {
    start?: number;
    limit?: number;
    spaceKey?: string;
    pageId?: string;
    assignee?: string;
    creator?: string;
    completedUser?: string;
    duedateFrom?: number;
    duedateTo?: number;
    createdateFrom?: number;
    createdateTo?: number;
    completedateFrom?: number;
    completedateTo?: number;
    status?: SearchTasksStatusEnum;
}

export interface UpdateTaskByIdRequest {
    inlineTaskId: string;
    taskStatusUpdate: TaskStatusUpdate;
}

/**
 * 
 */
export class InlineTasksApi extends runtime.BaseAPI {

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns inline task based on the global ID.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content associated with the task.
     * Get inline task based on global ID
     */
    async getTaskByIdRaw(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.inlineTaskId === null || requestParameters.inlineTaskId === undefined) {
            throw new runtime.RequiredError('inlineTaskId','Required parameter requestParameters.inlineTaskId was null or undefined when calling getTaskById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:inlinetask:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/inlinetasks/{inlineTaskId}`.replace(`{${"inlineTaskId"}}`, encodeURIComponent(String(requestParameters.inlineTaskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns inline task based on the global ID.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content associated with the task.
     * Get inline task based on global ID
     */
    async getTaskById(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.getTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns inline tasks based on the search query.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Only tasks in contents that the user has permission to view are returned.
     * Get inline tasks based on search parameters
     */
    async searchTasksRaw(requestParameters: SearchTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskPageResponse>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.spaceKey !== undefined) {
            queryParameters['spaceKey'] = requestParameters.spaceKey;
        }

        if (requestParameters.pageId !== undefined) {
            queryParameters['pageId'] = requestParameters.pageId;
        }

        if (requestParameters.assignee !== undefined) {
            queryParameters['assignee'] = requestParameters.assignee;
        }

        if (requestParameters.creator !== undefined) {
            queryParameters['creator'] = requestParameters.creator;
        }

        if (requestParameters.completedUser !== undefined) {
            queryParameters['completedUser'] = requestParameters.completedUser;
        }

        if (requestParameters.duedateFrom !== undefined) {
            queryParameters['duedateFrom'] = requestParameters.duedateFrom;
        }

        if (requestParameters.duedateTo !== undefined) {
            queryParameters['duedateTo'] = requestParameters.duedateTo;
        }

        if (requestParameters.createdateFrom !== undefined) {
            queryParameters['createdateFrom'] = requestParameters.createdateFrom;
        }

        if (requestParameters.createdateTo !== undefined) {
            queryParameters['createdateTo'] = requestParameters.createdateTo;
        }

        if (requestParameters.completedateFrom !== undefined) {
            queryParameters['completedateFrom'] = requestParameters.completedateFrom;
        }

        if (requestParameters.completedateTo !== undefined) {
            queryParameters['completedateTo'] = requestParameters.completedateTo;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/inlinetasks/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns inline tasks based on the search query.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Only tasks in contents that the user has permission to view are returned.
     * Get inline tasks based on search parameters
     */
    async searchTasks(requestParameters: SearchTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskPageResponse> {
        const response = await this.searchTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an inline tasks status given its global ID  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content associated with the task.
     * Update inline task given global ID
     */
    async updateTaskByIdRaw(requestParameters: UpdateTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.inlineTaskId === null || requestParameters.inlineTaskId === undefined) {
            throw new runtime.RequiredError('inlineTaskId','Required parameter requestParameters.inlineTaskId was null or undefined when calling updateTaskById.');
        }

        if (requestParameters.taskStatusUpdate === null || requestParameters.taskStatusUpdate === undefined) {
            throw new runtime.RequiredError('taskStatusUpdate','Required parameter requestParameters.taskStatusUpdate was null or undefined when calling updateTaskById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:inlinetask:confluence", "write:inlinetask:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/inlinetasks/{inlineTaskId}`.replace(`{${"inlineTaskId"}}`, encodeURIComponent(String(requestParameters.inlineTaskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.taskStatusUpdate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates an inline tasks status given its global ID  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content associated with the task.
     * Update inline task given global ID
     */
    async updateTaskById(requestParameters: UpdateTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.updateTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchTasksStatusEnum = {
    Complete: 'complete',
    Incomplete: 'incomplete'
} as const;
export type SearchTasksStatusEnum = typeof SearchTasksStatusEnum[keyof typeof SearchTasksStatusEnum];
