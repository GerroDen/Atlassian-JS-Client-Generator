/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AsyncContentBody,
  AsyncId,
  ContentBody,
  ContentBodyCreate,
} from '../models';

export interface AsyncConvertContentBodyRequestRequest {
    to: AsyncConvertContentBodyRequestToEnum;
    body: { [key: string]: any; };
    expand?: Array<string>;
    spaceKeyContext?: string;
    contentIdContext?: string;
    allowCache?: boolean;
    embeddedContentRender?: AsyncConvertContentBodyRequestEmbeddedContentRenderEnum;
}

export interface AsyncConvertContentBodyResponseRequest {
    id: string;
}

export interface ConvertContentBodyRequest {
    to: string;
    body: { [key: string]: any; };
    spaceKeyContext?: string;
    contentIdContext?: string;
    embeddedContentRender?: ConvertContentBodyEmbeddedContentRenderEnum;
    expand?: Array<string>;
}

/**
 * 
 */
export class ContentBodyApi extends runtime.BaseAPI {

    /**
     * Converts a content body from one format to another format asynchronously. Returns the asyncId for the asynchronous task.  Supported conversions:  - storage: export_view  No other conversions are supported at the moment. Once a conversion is completed, it will be available for 5 minutes at the result endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: If request specifies \'contentIdContext\', \'View\' permission for the space, and permission to view the content.
     * Asynchronously convert content body
     */
    async asyncConvertContentBodyRequestRaw(requestParameters: AsyncConvertContentBodyRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AsyncId>> {
        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling asyncConvertContentBodyRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling asyncConvertContentBodyRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.spaceKeyContext !== undefined) {
            queryParameters['spaceKeyContext'] = requestParameters.spaceKeyContext;
        }

        if (requestParameters.contentIdContext !== undefined) {
            queryParameters['contentIdContext'] = requestParameters.contentIdContext;
        }

        if (requestParameters.allowCache !== undefined) {
            queryParameters['allowCache'] = requestParameters.allowCache;
        }

        if (requestParameters.embeddedContentRender !== undefined) {
            queryParameters['embeddedContentRender'] = requestParameters.embeddedContentRender;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/contentbody/convert/async/{to}`.replace(`{${"to"}}`, encodeURIComponent(String(requestParameters.to))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Converts a content body from one format to another format asynchronously. Returns the asyncId for the asynchronous task.  Supported conversions:  - storage: export_view  No other conversions are supported at the moment. Once a conversion is completed, it will be available for 5 minutes at the result endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: If request specifies \'contentIdContext\', \'View\' permission for the space, and permission to view the content.
     * Asynchronously convert content body
     */
    async asyncConvertContentBodyRequest(requestParameters: AsyncConvertContentBodyRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncId> {
        const response = await this.asyncConvertContentBodyRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the asynchronous content body for the corresponding id if the task is complete  or returns the status of the task.  After the task is completed, the result can be obtained for 5 minutes, or until an identical conversion request is made again, with allowCache query param set to false.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: If request specifies \'contentIdContext\', \'View\' permission for the space, and permission to view the content.
     * Get asynchronously converted content body from the id or the current status of the task.
     */
    async asyncConvertContentBodyResponseRaw(requestParameters: AsyncConvertContentBodyResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AsyncContentBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling asyncConvertContentBodyResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/contentbody/convert/async/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the asynchronous content body for the corresponding id if the task is complete  or returns the status of the task.  After the task is completed, the result can be obtained for 5 minutes, or until an identical conversion request is made again, with allowCache query param set to false.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: If request specifies \'contentIdContext\', \'View\' permission for the space, and permission to view the content.
     * Get asynchronously converted content body from the id or the current status of the task.
     */
    async asyncConvertContentBodyResponse(requestParameters: AsyncConvertContentBodyResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncContentBody> {
        const response = await this.asyncConvertContentBodyResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Converts a content body from one format to another format.  Supported conversions:  - storage: view, export_view, styled_view, editor - editor: storage - view: none - export_view: none - styled_view: none  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: If request specifies \'contentIdContext\', \'View\' permission for the space, and permission to view the content.
     * Convert content body
     */
    async convertContentBodyRaw(requestParameters: ConvertContentBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentBody>> {
        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling convertContentBody.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling convertContentBody.');
        }

        const queryParameters: any = {};

        if (requestParameters.spaceKeyContext !== undefined) {
            queryParameters['spaceKeyContext'] = requestParameters.spaceKeyContext;
        }

        if (requestParameters.contentIdContext !== undefined) {
            queryParameters['contentIdContext'] = requestParameters.contentIdContext;
        }

        if (requestParameters.embeddedContentRender !== undefined) {
            queryParameters['embeddedContentRender'] = requestParameters.embeddedContentRender;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/contentbody/convert/{to}`.replace(`{${"to"}}`, encodeURIComponent(String(requestParameters.to))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Converts a content body from one format to another format.  Supported conversions:  - storage: view, export_view, styled_view, editor - editor: storage - view: none - export_view: none - styled_view: none  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: If request specifies \'contentIdContext\', \'View\' permission for the space, and permission to view the content.
     * Convert content body
     */
    async convertContentBody(requestParameters: ConvertContentBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentBody> {
        const response = await this.convertContentBodyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AsyncConvertContentBodyRequestToEnum = {
    ExportView: 'export_view'
} as const;
export type AsyncConvertContentBodyRequestToEnum = typeof AsyncConvertContentBodyRequestToEnum[keyof typeof AsyncConvertContentBodyRequestToEnum];
/**
 * @export
 */
export const AsyncConvertContentBodyRequestEmbeddedContentRenderEnum = {
    Current: 'current',
    VersionAtSave: 'version-at-save'
} as const;
export type AsyncConvertContentBodyRequestEmbeddedContentRenderEnum = typeof AsyncConvertContentBodyRequestEmbeddedContentRenderEnum[keyof typeof AsyncConvertContentBodyRequestEmbeddedContentRenderEnum];
/**
 * @export
 */
export const ConvertContentBodyEmbeddedContentRenderEnum = {
    Current: 'current',
    VersionAtSave: 'version-at-save'
} as const;
export type ConvertContentBodyEmbeddedContentRenderEnum = typeof ConvertContentBodyEmbeddedContentRenderEnum[keyof typeof ConvertContentBodyEmbeddedContentRenderEnum];
