/* tslint:disable */
/* eslint-disable */
/**
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetEnvironmentsExecutableByAgent200Response,
  RestAgentAssignmentExecutorDetails,
  RestAgentSummary,
  RestDeploymentResultList,
  RestDockerPipelineConfiguration,
  RestEnvironmentWithConfigCounts,
  RestErrorCollection,
  RestRequirement,
  RestVariable,
  RestVariableDefinitionContext,
} from '../models';

export interface AddAgentAssignmentForEnvironmentRequest {
    environmentId: string;
    body?: string;
}

export interface AddRequirementForEnvironmentRequest {
    environmentId: string;
    restRequirement?: RestRequirement;
}

export interface CreateEnvironmentVariableRequest {
    environmentId: string;
    restVariable?: RestVariable;
}

export interface DeleteEnvironmentVariableRequest {
    variableName: string;
    environmentId: string;
}

export interface FindAssignedAgentsByEnvironmentRequest {
    environmentId: string;
}

export interface FindPossibleAgentsForEnvironmentRequest {
    environmentId: string;
    maxResult?: number;
    searchTerm?: string;
    startIndex?: number;
}

export interface GetAgentMatchesForEnvironmentRequest {
    environmentId: string;
}

export interface GetAllEnvironmentVariablesRequest {
    environmentId: string;
}

export interface GetDeploymentResultListRequest {
    environmentId: string;
    expand?: string;
}

export interface GetDetailedAgentMatchesForEnvironmentRequest {
    environmentId: string;
}

export interface GetDockerPipelinesConfigurationRequest {
    environmentId: string;
}

export interface GetEnvironmentRequest {
    environmentId: string;
}

export interface GetEnvironmentVariableRequest {
    variableName: string;
    environmentId: string;
}

export interface GetEnvironmentsExecutableByAgentRequest {
    agentId: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface GetEnvironmentsExecutableByElasticConfigurationRequest {
    configurationId: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface GetRequirementForEnvironmentRequest {
    environmentId: string;
    requirementId: string;
}

export interface GetRequirementsForEnvironmentRequest {
    environmentId: string;
}

export interface MoveEnvironmentRequest {
    environmentId: string;
    relativeEnvironmentId: string;
    position: string;
}

export interface RemoveAgentAssignmentFromEnvironmentRequest {
    environmentId: string;
    executorKey: string;
}

export interface RemoveRequirementFromEnvironmentRequest {
    environmentId: string;
    requirementId: string;
}

export interface SaveDockerPipelinesConfigurationRequest {
    environmentId: string;
    restDockerPipelineConfiguration?: RestDockerPipelineConfiguration;
}

export interface UpdateEnvironmentVariableRequest {
    variableName: string;
    environmentId: string;
    restVariable?: RestVariable;
}

export interface UpdateRequirementForEnvironmentRequest {
    environmentId: string;
    requirementId: string;
    restRequirement?: RestRequirement;
}

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI {

    /**
     * Add agent assignment for environment. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey.  agentAssignmentKey is parsed by ExecutorKey.
     */
    async addAgentAssignmentForEnvironmentRaw(requestParameters: AddAgentAssignmentForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAgentAssignmentExecutorDetails>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling addAgentAssignmentForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/agent-assignment`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add agent assignment for environment. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey.  agentAssignmentKey is parsed by ExecutorKey.
     */
    async addAgentAssignmentForEnvironment(requestParameters: AddAgentAssignmentForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAgentAssignmentExecutorDetails> {
        const response = await this.addAgentAssignmentForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a requirement for a given environment.
     */
    async addRequirementForEnvironmentRaw(requestParameters: AddRequirementForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestRequirement>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling addRequirementForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restRequirement,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a requirement for a given environment.
     */
    async addRequirementForEnvironment(requestParameters: AddRequirementForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestRequirement> {
        const response = await this.addRequirementForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create the environment variable.
     */
    async createEnvironmentVariableRaw(requestParameters: CreateEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestVariableDefinitionContext>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling createEnvironmentVariable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/variable`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restVariable,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create the environment variable.
     */
    async createEnvironmentVariable(requestParameters: CreateEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestVariableDefinitionContext> {
        const response = await this.createEnvironmentVariableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the environment variable.
     */
    async deleteEnvironmentVariableRaw(requestParameters: DeleteEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.variableName === null || requestParameters.variableName === undefined) {
            throw new runtime.RequiredError('variableName','Required parameter requestParameters.variableName was null or undefined when calling deleteEnvironmentVariable.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling deleteEnvironmentVariable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/variable/{variableName}`.replace(`{${"variableName"}}`, encodeURIComponent(String(requestParameters.variableName))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the environment variable.
     */
    async deleteEnvironmentVariable(requestParameters: DeleteEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEnvironmentVariableRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of agents/images assigned to given environment.
     */
    async findAssignedAgentsByEnvironmentRaw(requestParameters: FindAssignedAgentsByEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RestAgentAssignmentExecutorDetails>>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling findAssignedAgentsByEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/agent-assignment`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a list of agents/images assigned to given environment.
     */
    async findAssignedAgentsByEnvironment(requestParameters: FindAssignedAgentsByEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RestAgentAssignmentExecutorDetails>> {
        const response = await this.findAssignedAgentsByEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of agents/images which can be dedicated for given environment.
     */
    async findPossibleAgentsForEnvironmentRaw(requestParameters: FindPossibleAgentsForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling findPossibleAgentsForEnvironment.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxResult !== undefined) {
            queryParameters['max-result'] = requestParameters.maxResult;
        }

        if (requestParameters.searchTerm !== undefined) {
            queryParameters['searchTerm'] = requestParameters.searchTerm;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['start-index'] = requestParameters.startIndex;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/possible-agent-assignment`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a list of agents/images which can be dedicated for given environment.
     */
    async findPossibleAgentsForEnvironment(requestParameters: FindPossibleAgentsForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.findPossibleAgentsForEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a summary of the agents that are capable of running an environment, based of its requirements.
     */
    async getAgentMatchesForEnvironmentRaw(requestParameters: GetAgentMatchesForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAgentSummary>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getAgentMatchesForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement/summary`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a summary of the agents that are capable of running an environment, based of its requirements.
     */
    async getAgentMatchesForEnvironment(requestParameters: GetAgentMatchesForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAgentSummary> {
        const response = await this.getAgentMatchesForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of environment variables.
     */
    async getAllEnvironmentVariablesRaw(requestParameters: GetAllEnvironmentVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getAllEnvironmentVariables.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/variables`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a list of environment variables.
     */
    async getAllEnvironmentVariables(requestParameters: GetAllEnvironmentVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAllEnvironmentVariablesRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of versions deployed to the environment. Sorted by started date: newest first.
     */
    async getDeploymentResultListRaw(requestParameters: GetDeploymentResultListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestDeploymentResultList>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getDeploymentResultList.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/results`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a list of versions deployed to the environment. Sorted by started date: newest first.
     */
    async getDeploymentResultList(requestParameters: GetDeploymentResultListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestDeploymentResultList> {
        const response = await this.getDeploymentResultListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a detailed summary of the agents that are capable of running an environment, based of its requirements.
     */
    async getDetailedAgentMatchesForEnvironmentRaw(requestParameters: GetDetailedAgentMatchesForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAgentSummary>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getDetailedAgentMatchesForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement/detailedSummary`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a detailed summary of the agents that are capable of running an environment, based of its requirements.
     */
    async getDetailedAgentMatchesForEnvironment(requestParameters: GetDetailedAgentMatchesForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAgentSummary> {
        const response = await this.getDetailedAgentMatchesForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Docker configuration for given environment.
     */
    async getDockerPipelinesConfigurationRaw(requestParameters: GetDockerPipelinesConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestDockerPipelineConfiguration>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getDockerPipelinesConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/docker`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Docker configuration for given environment.
     */
    async getDockerPipelinesConfiguration(requestParameters: GetDockerPipelinesConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestDockerPipelineConfiguration> {
        const response = await this.getDockerPipelinesConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a summary of a single environment.
     */
    async getEnvironmentRaw(requestParameters: GetEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestEnvironmentWithConfigCounts>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a summary of a single environment.
     */
    async getEnvironment(requestParameters: GetEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestEnvironmentWithConfigCounts> {
        const response = await this.getEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the environment variable by its name.
     */
    async getEnvironmentVariableRaw(requestParameters: GetEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestVariable>> {
        if (requestParameters.variableName === null || requestParameters.variableName === undefined) {
            throw new runtime.RequiredError('variableName','Required parameter requestParameters.variableName was null or undefined when calling getEnvironmentVariable.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentVariable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/variable/{variableName}`.replace(`{${"variableName"}}`, encodeURIComponent(String(requestParameters.variableName))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the environment variable by its name.
     */
    async getEnvironmentVariable(requestParameters: GetEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestVariable> {
        const response = await this.getEnvironmentVariableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide a paginated list of minimal information about environments executable by a given agent.
     */
    async getEnvironmentsExecutableByAgentRaw(requestParameters: GetEnvironmentsExecutableByAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEnvironmentsExecutableByAgent200Response>> {
        if (requestParameters.agentId === null || requestParameters.agentId === undefined) {
            throw new runtime.RequiredError('agentId','Required parameter requestParameters.agentId was null or undefined when calling getEnvironmentsExecutableByAgent.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/agent/{agentId}`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Provide a paginated list of minimal information about environments executable by a given agent.
     */
    async getEnvironmentsExecutableByAgent(requestParameters: GetEnvironmentsExecutableByAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEnvironmentsExecutableByAgent200Response> {
        const response = await this.getEnvironmentsExecutableByAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide a paginated list of minimal information about environments executable by a given elastic image configuration.
     */
    async getEnvironmentsExecutableByElasticConfigurationRaw(requestParameters: GetEnvironmentsExecutableByElasticConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEnvironmentsExecutableByAgent200Response>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling getEnvironmentsExecutableByElasticConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/elasticImageConfiguration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Provide a paginated list of minimal information about environments executable by a given elastic image configuration.
     */
    async getEnvironmentsExecutableByElasticConfiguration(requestParameters: GetEnvironmentsExecutableByElasticConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEnvironmentsExecutableByAgent200Response> {
        const response = await this.getEnvironmentsExecutableByElasticConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the details of a requirement for a given environment.
     */
    async getRequirementForEnvironmentRaw(requestParameters: GetRequirementForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestRequirement>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getRequirementForEnvironment.');
        }

        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling getRequirementForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the details of a requirement for a given environment.
     */
    async getRequirementForEnvironment(requestParameters: GetRequirementForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestRequirement> {
        const response = await this.getRequirementForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the requirements of an environment.
     */
    async getRequirementsForEnvironmentRaw(requestParameters: GetRequirementsForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RestRequirement>>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getRequirementsForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all the requirements of an environment.
     */
    async getRequirementsForEnvironment(requestParameters: GetRequirementsForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RestRequirement>> {
        const response = await this.getRequirementsForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change environment position within deployment project.
     */
    async moveEnvironmentRaw(requestParameters: MoveEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling moveEnvironment.');
        }

        if (requestParameters.relativeEnvironmentId === null || requestParameters.relativeEnvironmentId === undefined) {
            throw new runtime.RequiredError('relativeEnvironmentId','Required parameter requestParameters.relativeEnvironmentId was null or undefined when calling moveEnvironment.');
        }

        if (requestParameters.position === null || requestParameters.position === undefined) {
            throw new runtime.RequiredError('position','Required parameter requestParameters.position was null or undefined when calling moveEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/move/{position}/{relativeEnvironmentId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"relativeEnvironmentId"}}`, encodeURIComponent(String(requestParameters.relativeEnvironmentId))).replace(`{${"position"}}`, encodeURIComponent(String(requestParameters.position))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change environment position within deployment project.
     */
    async moveEnvironment(requestParameters: MoveEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.moveEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     * Remove agent/image from list of dedicated executors for given environment.
     */
    async removeAgentAssignmentFromEnvironmentRaw(requestParameters: RemoveAgentAssignmentFromEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling removeAgentAssignmentFromEnvironment.');
        }

        if (requestParameters.executorKey === null || requestParameters.executorKey === undefined) {
            throw new runtime.RequiredError('executorKey','Required parameter requestParameters.executorKey was null or undefined when calling removeAgentAssignmentFromEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/agent-assignment/{executorKey}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"executorKey"}}`, encodeURIComponent(String(requestParameters.executorKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove agent/image from list of dedicated executors for given environment.
     */
    async removeAgentAssignmentFromEnvironment(requestParameters: RemoveAgentAssignmentFromEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAgentAssignmentFromEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a requirement for an environment.
     */
    async removeRequirementFromEnvironmentRaw(requestParameters: RemoveRequirementFromEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling removeRequirementFromEnvironment.');
        }

        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling removeRequirementFromEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a requirement for an environment.
     */
    async removeRequirementFromEnvironment(requestParameters: RemoveRequirementFromEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRequirementFromEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     * Save Docker configuration for given environment.
     */
    async saveDockerPipelinesConfigurationRaw(requestParameters: SaveDockerPipelinesConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling saveDockerPipelinesConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/docker`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restDockerPipelineConfiguration,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save Docker configuration for given environment.
     */
    async saveDockerPipelinesConfiguration(requestParameters: SaveDockerPipelinesConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveDockerPipelinesConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Update the environment variable.
     */
    async updateEnvironmentVariableRaw(requestParameters: UpdateEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestVariableDefinitionContext>> {
        if (requestParameters.variableName === null || requestParameters.variableName === undefined) {
            throw new runtime.RequiredError('variableName','Required parameter requestParameters.variableName was null or undefined when calling updateEnvironmentVariable.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling updateEnvironmentVariable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/variable/{variableName}`.replace(`{${"variableName"}}`, encodeURIComponent(String(requestParameters.variableName))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restVariable,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the environment variable.
     */
    async updateEnvironmentVariable(requestParameters: UpdateEnvironmentVariableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestVariableDefinitionContext> {
        const response = await this.updateEnvironmentVariableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a requirement for a given environment.
     */
    async updateRequirementForEnvironmentRaw(requestParameters: UpdateRequirementForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestRequirement>> {
        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling updateRequirementForEnvironment.');
        }

        if (requestParameters.requirementId === null || requestParameters.requirementId === undefined) {
            throw new runtime.RequiredError('requirementId','Required parameter requestParameters.requirementId was null or undefined when calling updateRequirementForEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}`.replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"requirementId"}}`, encodeURIComponent(String(requestParameters.requirementId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restRequirement,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a requirement for a given environment.
     */
    async updateRequirementForEnvironment(requestParameters: UpdateRequirementForEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestRequirement> {
        const response = await this.updateRequirementForEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
