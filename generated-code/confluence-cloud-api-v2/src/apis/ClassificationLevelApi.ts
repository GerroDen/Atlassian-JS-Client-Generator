/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClassificationLevel,
  PostPageClassificationLevelRequest,
  PostWhiteboardClassificationLevelRequest,
  PutSpaceDefaultClassificationLevelRequest,
  PutWhiteboardClassificationLevelRequest,
} from '../models/index';

export interface DeleteSpaceDefaultClassificationLevelRequest {
    id: number;
}

export interface GetBlogPostClassificationLevelRequest {
    id: number;
    status?: GetBlogPostClassificationLevelStatusEnum;
}

export interface GetDatabaseClassificationLevelRequest {
    id: number;
}

export interface GetPageClassificationLevelRequest {
    id: number;
    status?: GetPageClassificationLevelStatusEnum;
}

export interface GetSpaceDefaultClassificationLevelRequest {
    id: number;
}

export interface GetWhiteboardClassificationLevelRequest {
    id: number;
}

export interface PostBlogPostClassificationLevelRequest {
    id: number;
    postPageClassificationLevelRequest: PostPageClassificationLevelRequest;
}

export interface PostDatabaseClassificationLevelRequest {
    id: number;
    postWhiteboardClassificationLevelRequest: PostWhiteboardClassificationLevelRequest;
}

export interface PostPageClassificationLevelOperationRequest {
    id: number;
    postPageClassificationLevelRequest: PostPageClassificationLevelRequest;
}

export interface PostWhiteboardClassificationLevelOperationRequest {
    id: number;
    postWhiteboardClassificationLevelRequest: PostWhiteboardClassificationLevelRequest;
}

export interface PutBlogPostClassificationLevelRequest {
    id: number;
    putSpaceDefaultClassificationLevelRequest: PutSpaceDefaultClassificationLevelRequest;
}

export interface PutDatabaseClassificationLevelRequest {
    id: number;
    putWhiteboardClassificationLevelRequest: PutWhiteboardClassificationLevelRequest;
}

export interface PutPageClassificationLevelRequest {
    id: number;
    putSpaceDefaultClassificationLevelRequest: PutSpaceDefaultClassificationLevelRequest;
}

export interface PutSpaceDefaultClassificationLevelOperationRequest {
    id: number;
    putSpaceDefaultClassificationLevelRequest: PutSpaceDefaultClassificationLevelRequest;
}

export interface PutWhiteboardClassificationLevelOperationRequest {
    id: number;
    putWhiteboardClassificationLevelRequest: PutWhiteboardClassificationLevelRequest;
}

/**
 * 
 */
export class ClassificationLevelApi extends runtime.BaseAPI {

    /**
     * Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/)  for a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and \'Admin\' permission for the space.
     * Delete space default classification level
     */
    async deleteSpaceDefaultClassificationLevelRaw(requestParameters: DeleteSpaceDefaultClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSpaceDefaultClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:space:confluence", "write:space:confluence"]);
        }

        const response = await this.request({
            path: `/spaces/{id}/classification-level/default`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/)  for a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and \'Admin\' permission for the space.
     * Delete space default classification level
     */
    async deleteSpaceDefaultClassificationLevel(requestParameters: DeleteSpaceDefaultClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSpaceDefaultClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the blog post. \'Permission to edit the blog post is required if trying to view classification level for a draft.
     * Get blog post classification level
     */
    async getBlogPostClassificationLevelRaw(requestParameters: GetBlogPostClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassificationLevel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBlogPostClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the blog post. \'Permission to edit the blog post is required if trying to view classification level for a draft.
     * Get blog post classification level
     */
    async getBlogPostClassificationLevel(requestParameters: GetBlogPostClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassificationLevel> {
        const response = await this.getBlogPostClassificationLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of [classification levels](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)  available.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission).
     * Get list of classification levels
     */
    async getClassificationLevelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClassificationLevel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", []);
        }

        const response = await this.request({
            path: `/classification-levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of [classification levels](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)  available.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission).
     * Get list of classification levels
     */
    async getClassificationLevels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClassificationLevel>> {
        const response = await this.getClassificationLevelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific database.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the database.
     * Get database classification level
     */
    async getDatabaseClassificationLevelRaw(requestParameters: GetDatabaseClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassificationLevel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDatabaseClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:database:confluence"]);
        }

        const response = await this.request({
            path: `/databases/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific database.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the database.
     * Get database classification level
     */
    async getDatabaseClassificationLevel(requestParameters: GetDatabaseClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassificationLevel> {
        const response = await this.getDatabaseClassificationLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the page. \'Permission to edit the page is required if trying to view classification level for a draft.
     * Get page classification level
     */
    async getPageClassificationLevelRaw(requestParameters: GetPageClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassificationLevel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPageClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the page. \'Permission to edit the page is required if trying to view classification level for a draft.
     * Get page classification level
     */
    async getPageClassificationLevel(requestParameters: GetPageClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassificationLevel> {
        const response = await this.getPageClassificationLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/)  for a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the space.
     * Get space default classification level
     */
    async getSpaceDefaultClassificationLevelRaw(requestParameters: GetSpaceDefaultClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassificationLevel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSpaceDefaultClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:space:confluence"]);
        }

        const response = await this.request({
            path: `/spaces/{id}/classification-level/default`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/)  for a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the space.
     * Get space default classification level
     */
    async getSpaceDefaultClassificationLevel(requestParameters: GetSpaceDefaultClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassificationLevel> {
        const response = await this.getSpaceDefaultClassificationLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the whiteboard.
     * Get whiteboard classification level
     */
    async getWhiteboardClassificationLevelRaw(requestParameters: GetWhiteboardClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClassificationLevel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWhiteboardClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:whiteboard:confluence"]);
        }

        const response = await this.request({
            path: `/whiteboards/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the whiteboard.
     * Get whiteboard classification level
     */
    async getWhiteboardClassificationLevel(requestParameters: GetWhiteboardClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClassificationLevel> {
        const response = await this.getWhiteboardClassificationLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific blog post for the space   [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the blog post.
     * Reset blog post classification level
     */
    async postBlogPostClassificationLevelRaw(requestParameters: PostBlogPostClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postBlogPostClassificationLevel().'
            );
        }

        if (requestParameters['postPageClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'postPageClassificationLevelRequest',
                'Required parameter "postPageClassificationLevelRequest" was null or undefined when calling postBlogPostClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{id}/classification-level/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['postPageClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific blog post for the space   [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the blog post.
     * Reset blog post classification level
     */
    async postBlogPostClassificationLevel(requestParameters: PostBlogPostClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postBlogPostClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific database for the space  [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the database.
     * Reset database classification level
     */
    async postDatabaseClassificationLevelRaw(requestParameters: PostDatabaseClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDatabaseClassificationLevel().'
            );
        }

        if (requestParameters['postWhiteboardClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'postWhiteboardClassificationLevelRequest',
                'Required parameter "postWhiteboardClassificationLevelRequest" was null or undefined when calling postDatabaseClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:database:confluence"]);
        }

        const response = await this.request({
            path: `/databases/{id}/classification-level/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['postWhiteboardClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific database for the space  [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the database.
     * Reset database classification level
     */
    async postDatabaseClassificationLevel(requestParameters: PostDatabaseClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postDatabaseClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific page for the space  [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the page.
     * Reset page classification level
     */
    async postPageClassificationLevelRaw(requestParameters: PostPageClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postPageClassificationLevel().'
            );
        }

        if (requestParameters['postPageClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'postPageClassificationLevelRequest',
                'Required parameter "postPageClassificationLevelRequest" was null or undefined when calling postPageClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{id}/classification-level/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['postPageClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific page for the space  [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the page.
     * Reset page classification level
     */
    async postPageClassificationLevel(requestParameters: PostPageClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postPageClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific whiteboard for the space  [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the whiteboard.
     * Reset whiteboard classification level
     */
    async postWhiteboardClassificationLevelRaw(requestParameters: PostWhiteboardClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postWhiteboardClassificationLevel().'
            );
        }

        if (requestParameters['postWhiteboardClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'postWhiteboardClassificationLevelRequest',
                'Required parameter "postWhiteboardClassificationLevelRequest" was null or undefined when calling postWhiteboardClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:whiteboard:confluence"]);
        }

        const response = await this.request({
            path: `/whiteboards/{id}/classification-level/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['postWhiteboardClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific whiteboard for the space  [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to view the whiteboard.
     * Reset whiteboard classification level
     */
    async postWhiteboardClassificationLevel(requestParameters: PostWhiteboardClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postWhiteboardClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the blog post.
     * Update blog post classification level
     */
    async putBlogPostClassificationLevelRaw(requestParameters: PutBlogPostClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putBlogPostClassificationLevel().'
            );
        }

        if (requestParameters['putSpaceDefaultClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'putSpaceDefaultClassificationLevelRequest',
                'Required parameter "putSpaceDefaultClassificationLevelRequest" was null or undefined when calling putBlogPostClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['putSpaceDefaultClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the blog post.
     * Update blog post classification level
     */
    async putBlogPostClassificationLevel(requestParameters: PutBlogPostClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putBlogPostClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific database.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the database.
     * Update database classification level
     */
    async putDatabaseClassificationLevelRaw(requestParameters: PutDatabaseClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putDatabaseClassificationLevel().'
            );
        }

        if (requestParameters['putWhiteboardClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'putWhiteboardClassificationLevelRequest',
                'Required parameter "putWhiteboardClassificationLevelRequest" was null or undefined when calling putDatabaseClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:database:confluence"]);
        }

        const response = await this.request({
            path: `/databases/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['putWhiteboardClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific database.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the database.
     * Update database classification level
     */
    async putDatabaseClassificationLevel(requestParameters: PutDatabaseClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putDatabaseClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the page.
     * Update page classification level
     */
    async putPageClassificationLevelRaw(requestParameters: PutPageClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putPageClassificationLevel().'
            );
        }

        if (requestParameters['putSpaceDefaultClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'putSpaceDefaultClassificationLevelRequest',
                'Required parameter "putSpaceDefaultClassificationLevelRequest" was null or undefined when calling putPageClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['putSpaceDefaultClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the page.
     * Update page classification level
     */
    async putPageClassificationLevel(requestParameters: PutPageClassificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putPageClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Update the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/)  for a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and \'Admin\' permission for the space.
     * Update space default classification level
     */
    async putSpaceDefaultClassificationLevelRaw(requestParameters: PutSpaceDefaultClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putSpaceDefaultClassificationLevel().'
            );
        }

        if (requestParameters['putSpaceDefaultClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'putSpaceDefaultClassificationLevelRequest',
                'Required parameter "putSpaceDefaultClassificationLevelRequest" was null or undefined when calling putSpaceDefaultClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:space:confluence", "write:space:confluence"]);
        }

        const response = await this.request({
            path: `/spaces/{id}/classification-level/default`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['putSpaceDefaultClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/)  for a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and \'Admin\' permission for the space.
     * Update space default classification level
     */
    async putSpaceDefaultClassificationLevel(requestParameters: PutSpaceDefaultClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putSpaceDefaultClassificationLevelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the whiteboard.
     * Update whiteboard classification level
     */
    async putWhiteboardClassificationLevelRaw(requestParameters: PutWhiteboardClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putWhiteboardClassificationLevel().'
            );
        }

        if (requestParameters['putWhiteboardClassificationLevelRequest'] == null) {
            throw new runtime.RequiredError(
                'putWhiteboardClassificationLevelRequest',
                'Required parameter "putWhiteboardClassificationLevelRequest" was null or undefined when calling putWhiteboardClassificationLevel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:whiteboard:confluence"]);
        }

        const response = await this.request({
            path: `/whiteboards/{id}/classification-level`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['putWhiteboardClassificationLevelRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) for a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Permission to access the Confluence site (\'Can use\' global permission) and permission to edit the whiteboard.
     * Update whiteboard classification level
     */
    async putWhiteboardClassificationLevel(requestParameters: PutWhiteboardClassificationLevelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putWhiteboardClassificationLevelRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetBlogPostClassificationLevelStatusEnum = {
    Current: 'current',
    Draft: 'draft',
    Archived: 'archived'
} as const;
export type GetBlogPostClassificationLevelStatusEnum = typeof GetBlogPostClassificationLevelStatusEnum[keyof typeof GetBlogPostClassificationLevelStatusEnum];
/**
 * @export
 */
export const GetPageClassificationLevelStatusEnum = {
    Current: 'current',
    Draft: 'draft',
    Archived: 'archived'
} as const;
export type GetPageClassificationLevelStatusEnum = typeof GetPageClassificationLevelStatusEnum[keyof typeof GetPageClassificationLevelStatusEnum];
