/* tslint:disable */
/* eslint-disable */
/**
 * Service Management Public REST API
 * Public REST API for Jira Service Management
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-b3300bcdd36d8c214940b3035162ea6fa1d58aa8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApprovalDTO,
  ApprovalDecisionRequestDTO,
  AttachmentCreateDTO,
  AttachmentCreateResultDTO,
  CSATFeedbackFullDTO,
  CommentCreateDTO,
  CommentDTO,
  CustomerRequestDTO,
  CustomerTransitionExecutionDTO,
  ErrorResponse,
  PagedDTOApprovalDTO,
  PagedDTOAttachmentDTO,
  PagedDTOCommentDTO,
  PagedDTOCustomerRequestDTO,
  PagedDTOCustomerRequestStatusDTO,
  PagedDTOCustomerTransitionDTO,
  PagedDTOSlaInformationDTO,
  PagedDTOUserDTO,
  RequestCreateDTO,
  RequestNotificationSubscriptionDTO,
  RequestParticipantUpdateDTO,
  SlaInformationDTO,
} from '../models/index';

export interface AddRequestParticipantsRequest {
    issueIdOrKey: string;
    requestParticipantUpdateDTO: RequestParticipantUpdateDTO;
}

export interface AnswerApprovalRequest {
    issueIdOrKey: string;
    approvalId: number;
    approvalDecisionRequestDTO: ApprovalDecisionRequestDTO;
}

export interface CreateCommentWithAttachmentRequest {
    issueIdOrKey: string;
    attachmentCreateDTO: AttachmentCreateDTO;
}

export interface CreateCustomerRequestRequest {
    requestCreateDTO: RequestCreateDTO;
}

export interface CreateRequestCommentRequest {
    issueIdOrKey: string;
    commentCreateDTO: CommentCreateDTO;
}

export interface DeleteFeedbackRequest {
    requestIdOrKey: string;
}

export interface GetApprovalByIdRequest {
    issueIdOrKey: string;
    approvalId: number;
}

export interface GetApprovalsRequest {
    issueIdOrKey: string;
    start?: number;
    limit?: number;
}

export interface GetAttachmentContentRequest {
    issueIdOrKey: string;
    attachmentId: number;
}

export interface GetAttachmentThumbnailRequest {
    issueIdOrKey: string;
    attachmentId: number;
}

export interface GetAttachmentsForRequestRequest {
    issueIdOrKey: string;
    start: number;
    limit: number;
}

export interface GetCommentAttachmentsRequest {
    issueIdOrKey: string;
    commentId: number;
    start?: number;
    limit?: number;
}

export interface GetCustomerRequestByIdOrKeyRequest {
    issueIdOrKey: string;
    expand?: Array<string>;
}

export interface GetCustomerRequestStatusRequest {
    issueIdOrKey: string;
    start?: number;
    limit?: number;
}

export interface GetCustomerRequestsRequest {
    searchTerm?: string;
    requestOwnership?: Array<string>;
    requestStatus?: string;
    approvalStatus?: string;
    organizationId?: number;
    serviceDeskId?: number;
    requestTypeId?: number;
    expand?: Array<string>;
    start?: number;
    limit?: number;
}

export interface GetCustomerTransitionsRequest {
    issueIdOrKey: string;
    start?: number;
    limit?: number;
}

export interface GetFeedbackRequest {
    requestIdOrKey: string;
}

export interface GetRequestCommentByIdRequest {
    issueIdOrKey: string;
    commentId: number;
    expand?: Array<string>;
}

export interface GetRequestCommentsRequest {
    issueIdOrKey: string;
    public?: boolean;
    internal?: boolean;
    expand?: Array<string>;
    start?: number;
    limit?: number;
}

export interface GetRequestParticipantsRequest {
    issueIdOrKey: string;
    start?: number;
    limit?: number;
}

export interface GetSlaInformationRequest {
    issueIdOrKey: string;
    start?: number;
    limit?: number;
}

export interface GetSlaInformationByIdRequest {
    issueIdOrKey: string;
    slaMetricId: number;
}

export interface GetSubscriptionStatusRequest {
    issueIdOrKey: string;
}

export interface PerformCustomerTransitionRequest {
    issueIdOrKey: string;
    customerTransitionExecutionDTO: CustomerTransitionExecutionDTO;
}

export interface PostFeedbackRequest {
    requestIdOrKey: string;
    cSATFeedbackFullDTO: CSATFeedbackFullDTO;
}

export interface RemoveRequestParticipantsRequest {
    issueIdOrKey: string;
    requestParticipantUpdateDTO: RequestParticipantUpdateDTO;
}

export interface SubscribeRequest {
    issueIdOrKey: string;
}

export interface UnsubscribeRequest {
    issueIdOrKey: string;
}

/**
 * 
 */
export class RequestApi extends runtime.BaseAPI {

    /**
     * This method adds participants to a customer request.  **[Permissions](#permissions) required**: Permission to manage participants on the customer request.  Note, participants can be added when creating a customer request using the [request](#api-request-post) resource, by defining the participants in the `requestParticipants` field.
     * Add request participants
     */
    async addRequestParticipantsRaw(requestParameters: AddRequestParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOUserDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling addRequestParticipants().'
            );
        }

        if (requestParameters['requestParticipantUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'requestParticipantUpdateDTO',
                'Required parameter "requestParticipantUpdateDTO" was null or undefined when calling addRequestParticipants().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/participant`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestParticipantUpdateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method adds participants to a customer request.  **[Permissions](#permissions) required**: Permission to manage participants on the customer request.  Note, participants can be added when creating a customer request using the [request](#api-request-post) resource, by defining the participants in the `requestParticipants` field.
     * Add request participants
     */
    async addRequestParticipants(requestParameters: AddRequestParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOUserDTO> {
        const response = await this.addRequestParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method enables a user to **Approve** or **Decline** an approval on a customer request. The approval is assumed to be owned by the user making the call.  **[Permissions](#permissions) required**: User is assigned to the approval request.
     * Answer approval
     */
    async answerApprovalRaw(requestParameters: AnswerApprovalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApprovalDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling answerApproval().'
            );
        }

        if (requestParameters['approvalId'] == null) {
            throw new runtime.RequiredError(
                'approvalId',
                'Required parameter "approvalId" was null or undefined when calling answerApproval().'
            );
        }

        if (requestParameters['approvalDecisionRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'approvalDecisionRequestDTO',
                'Required parameter "approvalDecisionRequestDTO" was null or undefined when calling answerApproval().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/approval/{approvalId}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"approvalId"}}`, encodeURIComponent(String(requestParameters['approvalId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['approvalDecisionRequestDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method enables a user to **Approve** or **Decline** an approval on a customer request. The approval is assumed to be owned by the user making the call.  **[Permissions](#permissions) required**: User is assigned to the approval request.
     * Answer approval
     */
    async answerApproval(requestParameters: AnswerApprovalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApprovalDTO> {
        const response = await this.answerApprovalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method creates a comment on a customer request using one or more attachment files (uploaded using [servicedeskapi/servicedesk/\\{serviceDeskId\\}/attachTemporaryFile](https://developer.atlassian.com/cloud/jira/service-desk/rest/api-group-servicedesk/#api-rest-servicedeskapi-servicedesk-servicedeskid-attachtemporaryfile-post)), with the visibility set by `public`. See   *  GET [servicedeskapi/request/\\{issueIdOrKey\\}/attachment](./#api-rest-servicedeskapi-request-issueidorkey-attachment-get)  *  GET [servicedeskapi/request/\\{issueIdOrKey\\}/comment/\\{commentId\\}/attachment](./#api-rest-servicedeskapi-request-issueidorkey-comment-commentid-attachment-get)  **[Permissions](#permissions) required**: Permission to add an attachment.  **Request limitations**: Customers can set public visibility only.
     * Create comment with attachment
     */
    async createCommentWithAttachmentRaw(requestParameters: CreateCommentWithAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttachmentCreateResultDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling createCommentWithAttachment().'
            );
        }

        if (requestParameters['attachmentCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'attachmentCreateDTO',
                'Required parameter "attachmentCreateDTO" was null or undefined when calling createCommentWithAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/attachment`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['attachmentCreateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method creates a comment on a customer request using one or more attachment files (uploaded using [servicedeskapi/servicedesk/\\{serviceDeskId\\}/attachTemporaryFile](https://developer.atlassian.com/cloud/jira/service-desk/rest/api-group-servicedesk/#api-rest-servicedeskapi-servicedesk-servicedeskid-attachtemporaryfile-post)), with the visibility set by `public`. See   *  GET [servicedeskapi/request/\\{issueIdOrKey\\}/attachment](./#api-rest-servicedeskapi-request-issueidorkey-attachment-get)  *  GET [servicedeskapi/request/\\{issueIdOrKey\\}/comment/\\{commentId\\}/attachment](./#api-rest-servicedeskapi-request-issueidorkey-comment-commentid-attachment-get)  **[Permissions](#permissions) required**: Permission to add an attachment.  **Request limitations**: Customers can set public visibility only.
     * Create comment with attachment
     */
    async createCommentWithAttachment(requestParameters: CreateCommentWithAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttachmentCreateResultDTO> {
        const response = await this.createCommentWithAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method creates a customer request in a service desk.  The JSON request must include the service desk and customer request type, as well as any fields that are required for the request type. A list of the fields required by a customer request type can be obtained using [servicedesk/\\{serviceDeskId\\}/requesttype/\\{requestTypeId\\}/field](#api-servicedesk-serviceDeskId-requesttype-requestTypeId-field-get).  The fields required for a customer request type depend on the user\'s permissions:   *  `raiseOnBehalfOf` is not available to Users who have the customer permission only.  *  `requestParticipants` is not available to Users who have the customer permission only or if the feature is turned off for customers.  `requestFieldValues` is a map of Jira field IDs and their values. See [Field input formats](#fieldformats), for details of each field\'s JSON semantics and the values they can take.  **[Permissions](#permissions) required**: Permission to create requests in the specified service desk.
     * Create customer request
     */
    async createCustomerRequestRaw(requestParameters: CreateCustomerRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerRequestDTO>> {
        if (requestParameters['requestCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'requestCreateDTO',
                'Required parameter "requestCreateDTO" was null or undefined when calling createCustomerRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestCreateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method creates a customer request in a service desk.  The JSON request must include the service desk and customer request type, as well as any fields that are required for the request type. A list of the fields required by a customer request type can be obtained using [servicedesk/\\{serviceDeskId\\}/requesttype/\\{requestTypeId\\}/field](#api-servicedesk-serviceDeskId-requesttype-requestTypeId-field-get).  The fields required for a customer request type depend on the user\'s permissions:   *  `raiseOnBehalfOf` is not available to Users who have the customer permission only.  *  `requestParticipants` is not available to Users who have the customer permission only or if the feature is turned off for customers.  `requestFieldValues` is a map of Jira field IDs and their values. See [Field input formats](#fieldformats), for details of each field\'s JSON semantics and the values they can take.  **[Permissions](#permissions) required**: Permission to create requests in the specified service desk.
     * Create customer request
     */
    async createCustomerRequest(requestParameters: CreateCustomerRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerRequestDTO> {
        const response = await this.createCustomerRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method creates a public or private (internal) comment on a customer request, with the comment visibility set by `public`. The user recorded as the author of the comment.  **[Permissions](#permissions) required**: User has Add Comments permission.  **Request limitations**: Customers can set comments to public visibility only.
     * Create request comment
     */
    async createRequestCommentRaw(requestParameters: CreateRequestCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling createRequestComment().'
            );
        }

        if (requestParameters['commentCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'commentCreateDTO',
                'Required parameter "commentCreateDTO" was null or undefined when calling createRequestComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/comment`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['commentCreateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method creates a public or private (internal) comment on a customer request, with the comment visibility set by `public`. The user recorded as the author of the comment.  **[Permissions](#permissions) required**: User has Add Comments permission.  **Request limitations**: Customers can set comments to public visibility only.
     * Create request comment
     */
    async createRequestComment(requestParameters: CreateRequestCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentDTO> {
        const response = await this.createRequestCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method deletes the feedback of request using it\'s `requestKey` or `requestId`  **[Permissions](#permissions) required**: User must be the reporter or an Atlassian Connect app.
     * Delete feedback
     */
    async deleteFeedbackRaw(requestParameters: DeleteFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'requestIdOrKey',
                'Required parameter "requestIdOrKey" was null or undefined when calling deleteFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{requestIdOrKey}/feedback`.replace(`{${"requestIdOrKey"}}`, encodeURIComponent(String(requestParameters['requestIdOrKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This method deletes the feedback of request using it\'s `requestKey` or `requestId`  **[Permissions](#permissions) required**: User must be the reporter or an Atlassian Connect app.
     * Delete feedback
     */
    async deleteFeedback(requestParameters: DeleteFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns an approval. Use this method to determine the status of an approval and the list of approvers.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get approval by id
     */
    async getApprovalByIdRaw(requestParameters: GetApprovalByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApprovalDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getApprovalById().'
            );
        }

        if (requestParameters['approvalId'] == null) {
            throw new runtime.RequiredError(
                'approvalId',
                'Required parameter "approvalId" was null or undefined when calling getApprovalById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/approval/{approvalId}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"approvalId"}}`, encodeURIComponent(String(requestParameters['approvalId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns an approval. Use this method to determine the status of an approval and the list of approvers.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get approval by id
     */
    async getApprovalById(requestParameters: GetApprovalByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApprovalDTO> {
        const response = await this.getApprovalByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all approvals on a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get approvals
     */
    async getApprovalsRaw(requestParameters: GetApprovalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOApprovalDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getApprovals().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/approval`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all approvals on a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get approvals
     */
    async getApprovals(requestParameters: GetApprovalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOApprovalDTO> {
        const response = await this.getApprovalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the contents of an attachment.  To return a thumbnail of the attachment, use [servicedeskapi/request/\\{issueIdOrKey\\}/attachment/\\{attachmentId\\}/thumbnail](./#api-rest-servicedeskapi-request-issueidorkey-attachment-attachmentid-thumbnail-get).  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Get attachment content
     */
    async getAttachmentContentRaw(requestParameters: GetAttachmentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getAttachmentContent().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling getAttachmentContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/attachment/{attachmentId}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters['attachmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns the contents of an attachment.  To return a thumbnail of the attachment, use [servicedeskapi/request/\\{issueIdOrKey\\}/attachment/\\{attachmentId\\}/thumbnail](./#api-rest-servicedeskapi-request-issueidorkey-attachment-attachmentid-thumbnail-get).  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Get attachment content
     */
    async getAttachmentContent(requestParameters: GetAttachmentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAttachmentContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the thumbnail of an attachment.  To return the attachment contents, use [servicedeskapi/request/\\{issueIdOrKey\\}/attachment/\\{attachmentId\\}](#api-rest-servicedeskapi-request-issueidorkey-attachment-attachmentid-get).  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Get attachment thumbnail
     */
    async getAttachmentThumbnailRaw(requestParameters: GetAttachmentThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getAttachmentThumbnail().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling getAttachmentThumbnail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/attachment/{attachmentId}/thumbnail`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters['attachmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns the thumbnail of an attachment.  To return the attachment contents, use [servicedeskapi/request/\\{issueIdOrKey\\}/attachment/\\{attachmentId\\}](#api-rest-servicedeskapi-request-issueidorkey-attachment-attachmentid-get).  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Get attachment thumbnail
     */
    async getAttachmentThumbnail(requestParameters: GetAttachmentThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAttachmentThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all the attachments for a customer requests.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers will only get a list of public attachments.
     * Get attachments for request
     */
    async getAttachmentsForRequestRaw(requestParameters: GetAttachmentsForRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOAttachmentDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getAttachmentsForRequest().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getAttachmentsForRequest().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getAttachmentsForRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/attachment`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all the attachments for a customer requests.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers will only get a list of public attachments.
     * Get attachments for request
     */
    async getAttachmentsForRequest(requestParameters: GetAttachmentsForRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOAttachmentDTO> {
        const response = await this.getAttachmentsForRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the attachments referenced in a comment.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers can only view public comments, and retrieve their attachments, on requests where they are the reporter or a participant whereas agents can see both internal and public comments.
     * Get comment attachments
     */
    async getCommentAttachmentsRaw(requestParameters: GetCommentAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOAttachmentDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getCommentAttachments().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling getCommentAttachments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:request.attachment:jira-service-management", "read:request.comment:jira-service-management"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/comment/{commentId}/attachment`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns the attachments referenced in a comment.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers can only view public comments, and retrieve their attachments, on requests where they are the reporter or a participant whereas agents can see both internal and public comments.
     * Get comment attachments
     */
    async getCommentAttachments(requestParameters: GetCommentAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOAttachmentDTO> {
        const response = await this.getCommentAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a customer request.  **[Permissions](#permissions) required**: Permission to access the specified service desk.  **Response limitations**: For customers, only a request they created, was created on their behalf, or they are participating in will be returned.  **Note:** `requestFieldValues` does not include hidden fields. To get a list of request type fields that includes hidden fields, see [/rest/servicedeskapi/servicedesk/\\{serviceDeskId\\}/requesttype/\\{requestTypeId\\}/field](https://developer.atlassian.com/cloud/jira/service-desk/rest/api-group-servicedesk/#api-rest-servicedeskapi-servicedesk-servicedeskid-requesttype-requesttypeid-field-get)
     * Get customer request by id or key
     */
    async getCustomerRequestByIdOrKeyRaw(requestParameters: GetCustomerRequestByIdOrKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerRequestDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getCustomerRequestByIdOrKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a customer request.  **[Permissions](#permissions) required**: Permission to access the specified service desk.  **Response limitations**: For customers, only a request they created, was created on their behalf, or they are participating in will be returned.  **Note:** `requestFieldValues` does not include hidden fields. To get a list of request type fields that includes hidden fields, see [/rest/servicedeskapi/servicedesk/\\{serviceDeskId\\}/requesttype/\\{requestTypeId\\}/field](https://developer.atlassian.com/cloud/jira/service-desk/rest/api-group-servicedesk/#api-rest-servicedeskapi-servicedesk-servicedeskid-requesttype-requesttypeid-field-get)
     * Get customer request by id or key
     */
    async getCustomerRequestByIdOrKey(requestParameters: GetCustomerRequestByIdOrKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerRequestDTO> {
        const response = await this.getCustomerRequestByIdOrKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of all the statuses a customer Request has achieved. A status represents the state of an issue in its workflow. An issue can have one active status only. The list returns the status history in chronological order, most recent (current) status first.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get customer request status
     */
    async getCustomerRequestStatusRaw(requestParameters: GetCustomerRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOCustomerRequestStatusDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getCustomerRequestStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/status`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a list of all the statuses a customer Request has achieved. A status represents the state of an issue in its workflow. An issue can have one active status only. The list returns the status history in chronological order, most recent (current) status first.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get customer request status
     */
    async getCustomerRequestStatus(requestParameters: GetCustomerRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOCustomerRequestStatusDTO> {
        const response = await this.getCustomerRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all customer requests for the user executing the query.  The returned customer requests are ordered chronologically by the latest activity on each request. For example, the latest status transition or comment.  **[Permissions](#permissions) required**: Permission to access the specified service desk.  **Response limitations**: For customers, the list returned will include request they created (or were created on their behalf) or are participating in only.
     * Get customer requests
     */
    async getCustomerRequestsRaw(requestParameters: GetCustomerRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOCustomerRequestDTO>> {
        const queryParameters: any = {};

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['requestOwnership'] != null) {
            queryParameters['requestOwnership'] = requestParameters['requestOwnership'];
        }

        if (requestParameters['requestStatus'] != null) {
            queryParameters['requestStatus'] = requestParameters['requestStatus'];
        }

        if (requestParameters['approvalStatus'] != null) {
            queryParameters['approvalStatus'] = requestParameters['approvalStatus'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['serviceDeskId'] != null) {
            queryParameters['serviceDeskId'] = requestParameters['serviceDeskId'];
        }

        if (requestParameters['requestTypeId'] != null) {
            queryParameters['requestTypeId'] = requestParameters['requestTypeId'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all customer requests for the user executing the query.  The returned customer requests are ordered chronologically by the latest activity on each request. For example, the latest status transition or comment.  **[Permissions](#permissions) required**: Permission to access the specified service desk.  **Response limitations**: For customers, the list returned will include request they created (or were created on their behalf) or are participating in only.
     * Get customer requests
     */
    async getCustomerRequests(requestParameters: GetCustomerRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOCustomerRequestDTO> {
        const response = await this.getCustomerRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of transitions, the workflow processes that moves a customer request from one status to another, that the user can perform on a request. Use this method to provide a user with a list if the actions they can take on a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get customer transitions
     */
    async getCustomerTransitionsRaw(requestParameters: GetCustomerTransitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOCustomerTransitionDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getCustomerTransitions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/transition`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a list of transitions, the workflow processes that moves a customer request from one status to another, that the user can perform on a request. Use this method to provide a user with a list if the actions they can take on a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get customer transitions
     */
    async getCustomerTransitions(requestParameters: GetCustomerTransitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOCustomerTransitionDTO> {
        const response = await this.getCustomerTransitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method retrieves a feedback of a request using it\'s `requestKey` or `requestId`  **[Permissions](#permissions) required**: User has view request permissions.
     * Get feedback
     */
    async getFeedbackRaw(requestParameters: GetFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CSATFeedbackFullDTO>> {
        if (requestParameters['requestIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'requestIdOrKey',
                'Required parameter "requestIdOrKey" was null or undefined when calling getFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{requestIdOrKey}/feedback`.replace(`{${"requestIdOrKey"}}`, encodeURIComponent(String(requestParameters['requestIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method retrieves a feedback of a request using it\'s `requestKey` or `requestId`  **[Permissions](#permissions) required**: User has view request permissions.
     * Get feedback
     */
    async getFeedback(requestParameters: GetFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CSATFeedbackFullDTO> {
        const response = await this.getFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns details of a customer request\'s comment.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers can only view public comments on requests where they are the reporter or a participant whereas agents can see both internal and public comments.
     * Get request comment by id
     */
    async getRequestCommentByIdRaw(requestParameters: GetRequestCommentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getRequestCommentById().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling getRequestCommentById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/comment/{commentId}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns details of a customer request\'s comment.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers can only view public comments on requests where they are the reporter or a participant whereas agents can see both internal and public comments.
     * Get request comment by id
     */
    async getRequestCommentById(requestParameters: GetRequestCommentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentDTO> {
        const response = await this.getRequestCommentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all comments on a customer request. No permissions error is provided if, for example, the user doesn\'t have access to the service desk or request, the method simply returns an empty response.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers are returned public comments only.
     * Get request comments
     */
    async getRequestCommentsRaw(requestParameters: GetRequestCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOCommentDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getRequestComments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['_public'] != null) {
            queryParameters['public'] = requestParameters['_public'];
        }

        if (requestParameters['internal'] != null) {
            queryParameters['internal'] = requestParameters['internal'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/comment`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all comments on a customer request. No permissions error is provided if, for example, the user doesn\'t have access to the service desk or request, the method simply returns an empty response.  **[Permissions](#permissions) required**: Permission to view the customer request.  **Response limitations**: Customers are returned public comments only.
     * Get request comments
     */
    async getRequestComments(requestParameters: GetRequestCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOCommentDTO> {
        const response = await this.getRequestCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of all the participants on a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get request participants
     */
    async getRequestParticipantsRaw(requestParameters: GetRequestParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOUserDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getRequestParticipants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/participant`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a list of all the participants on a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get request participants
     */
    async getRequestParticipants(requestParameters: GetRequestParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOUserDTO> {
        const response = await this.getRequestParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all the SLA records on a customer request. A customer request can have zero or more SLAs. Each SLA can have recordings for zero or more \"completed cycles\" and zero or 1 \"ongoing cycle\". Each cycle includes information on when it started and stopped, and whether it breached the SLA goal.  **[Permissions](#permissions) required**: Agent for the Service Desk containing the queried customer request.
     * Get sla information
     */
    async getSlaInformationRaw(requestParameters: GetSlaInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOSlaInformationDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getSlaInformation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/sla`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all the SLA records on a customer request. A customer request can have zero or more SLAs. Each SLA can have recordings for zero or more \"completed cycles\" and zero or 1 \"ongoing cycle\". Each cycle includes information on when it started and stopped, and whether it breached the SLA goal.  **[Permissions](#permissions) required**: Agent for the Service Desk containing the queried customer request.
     * Get sla information
     */
    async getSlaInformation(requestParameters: GetSlaInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOSlaInformationDTO> {
        const response = await this.getSlaInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the details for an SLA on a customer request.  **[Permissions](#permissions) required**: Agent for the Service Desk containing the queried customer request.
     * Get sla information by id
     */
    async getSlaInformationByIdRaw(requestParameters: GetSlaInformationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SlaInformationDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getSlaInformationById().'
            );
        }

        if (requestParameters['slaMetricId'] == null) {
            throw new runtime.RequiredError(
                'slaMetricId',
                'Required parameter "slaMetricId" was null or undefined when calling getSlaInformationById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/sla/{slaMetricId}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"slaMetricId"}}`, encodeURIComponent(String(requestParameters['slaMetricId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns the details for an SLA on a customer request.  **[Permissions](#permissions) required**: Agent for the Service Desk containing the queried customer request.
     * Get sla information by id
     */
    async getSlaInformationById(requestParameters: GetSlaInformationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SlaInformationDTO> {
        const response = await this.getSlaInformationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the notification subscription status of the user making the request. Use this method to determine if the user is subscribed to a customer request\'s notifications.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get subscription status
     */
    async getSubscriptionStatusRaw(requestParameters: GetSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestNotificationSubscriptionDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getSubscriptionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/notification`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns the notification subscription status of the user making the request. Use this method to determine if the user is subscribed to a customer request\'s notifications.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Get subscription status
     */
    async getSubscriptionStatus(requestParameters: GetSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestNotificationSubscriptionDTO> {
        const response = await this.getSubscriptionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method performs a customer transition for a given request and transition. An optional comment can be included to provide a reason for the transition.  **[Permissions](#permissions) required**: The user must be able to view the request and have the Transition Issues permission. If a comment is passed the user must have the Add Comments permission.
     * Perform customer transition
     */
    async performCustomerTransitionRaw(requestParameters: PerformCustomerTransitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling performCustomerTransition().'
            );
        }

        if (requestParameters['customerTransitionExecutionDTO'] == null) {
            throw new runtime.RequiredError(
                'customerTransitionExecutionDTO',
                'Required parameter "customerTransitionExecutionDTO" was null or undefined when calling performCustomerTransition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/transition`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['customerTransitionExecutionDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method performs a customer transition for a given request and transition. An optional comment can be included to provide a reason for the transition.  **[Permissions](#permissions) required**: The user must be able to view the request and have the Transition Issues permission. If a comment is passed the user must have the Add Comments permission.
     * Perform customer transition
     */
    async performCustomerTransition(requestParameters: PerformCustomerTransitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.performCustomerTransitionRaw(requestParameters, initOverrides);
    }

    /**
     * This method adds a feedback on an request using it\'s `requestKey` or `requestId`  **[Permissions](#permissions) required**: User must be the reporter or an Atlassian Connect app.
     * Post feedback
     */
    async postFeedbackRaw(requestParameters: PostFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CSATFeedbackFullDTO>> {
        if (requestParameters['requestIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'requestIdOrKey',
                'Required parameter "requestIdOrKey" was null or undefined when calling postFeedback().'
            );
        }

        if (requestParameters['cSATFeedbackFullDTO'] == null) {
            throw new runtime.RequiredError(
                'cSATFeedbackFullDTO',
                'Required parameter "cSATFeedbackFullDTO" was null or undefined when calling postFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{requestIdOrKey}/feedback`.replace(`{${"requestIdOrKey"}}`, encodeURIComponent(String(requestParameters['requestIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['cSATFeedbackFullDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method adds a feedback on an request using it\'s `requestKey` or `requestId`  **[Permissions](#permissions) required**: User must be the reporter or an Atlassian Connect app.
     * Post feedback
     */
    async postFeedback(requestParameters: PostFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CSATFeedbackFullDTO> {
        const response = await this.postFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method removes participants from a customer request.  **[Permissions](#permissions) required**: Permission to manage participants on the customer request.
     * Remove request participants
     */
    async removeRequestParticipantsRaw(requestParameters: RemoveRequestParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOUserDTO>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling removeRequestParticipants().'
            );
        }

        if (requestParameters['requestParticipantUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'requestParticipantUpdateDTO',
                'Required parameter "requestParticipantUpdateDTO" was null or undefined when calling removeRequestParticipants().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/participant`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestParticipantUpdateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method removes participants from a customer request.  **[Permissions](#permissions) required**: Permission to manage participants on the customer request.
     * Remove request participants
     */
    async removeRequestParticipants(requestParameters: RemoveRequestParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOUserDTO> {
        const response = await this.removeRequestParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method subscribes the user to receiving notifications from a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Subscribe
     */
    async subscribeRaw(requestParameters: SubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling subscribe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/notification`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method subscribes the user to receiving notifications from a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Subscribe
     */
    async subscribe(requestParameters: SubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribeRaw(requestParameters, initOverrides);
    }

    /**
     * This method unsubscribes the user from notifications from a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Unsubscribe
     */
    async unsubscribeRaw(requestParameters: UnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling unsubscribe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/request/{issueIdOrKey}/notification`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method unsubscribes the user from notifications from a customer request.  **[Permissions](#permissions) required**: Permission to view the customer request.
     * Unsubscribe
     */
    async unsubscribe(requestParameters: UnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unsubscribeRaw(requestParameters, initOverrides);
    }

}
