/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvailableDashboardGadgetsResponse,
  Dashboard,
  DashboardDetails,
  DashboardGadget,
  DashboardGadgetResponse,
  DashboardGadgetSettings,
  DashboardGadgetUpdateRequest,
  EntityProperty,
  ErrorCollection,
  PageBeanDashboard,
  PageOfDashboards,
  PropertyKeys,
} from '../models';

export interface AddGadgetRequest {
    dashboardId: number;
    dashboardGadgetSettings: DashboardGadgetSettings;
}

export interface CopyDashboardRequest {
    id: string;
    dashboardDetails: DashboardDetails;
}

export interface CreateDashboardRequest {
    dashboardDetails: DashboardDetails;
}

export interface DeleteDashboardRequest {
    id: string;
}

export interface DeleteDashboardItemPropertyRequest {
    dashboardId: string;
    itemId: string;
    propertyKey: string;
}

export interface GetAllDashboardsRequest {
    filter?: GetAllDashboardsFilterEnum;
    startAt?: number;
    maxResults?: number;
}

export interface GetAllGadgetsRequest {
    dashboardId: number;
    moduleKey?: Array<string>;
    uri?: Array<string>;
    gadgetId?: Array<number>;
}

export interface GetDashboardRequest {
    id: string;
}

export interface GetDashboardItemPropertyRequest {
    dashboardId: string;
    itemId: string;
    propertyKey: string;
}

export interface GetDashboardItemPropertyKeysRequest {
    dashboardId: string;
    itemId: string;
}

export interface GetDashboardsPaginatedRequest {
    dashboardName?: string;
    accountId?: string;
    owner?: string;
    groupname?: string;
    groupId?: string;
    projectId?: number;
    orderBy?: GetDashboardsPaginatedOrderByEnum;
    startAt?: number;
    maxResults?: number;
    status?: GetDashboardsPaginatedStatusEnum;
    expand?: string;
}

export interface RemoveGadgetRequest {
    dashboardId: number;
    gadgetId: number;
}

export interface SetDashboardItemPropertyRequest {
    dashboardId: string;
    itemId: string;
    propertyKey: string;
    body: any | null;
}

export interface UpdateDashboardRequest {
    id: string;
    dashboardDetails: DashboardDetails;
}

export interface UpdateGadgetRequest {
    dashboardId: number;
    gadgetId: number;
    dashboardGadgetUpdateRequest: DashboardGadgetUpdateRequest;
}

/**
 * 
 */
export class DashboardsApi extends runtime.BaseAPI {

    /**
     * Adds a gadget to a dashboard.  **[Permissions](#permissions) required:** None.
     * Add gadget to dashboard
     */
    async addGadgetRaw(requestParameters: AddGadgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardGadget>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling addGadget.');
        }

        if (requestParameters.dashboardGadgetSettings === null || requestParameters.dashboardGadgetSettings === undefined) {
            throw new runtime.RequiredError('dashboardGadgetSettings','Required parameter requestParameters.dashboardGadgetSettings was null or undefined when calling addGadget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work", "read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/gadget`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dashboardGadgetSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a gadget to a dashboard.  **[Permissions](#permissions) required:** None.
     * Add gadget to dashboard
     */
    async addGadget(requestParameters: AddGadgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardGadget> {
        const response = await this.addGadgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be copied must be owned by or shared with the user.
     * Copy dashboard
     */
    async copyDashboardRaw(requestParameters: CopyDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling copyDashboard.');
        }

        if (requestParameters.dashboardDetails === null || requestParameters.dashboardDetails === undefined) {
            throw new runtime.RequiredError('dashboardDetails','Required parameter requestParameters.dashboardDetails was null or undefined when calling copyDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{id}/copy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dashboardDetails,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be copied must be owned by or shared with the user.
     * Copy dashboard
     */
    async copyDashboard(requestParameters: CopyDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.copyDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a dashboard.  **[Permissions](#permissions) required:** None.
     * Create dashboard
     */
    async createDashboardRaw(requestParameters: CreateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.dashboardDetails === null || requestParameters.dashboardDetails === undefined) {
            throw new runtime.RequiredError('dashboardDetails','Required parameter requestParameters.dashboardDetails was null or undefined when calling createDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dashboardDetails,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a dashboard.  **[Permissions](#permissions) required:** None.
     * Create dashboard
     */
    async createDashboard(requestParameters: CreateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.createDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be deleted must be owned by the user.
     * Delete dashboard
     */
    async deleteDashboardRaw(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be deleted must be owned by the user.
     * Delete dashboard
     */
    async deleteDashboard(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDashboardRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * Delete dashboard item property
     */
    async deleteDashboardItemPropertyRaw(requestParameters: DeleteDashboardItemPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling deleteDashboardItemProperty.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteDashboardItemProperty.');
        }

        if (requestParameters.propertyKey === null || requestParameters.propertyKey === undefined) {
            throw new runtime.RequiredError('propertyKey','Required parameter requestParameters.propertyKey was null or undefined when calling deleteDashboardItemProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters.propertyKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * Delete dashboard item property
     */
    async deleteDashboardItemProperty(requestParameters: DeleteDashboardItemPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDashboardItemPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](#permissions) required:** None.
     * Get available gadgets
     */
    async getAllAvailableDashboardGadgetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableDashboardGadgetsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/gadgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](#permissions) required:** None.
     * Get available gadgets
     */
    async getAllAvailableDashboardGadgets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableDashboardGadgetsResponse> {
        const response = await this.getAllAvailableDashboardGadgetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * Get all dashboards
     */
    async getAllDashboardsRaw(requestParameters: GetAllDashboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfDashboards>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * Get all dashboards
     */
    async getAllDashboards(requestParameters: GetAllDashboardsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfDashboards> {
        const response = await this.getAllDashboardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when `id` is set.  *  Gadgets with a module key, when `moduleKey` is set.  *  Gadgets from a list of URIs, when `uri` is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * Get gadgets
     */
    async getAllGadgetsRaw(requestParameters: GetAllGadgetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardGadgetResponse>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getAllGadgets.');
        }

        const queryParameters: any = {};

        if (requestParameters.moduleKey) {
            queryParameters['moduleKey'] = requestParameters.moduleKey;
        }

        if (requestParameters.uri) {
            queryParameters['uri'] = requestParameters.uri;
        }

        if (requestParameters.gadgetId) {
            queryParameters['gadgetId'] = requestParameters.gadgetId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/gadget`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when `id` is set.  *  Gadgets with a module key, when `moduleKey` is set.  *  Gadgets from a list of URIs, when `uri` is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * Get gadgets
     */
    async getAllGadgets(requestParameters: GetAllGadgetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardGadgetResponse> {
        const response = await this.getAllGadgetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * Get dashboard
     */
    async getDashboardRaw(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * Get dashboard
     */
    async getDashboard(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.getDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item\'s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     * Get dashboard item property
     */
    async getDashboardItemPropertyRaw(requestParameters: GetDashboardItemPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityProperty>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getDashboardItemProperty.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getDashboardItemProperty.');
        }

        if (requestParameters.propertyKey === null || requestParameters.propertyKey === undefined) {
            throw new runtime.RequiredError('propertyKey','Required parameter requestParameters.propertyKey was null or undefined when calling getDashboardItemProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters.propertyKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item\'s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     * Get dashboard item property
     */
    async getDashboardItemProperty(requestParameters: GetDashboardItemPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityProperty> {
        const response = await this.getDashboardItemPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     * Get dashboard item property keys
     */
    async getDashboardItemPropertyKeysRaw(requestParameters: GetDashboardItemPropertyKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyKeys>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getDashboardItemPropertyKeys.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getDashboardItemPropertyKeys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     * Get dashboard item property keys
     */
    async getDashboardItemPropertyKeys(requestParameters: GetDashboardItemPropertyKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyKeys> {
        const response = await this.getDashboardItemPropertyKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.
     * Search for dashboards
     */
    async getDashboardsPaginatedRaw(requestParameters: GetDashboardsPaginatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanDashboard>> {
        const queryParameters: any = {};

        if (requestParameters.dashboardName !== undefined) {
            queryParameters['dashboardName'] = requestParameters.dashboardName;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.owner !== undefined) {
            queryParameters['owner'] = requestParameters.owner;
        }

        if (requestParameters.groupname !== undefined) {
            queryParameters['groupname'] = requestParameters.groupname;
        }

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.
     * Search for dashboards
     */
    async getDashboardsPaginated(requestParameters: GetDashboardsPaginatedRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanDashboard> {
        const response = await this.getDashboardsPaginatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](#permissions) required:** None.
     * Remove gadget from dashboard
     */
    async removeGadgetRaw(requestParameters: RemoveGadgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling removeGadget.');
        }

        if (requestParameters.gadgetId === null || requestParameters.gadgetId === undefined) {
            throw new runtime.RequiredError('gadgetId','Required parameter requestParameters.gadgetId was null or undefined when calling removeGadget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"gadgetId"}}`, encodeURIComponent(String(requestParameters.gadgetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](#permissions) required:** None.
     * Remove gadget from dashboard
     */
    async removeGadget(requestParameters: RemoveGadgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeGadgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item\'s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * Set dashboard item property
     */
    async setDashboardItemPropertyRaw(requestParameters: SetDashboardItemPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling setDashboardItemProperty.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling setDashboardItemProperty.');
        }

        if (requestParameters.propertyKey === null || requestParameters.propertyKey === undefined) {
            throw new runtime.RequiredError('propertyKey','Required parameter requestParameters.propertyKey was null or undefined when calling setDashboardItemProperty.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setDashboardItemProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters.propertyKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item\'s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * Set dashboard item property
     */
    async setDashboardItemProperty(requestParameters: SetDashboardItemPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setDashboardItemPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](#permissions) required:** None  The dashboard to be updated must be owned by the user.
     * Update dashboard
     */
    async updateDashboardRaw(requestParameters: UpdateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dashboard>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDashboard.');
        }

        if (requestParameters.dashboardDetails === null || requestParameters.dashboardDetails === undefined) {
            throw new runtime.RequiredError('dashboardDetails','Required parameter requestParameters.dashboardDetails was null or undefined when calling updateDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dashboardDetails,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](#permissions) required:** None  The dashboard to be updated must be owned by the user.
     * Update dashboard
     */
    async updateDashboard(requestParameters: UpdateDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dashboard> {
        const response = await this.updateDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](#permissions) required:** None.
     * Update gadget on dashboard
     */
    async updateGadgetRaw(requestParameters: UpdateGadgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling updateGadget.');
        }

        if (requestParameters.gadgetId === null || requestParameters.gadgetId === undefined) {
            throw new runtime.RequiredError('gadgetId','Required parameter requestParameters.gadgetId was null or undefined when calling updateGadget.');
        }

        if (requestParameters.dashboardGadgetUpdateRequest === null || requestParameters.dashboardGadgetUpdateRequest === undefined) {
            throw new runtime.RequiredError('dashboardGadgetUpdateRequest','Required parameter requestParameters.dashboardGadgetUpdateRequest was null or undefined when calling updateGadget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))).replace(`{${"gadgetId"}}`, encodeURIComponent(String(requestParameters.gadgetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dashboardGadgetUpdateRequest,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](#permissions) required:** None.
     * Update gadget on dashboard
     */
    async updateGadget(requestParameters: UpdateGadgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateGadgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllDashboardsFilterEnum = {
    My: 'my',
    Favourite: 'favourite'
} as const;
export type GetAllDashboardsFilterEnum = typeof GetAllDashboardsFilterEnum[keyof typeof GetAllDashboardsFilterEnum];
/**
 * @export
 */
export const GetDashboardsPaginatedOrderByEnum = {
    Description: 'description',
    DescriptionDescDesc: '-description',
    DescriptionAscAsc: '+description',
    FavoriteCount: 'favorite_count',
    FavoriteCountDescDesc: '-favorite_count',
    FavoriteCountAscAsc: '+favorite_count',
    Id: 'id',
    IdDescDesc: '-id',
    IdAscAsc: '+id',
    IsFavorite: 'is_favorite',
    IsFavoriteDescDesc: '-is_favorite',
    IsFavoriteAscAsc: '+is_favorite',
    Name: 'name',
    NameDescDesc: '-name',
    NameAscAsc: '+name',
    Owner: 'owner',
    OwnerDescDesc: '-owner',
    OwnerAscAsc: '+owner'
} as const;
export type GetDashboardsPaginatedOrderByEnum = typeof GetDashboardsPaginatedOrderByEnum[keyof typeof GetDashboardsPaginatedOrderByEnum];
/**
 * @export
 */
export const GetDashboardsPaginatedStatusEnum = {
    Active: 'active',
    Archived: 'archived',
    Deleted: 'deleted'
} as const;
export type GetDashboardsPaginatedStatusEnum = typeof GetDashboardsPaginatedStatusEnum[keyof typeof GetDashboardsPaginatedStatusEnum];
