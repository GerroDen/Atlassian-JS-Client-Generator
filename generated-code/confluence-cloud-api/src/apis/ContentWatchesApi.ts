/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SpaceWatchArray,
  UserWatch,
  WatchArray,
} from '../models';

export interface AddContentWatcherRequest {
    contentId: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface AddLabelWatcherRequest {
    xAtlassianToken: string;
    labelName: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface AddSpaceWatcherRequest {
    xAtlassianToken: string;
    spaceKey: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface GetContentWatchStatusRequest {
    contentId: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface GetWatchersForSpaceRequest {
    spaceKey: string;
    start?: string;
    limit?: string;
}

export interface GetWatchesForPageRequest {
    id: string;
    start?: number;
    limit?: number;
}

export interface GetWatchesForSpaceRequest {
    id: string;
    start?: number;
    limit?: number;
}

export interface IsWatchingLabelRequest {
    labelName: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface IsWatchingSpaceRequest {
    spaceKey: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface RemoveContentWatcherRequest {
    xAtlassianToken: string;
    contentId: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface RemoveLabelWatcherRequest {
    labelName: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface RemoveSpaceWatchRequest {
    spaceKey: string;
    key?: string;
    username?: string;
    accountId?: string;
}

/**
 * 
 */
export class ContentWatchesApi extends runtime.BaseAPI {

    /**
     * Adds a user as a watcher to a piece of content. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF protection.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Add content watcher
     */
    async addContentWatcherRaw(requestParameters: AddContentWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling addContentWatcher.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/content/{contentId}`.replace(`{${"contentId"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a user as a watcher to a piece of content. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF protection.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Add content watcher
     */
    async addContentWatcher(requestParameters: AddContentWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addContentWatcherRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a user as a watcher to a label. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF protection.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Add label watcher
     */
    async addLabelWatcherRaw(requestParameters: AddLabelWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.xAtlassianToken === null || requestParameters.xAtlassianToken === undefined) {
            throw new runtime.RequiredError('xAtlassianToken','Required parameter requestParameters.xAtlassianToken was null or undefined when calling addLabelWatcher.');
        }

        if (requestParameters.labelName === null || requestParameters.labelName === undefined) {
            throw new runtime.RequiredError('labelName','Required parameter requestParameters.labelName was null or undefined when calling addLabelWatcher.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAtlassianToken !== undefined && requestParameters.xAtlassianToken !== null) {
            headerParameters['X-Atlassian-Token'] = String(requestParameters.xAtlassianToken);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/label/{labelName}`.replace(`{${"labelName"}}`, encodeURIComponent(String(requestParameters.labelName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a user as a watcher to a label. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF protection.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Add label watcher
     */
    async addLabelWatcher(requestParameters: AddLabelWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addLabelWatcherRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a user as a watcher to a space. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF protection.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Add space watcher
     */
    async addSpaceWatcherRaw(requestParameters: AddSpaceWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.xAtlassianToken === null || requestParameters.xAtlassianToken === undefined) {
            throw new runtime.RequiredError('xAtlassianToken','Required parameter requestParameters.xAtlassianToken was null or undefined when calling addSpaceWatcher.');
        }

        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling addSpaceWatcher.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAtlassianToken !== undefined && requestParameters.xAtlassianToken !== null) {
            headerParameters['X-Atlassian-Token'] = String(requestParameters.xAtlassianToken);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/space/{spaceKey}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a user as a watcher to a space. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF protection.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Add space watcher
     */
    async addSpaceWatcher(requestParameters: AddSpaceWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addSpaceWatcherRaw(requestParameters, initOverrides);
    }

    /**
     * Returns whether a user is watching a piece of content. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Get content watch status
     */
    async getContentWatchStatusRaw(requestParameters: GetContentWatchStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWatch>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getContentWatchStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/content/{contentId}`.replace(`{${"contentId"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns whether a user is watching a piece of content. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Get content watch status
     */
    async getContentWatchStatus(requestParameters: GetContentWatchStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWatch> {
        const response = await this.getContentWatchStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of watchers of a space
     * Get space watchers
     */
    async getWatchersForSpaceRaw(requestParameters: GetWatchersForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceWatchArray>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling getWatchersForSpace.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:watcher:confluence", "read:user:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/watch`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of watchers of a space
     * Get space watchers
     */
    async getWatchersForSpace(requestParameters: GetWatchersForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceWatchArray> {
        const response = await this.getWatchersForSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the watches for a page. A user that watches a page will receive receive notifications when the page is updated.  If you want to manage watches for a page, use the following `user` methods:  - [Get content watch status for user](#api-user-watch-content-contentId-get) - [Add content watch](#api-user-watch-content-contentId-post) - [Remove content watch](#api-user-watch-content-contentId-delete)  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission).
     * Get watches for page
     */
    async getWatchesForPageRaw(requestParameters: GetWatchesForPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWatchesForPage.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/notification/child-created`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the watches for a page. A user that watches a page will receive receive notifications when the page is updated.  If you want to manage watches for a page, use the following `user` methods:  - [Get content watch status for user](#api-user-watch-content-contentId-get) - [Add content watch](#api-user-watch-content-contentId-post) - [Remove content watch](#api-user-watch-content-contentId-delete)  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission).
     * Get watches for page
     */
    async getWatchesForPage(requestParameters: GetWatchesForPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchArray> {
        const response = await this.getWatchesForPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all space watches for the space that the content is in. A user that watches a space will receive receive notifications when any content in the space is updated.  If you want to manage watches for a space, use the following `user` methods:  - [Get space watch status for user](#api-user-watch-space-spaceKey-get) - [Add space watch](#api-user-watch-space-spaceKey-post) - [Remove space watch](#api-user-watch-space-spaceKey-delete)  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission).
     * Get watches for space
     */
    async getWatchesForSpaceRaw(requestParameters: GetWatchesForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceWatchArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWatchesForSpace.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/notification/created`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all space watches for the space that the content is in. A user that watches a space will receive receive notifications when any content in the space is updated.  If you want to manage watches for a space, use the following `user` methods:  - [Get space watch status for user](#api-user-watch-space-spaceKey-get) - [Add space watch](#api-user-watch-space-spaceKey-post) - [Remove space watch](#api-user-watch-space-spaceKey-delete)  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission).
     * Get watches for space
     */
    async getWatchesForSpace(requestParameters: GetWatchesForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceWatchArray> {
        const response = await this.getWatchesForSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns whether a user is watching a label. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Get label watch status
     */
    async isWatchingLabelRaw(requestParameters: IsWatchingLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWatch>> {
        if (requestParameters.labelName === null || requestParameters.labelName === undefined) {
            throw new runtime.RequiredError('labelName','Required parameter requestParameters.labelName was null or undefined when calling isWatchingLabel.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/label/{labelName}`.replace(`{${"labelName"}}`, encodeURIComponent(String(requestParameters.labelName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns whether a user is watching a label. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Get label watch status
     */
    async isWatchingLabel(requestParameters: IsWatchingLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWatch> {
        const response = await this.isWatchingLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns whether a user is watching a space. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Get space watch status
     */
    async isWatchingSpaceRaw(requestParameters: IsWatchingSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWatch>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling isWatchingSpace.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/space/{spaceKey}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns whether a user is watching a space. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Get space watch status
     */
    async isWatchingSpace(requestParameters: IsWatchingSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWatch> {
        const response = await this.isWatchingSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a user as a watcher from a piece of content. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Remove content watcher
     */
    async removeContentWatcherRaw(requestParameters: RemoveContentWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.xAtlassianToken === null || requestParameters.xAtlassianToken === undefined) {
            throw new runtime.RequiredError('xAtlassianToken','Required parameter requestParameters.xAtlassianToken was null or undefined when calling removeContentWatcher.');
        }

        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling removeContentWatcher.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAtlassianToken !== undefined && requestParameters.xAtlassianToken !== null) {
            headerParameters['X-Atlassian-Token'] = String(requestParameters.xAtlassianToken);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/content/{contentId}`.replace(`{${"contentId"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user as a watcher from a piece of content. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Remove content watcher
     */
    async removeContentWatcher(requestParameters: RemoveContentWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeContentWatcherRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a user as a watcher from a label. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Remove label watcher
     */
    async removeLabelWatcherRaw(requestParameters: RemoveLabelWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.labelName === null || requestParameters.labelName === undefined) {
            throw new runtime.RequiredError('labelName','Required parameter requestParameters.labelName was null or undefined when calling removeLabelWatcher.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/label/{labelName}`.replace(`{${"labelName"}}`, encodeURIComponent(String(requestParameters.labelName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user as a watcher from a label. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Remove label watcher
     */
    async removeLabelWatcher(requestParameters: RemoveLabelWatcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeLabelWatcherRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a user as a watcher from a space. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Remove space watch
     */
    async removeSpaceWatchRaw(requestParameters: RemoveSpaceWatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling removeSpaceWatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/user/watch/space/{spaceKey}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user as a watcher from a space. Choose the user by doing one of the following:  - Specify a user via a query parameter: Use the `accountId` to identify the user. - Do not specify a user: The currently logged-in user will be used.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Confluence Administrator\' global permission if specifying a user, otherwise permission to access the Confluence site (\'Can use\' global permission).
     * Remove space watch
     */
    async removeSpaceWatch(requestParameters: RemoveSpaceWatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSpaceWatchRaw(requestParameters, initOverrides);
    }

}
