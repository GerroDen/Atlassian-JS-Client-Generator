/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AsyncId,
  AvailableContentStates,
  BulkRemoveContentStatesRequest,
  ContentArray,
  ContentState,
  ContentStateBulkSetTaskUpdate,
  ContentStateResponse,
  ContentStateRestInput,
  ContentStateSettings,
} from '../models/index';

export interface BulkRemoveContentStatesOperationRequest {
    status: BulkRemoveContentStatesOperationStatusEnum;
    bulkRemoveContentStatesRequest?: BulkRemoveContentStatesRequest;
}

export interface GetAvailableContentStatesRequest {
    id: string;
}

export interface GetContentStateRequest {
    id: string;
    status?: GetContentStateStatusEnum;
}

export interface GetContentStateSettingsRequest {
    spaceKey: string;
}

export interface GetContentsWithStateRequest {
    spaceKey: string;
    stateId: number;
    expand?: Array<string>;
    limit?: number;
    start?: number;
}

export interface GetSpaceContentStatesRequest {
    spaceKey: string;
}

export interface GetTaskUpdateRequest {
    taskId: string;
}

export interface RemoveContentStateRequest {
    id: string;
    status?: RemoveContentStateStatusEnum;
}

export interface SetContentStateRequest {
    id: string;
    contentStateRestInput: ContentStateRestInput;
    status?: SetContentStateStatusEnum;
}

/**
 * 
 */
export class ContentStatesApi extends runtime.BaseAPI {

    /**
     * Creates a long running task that Removes content state from draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state removed via this endpoint.
     * Bulk remove content states from content
     * @deprecated
     */
    async bulkRemoveContentStatesRaw(requestParameters: BulkRemoveContentStatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AsyncId>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling bulkRemoveContentStates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content-states/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['bulkRemoveContentStatesRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a long running task that Removes content state from draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state removed via this endpoint.
     * Bulk remove content states from content
     * @deprecated
     */
    async bulkRemoveContentStates(requestParameters: BulkRemoveContentStatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncId> {
        const response = await this.bulkRemoveContentStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets content states that are available for the content to be set as. Will return all enabled Space Content States. Will only return most the 3 most recently published custom content states to match UI editor list. To get all custom content states, use the /content-states endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Gets available content states for content.
     */
    async getAvailableContentStatesRaw(requestParameters: GetAvailableContentStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableContentStates>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableContentStates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/state/available`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets content states that are available for the content to be set as. Will return all enabled Space Content States. Will only return most the 3 most recently published custom content states to match UI editor list. To get all custom content states, use the /content-states endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Gets available content states for content.
     */
    async getAvailableContentStates(requestParameters: GetAvailableContentStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableContentStates> {
        const response = await this.getAvailableContentStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the current content state of the draft or current version of content. To specify the draft version, set the parameter status to draft, otherwise archived or current will get the relevant published state. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content state
     */
    async getContentStateRaw(requestParameters: GetContentStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentStateResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getContentState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/state`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the current content state of the draft or current version of content. To specify the draft version, set the parameter status to draft, otherwise archived or current will get the relevant published state. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content state
     */
    async getContentState(requestParameters: GetContentStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentStateResponse> {
        const response = await this.getContentStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get object describing whether content states are allowed at all, if custom content states or space content states are restricted, and a list of space content states allowed for the space if they are not restricted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Get content state settings for space
     */
    async getContentStateSettingsRaw(requestParameters: GetContentStateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentStateSettings>> {
        if (requestParameters['spaceKey'] == null) {
            throw new runtime.RequiredError(
                'spaceKey',
                'Required parameter "spaceKey" was null or undefined when calling getContentStateSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-space.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/state/settings`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters['spaceKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get object describing whether content states are allowed at all, if custom content states or space content states are restricted, and a list of space content states allowed for the space if they are not restricted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Get content state settings for space
     */
    async getContentStateSettings(requestParameters: GetContentStateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentStateSettings> {
        const response = await this.getContentStateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all content that has the provided content state in a space.  Starting on Dec 10, 2024, if the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get content in space with given content state
     */
    async getContentsWithStateRaw(requestParameters: GetContentsWithStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentArray>> {
        if (requestParameters['spaceKey'] == null) {
            throw new runtime.RequiredError(
                'spaceKey',
                'Required parameter "spaceKey" was null or undefined when calling getContentsWithState().'
            );
        }

        if (requestParameters['stateId'] == null) {
            throw new runtime.RequiredError(
                'stateId',
                'Required parameter "stateId" was null or undefined when calling getContentsWithState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['stateId'] != null) {
            queryParameters['state-id'] = requestParameters['stateId'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/state/content`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters['spaceKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all content that has the provided content state in a space.  Starting on Dec 10, 2024, if the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get content in space with given content state
     */
    async getContentsWithState(requestParameters: GetContentsWithStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentArray> {
        const response = await this.getContentsWithStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get custom content states that authenticated user has created.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have user authentication.
     * Get Custom Content States
     */
    async getCustomContentStatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentState>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:user.property:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content-states`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get custom content states that authenticated user has created.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have user authentication.
     * Get Custom Content States
     */
    async getCustomContentStates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentState>> {
        const response = await this.getCustomContentStatesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get content states that are suggested in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get space suggested content states
     */
    async getSpaceContentStatesRaw(requestParameters: GetSpaceContentStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentState>>> {
        if (requestParameters['spaceKey'] == null) {
            throw new runtime.RequiredError(
                'spaceKey',
                'Required parameter "spaceKey" was null or undefined when calling getSpaceContentStates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-space.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/state`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters['spaceKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get content states that are suggested in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get space suggested content states
     */
    async getSpaceContentStates(requestParameters: GetSpaceContentStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentState>> {
        const response = await this.getSpaceContentStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Status of long running task that was previously created to remove content states from content. User must first create a task by passing in details to the /wiki/rest/api/content-states DELETE endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have created long running task
     * Get update on long running task for setting of content state.
     * @deprecated
     */
    async getTaskUpdateRaw(requestParameters: GetTaskUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentStateBulkSetTaskUpdate>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getTaskUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", []);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content-states/task/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Status of long running task that was previously created to remove content states from content. User must first create a task by passing in details to the /wiki/rest/api/content-states DELETE endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have created long running task
     * Get update on long running task for setting of content state.
     * @deprecated
     */
    async getTaskUpdate(requestParameters: GetTaskUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentStateBulkSetTaskUpdate> {
        const response = await this.getTaskUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new status.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Removes the content state of a content and publishes a new version.
     */
    async removeContentStateRaw(requestParameters: RemoveContentStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentStateResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeContentState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/state`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new status.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Removes the content state of a content and publishes a new version.
     */
    async removeContentState(requestParameters: RemoveContentStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentStateResponse> {
        const response = await this.removeContentStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new state.  You may pass in either an id of a state, or the name and color of a desired new state. If all 3 are passed in, id will be used. If the name and color passed in already exist under the current user\'s existing custom states, the existing state will be reused. If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content\'s space) then this set will fail.  You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Set the content state of a content and publishes a new version of the content.
     */
    async setContentStateRaw(requestParameters: SetContentStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentStateResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setContentState().'
            );
        }

        if (requestParameters['contentStateRestInput'] == null) {
            throw new runtime.RequiredError(
                'contentStateRestInput',
                'Required parameter "contentStateRestInput" was null or undefined when calling setContentState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/state`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['contentStateRestInput'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new state.  You may pass in either an id of a state, or the name and color of a desired new state. If all 3 are passed in, id will be used. If the name and color passed in already exist under the current user\'s existing custom states, the existing state will be reused. If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content\'s space) then this set will fail.  You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Set the content state of a content and publishes a new version of the content.
     */
    async setContentState(requestParameters: SetContentStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentStateResponse> {
        const response = await this.setContentStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BulkRemoveContentStatesOperationStatusEnum = {
    Current: 'current',
    Draft: 'draft'
} as const;
export type BulkRemoveContentStatesOperationStatusEnum = typeof BulkRemoveContentStatesOperationStatusEnum[keyof typeof BulkRemoveContentStatesOperationStatusEnum];
/**
 * @export
 */
export const GetContentStateStatusEnum = {
    Current: 'current',
    Draft: 'draft',
    Archived: 'archived'
} as const;
export type GetContentStateStatusEnum = typeof GetContentStateStatusEnum[keyof typeof GetContentStateStatusEnum];
/**
 * @export
 */
export const RemoveContentStateStatusEnum = {
    Current: 'current',
    Draft: 'draft'
} as const;
export type RemoveContentStateStatusEnum = typeof RemoveContentStateStatusEnum[keyof typeof RemoveContentStateStatusEnum];
/**
 * @export
 */
export const SetContentStateStatusEnum = {
    Current: 'current',
    Draft: 'draft'
} as const;
export type SetContentStateStatusEnum = typeof SetContentStateStatusEnum[keyof typeof SetContentStateStatusEnum];
