/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllBoards200Response,
} from '../models';

export interface GetAllBoardsRequest {
    startAt?: number;
    maxResults?: number;
    type?: "scrum" | "kanban" | "simple";
    name?: string;
    projectKeyOrId?: string;
    accountIdLocation?: string;
    projectLocation?: string;
    includePrivate?: boolean;
    negateLocationFiltering?: boolean;
    orderBy?: GetAllBoardsOrderByEnum;
    expand?: string;
    filterId?: number;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Returns all boards. This only includes boards that the user has permission to view.
     * Get all boards
     */
    async getAllBoardsRaw(requestParameters: GetAllBoardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllBoards200Response>> {
        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.projectKeyOrId !== undefined) {
            queryParameters['projectKeyOrId'] = requestParameters.projectKeyOrId;
        }

        if (requestParameters.accountIdLocation !== undefined) {
            queryParameters['accountIdLocation'] = requestParameters.accountIdLocation;
        }

        if (requestParameters.projectLocation !== undefined) {
            queryParameters['projectLocation'] = requestParameters.projectLocation;
        }

        if (requestParameters.includePrivate !== undefined) {
            queryParameters['includePrivate'] = requestParameters.includePrivate;
        }

        if (requestParameters.negateLocationFiltering !== undefined) {
            queryParameters['negateLocationFiltering'] = requestParameters.negateLocationFiltering;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filterId'] = requestParameters.filterId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all boards. This only includes boards that the user has permission to view.
     * Get all boards
     */
    async getAllBoards(requestParameters: GetAllBoardsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllBoards200Response> {
        const response = await this.getAllBoardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllBoardsOrderByEnum = {
    Name: 'name',
    NameDesc: '-name',
    NameAsc: '+name'
} as const;
export type GetAllBoardsOrderByEnum = typeof GetAllBoardsOrderByEnum[keyof typeof GetAllBoardsOrderByEnum];
