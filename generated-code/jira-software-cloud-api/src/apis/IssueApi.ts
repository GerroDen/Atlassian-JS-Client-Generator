/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EstimateIssueForBoardRequest,
  MoveIssuesToBacklogForBoardRequest,
} from '../models/index';

export interface EstimateIssueForBoardOperationRequest {
    issueIdOrKey: string;
    estimateIssueForBoardRequest: EstimateIssueForBoardRequest;
    boardId?: number;
}

export interface GetIssueRequest {
    issueIdOrKey: string;
    fields?: Array<object>;
    expand?: string;
    updateHistory?: boolean;
}

export interface GetIssueEstimationForBoardRequest {
    issueIdOrKey: string;
    boardId?: number;
}

export interface RankIssuesRequest {
    moveIssuesToBacklogForBoardRequest: MoveIssuesToBacklogForBoardRequest;
}

/**
 * 
 */
export class IssueApi extends runtime.BaseAPI {

    /**
     * Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.  Note that this resource changes the estimation field of the issue regardless of appearance the field on the screen.  Original time tracking estimation field accepts estimation in formats like \"1w\", \"2d\", \"3h\", \"20m\" or number which represent number of minutes. However, internally the field stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-issueIdOrKey-editmeta-get) or [field resource](#api-rest-api-3-field-get).
     * Estimate issue for board
     */
    async estimateIssueForBoardRaw(requestParameters: EstimateIssueForBoardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling estimateIssueForBoard().'
            );
        }

        if (requestParameters['estimateIssueForBoardRequest'] == null) {
            throw new runtime.RequiredError(
                'estimateIssueForBoardRequest',
                'Required parameter "estimateIssueForBoardRequest" was null or undefined when calling estimateIssueForBoard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['boardId'] != null) {
            queryParameters['boardId'] = requestParameters['boardId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:issue:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/issue/{issueIdOrKey}/estimation`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['estimateIssueForBoardRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.  Note that this resource changes the estimation field of the issue regardless of appearance the field on the screen.  Original time tracking estimation field accepts estimation in formats like \"1w\", \"2d\", \"3h\", \"20m\" or number which represent number of minutes. However, internally the field stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-issueIdOrKey-editmeta-get) or [field resource](#api-rest-api-3-field-get).
     * Estimate issue for board
     */
    async estimateIssueForBoard(requestParameters: EstimateIssueForBoardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.estimateIssueForBoardRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a single issue, for a given issue ID or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.
     * Get issue
     */
    async getIssueRaw(requestParameters: GetIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getIssue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['updateHistory'] != null) {
            queryParameters['updateHistory'] = requestParameters['updateHistory'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:issue:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/issue/{issueIdOrKey}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns a single issue, for a given issue ID or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.
     * Get issue
     */
    async getIssue(requestParameters: GetIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getIssueRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the estimation of the issue and a fieldId of the field that is used for it. `boardId` param is required. This param determines which field will be updated on a issue.  Original time internally stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-getEditIssueMeta) or [field resource](#api-rest-api-3-field-get).
     * Get issue estimation for board
     */
    async getIssueEstimationForBoardRaw(requestParameters: GetIssueEstimationForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getIssueEstimationForBoard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['boardId'] != null) {
            queryParameters['boardId'] = requestParameters['boardId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:issue:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/issue/{issueIdOrKey}/estimation`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the estimation of the issue and a fieldId of the field that is used for it. `boardId` param is required. This param determines which field will be updated on a issue.  Original time internally stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-getEditIssueMeta) or [field resource](#api-rest-api-3-field-get).
     * Get issue estimation for board
     */
    async getIssueEstimationForBoard(requestParameters: GetIssueEstimationForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getIssueEstimationForBoardRaw(requestParameters, initOverrides);
    }

    /**
     * Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once.  This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body.  If rankCustomFieldId is not defined, the default rank field will be used.
     * Rank issues
     */
    async rankIssuesRaw(requestParameters: RankIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['moveIssuesToBacklogForBoardRequest'] == null) {
            throw new runtime.RequiredError(
                'moveIssuesToBacklogForBoardRequest',
                'Required parameter "moveIssuesToBacklogForBoardRequest" was null or undefined when calling rankIssues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:issue:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/issue/rank`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['moveIssuesToBacklogForBoardRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once.  This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body.  If rankCustomFieldId is not defined, the default rank field will be used.
     * Rank issues
     */
    async rankIssues(requestParameters: RankIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rankIssuesRaw(requestParameters, initOverrides);
    }

}
