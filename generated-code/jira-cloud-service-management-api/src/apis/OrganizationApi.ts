/* tslint:disable */
/* eslint-disable */
/**
 * Service Management Public REST API
 * Public REST API for Jira Service Management
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-b3300bcdd36d8c214940b3035162ea6fa1d58aa8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityProperty,
  ErrorResponse,
  OrganizationCreateDTO,
  OrganizationDTO,
  OrganizationServiceDeskUpdateDTO,
  PagedDTOOrganizationDTO,
  PagedDTOUserDTO,
  PropertyKeys,
  UsersOrganizationUpdateDTO,
} from '../models/index';

export interface AddOrganizationRequest {
    serviceDeskId: string;
    organizationServiceDeskUpdateDTO: OrganizationServiceDeskUpdateDTO;
}

export interface AddUsersToOrganizationRequest {
    organizationId: number;
    usersOrganizationUpdateDTO: UsersOrganizationUpdateDTO;
}

export interface CreateOrganizationRequest {
    organizationCreateDTO: OrganizationCreateDTO;
}

export interface DeleteOrganizationRequest {
    organizationId: number;
}

export interface DeletePropertyRequest {
    organizationId: string;
    propertyKey: string;
}

export interface GetOrganizationRequest {
    organizationId: number;
}

export interface GetOrganizationsRequest {
    start?: number;
    limit?: number;
    accountId?: string;
}

export interface GetOrganizations0Request {
    serviceDeskId: string;
    start?: number;
    limit?: number;
    accountId?: string;
}

export interface GetPropertiesKeysRequest {
    organizationId: string;
}

export interface GetPropertyRequest {
    organizationId: string;
    propertyKey: string;
}

export interface GetUsersInOrganizationRequest {
    organizationId: number;
    start?: number;
    limit?: number;
}

export interface RemoveOrganizationRequest {
    serviceDeskId: string;
    organizationServiceDeskUpdateDTO: OrganizationServiceDeskUpdateDTO;
}

export interface RemoveUsersFromOrganizationRequest {
    organizationId: number;
    usersOrganizationUpdateDTO: UsersOrganizationUpdateDTO;
}

export interface SetPropertyRequest {
    organizationId: string;
    propertyKey: string;
    body: any | null;
}

/**
 * 
 */
export class OrganizationApi extends runtime.BaseAPI {

    /**
     * This method adds an organization to a service desk. If the organization ID is already associated with the service desk, no change is made and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Add organization
     */
    async addOrganizationRaw(requestParameters: AddOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling addOrganization().'
            );
        }

        if (requestParameters['organizationServiceDeskUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'organizationServiceDeskUpdateDTO',
                'Required parameter "organizationServiceDeskUpdateDTO" was null or undefined when calling addOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/organization`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['organizationServiceDeskUpdateDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method adds an organization to a service desk. If the organization ID is already associated with the service desk, no change is made and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Add organization
     */
    async addOrganization(requestParameters: AddOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * This method adds users to an organization.  **[Permissions](#permissions) required**: Service desk administrator or agent. Note: Permission to add users to an organization can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Add users to organization
     */
    async addUsersToOrganizationRaw(requestParameters: AddUsersToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling addUsersToOrganization().'
            );
        }

        if (requestParameters['usersOrganizationUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'usersOrganizationUpdateDTO',
                'Required parameter "usersOrganizationUpdateDTO" was null or undefined when calling addUsersToOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/user`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['usersOrganizationUpdateDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method adds users to an organization.  **[Permissions](#permissions) required**: Service desk administrator or agent. Note: Permission to add users to an organization can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Add users to organization
     */
    async addUsersToOrganization(requestParameters: AddUsersToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUsersToOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * This method creates an organization by passing the name of the organization.  **[Permissions](#permissions) required**: Service desk administrator or agent. Note: Permission to create organizations can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Create organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationDTO>> {
        if (requestParameters['organizationCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'organizationCreateDTO',
                'Required parameter "organizationCreateDTO" was null or undefined when calling createOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['organizationCreateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method creates an organization by passing the name of the organization.  **[Permissions](#permissions) required**: Service desk administrator or agent. Note: Permission to create organizations can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Create organization
     */
    async createOrganization(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationDTO> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method deletes an organization. Note that the organization is deleted regardless of other associations it may have. For example, associations with service desks.  **[Permissions](#permissions) required**: Jira administrator.
     * Delete organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deleteOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method deletes an organization. Note that the organization is deleted regardless of other associations it may have. For example, associations with service desks.  **[Permissions](#permissions) required**: Jira administrator.
     * Delete organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * Removes an organization property. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  For operations relating to organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Service Desk Administrator or Agent.  Note: Permission to manage organizations can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Delete property
     */
    async deletePropertyRaw(requestParameters: DeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deleteProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling deleteProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/property/{propertyKey}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes an organization property. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  For operations relating to organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Service Desk Administrator or Agent.  Note: Permission to manage organizations can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Delete property
     */
    async deleteProperty(requestParameters: DeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * This method returns details of an organization. Use this method to get organization details whenever your application component is passed an organization ID but needs to display other organization details.  To get organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Any  **Response limitations**: Customers can only retrieve organization of which they are members.
     * Get organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationDTO>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns details of an organization. Use this method to get organization details whenever your application component is passed an organization ID but needs to display other organization details.  To get organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Any  **Response limitations**: Customers can only retrieve organization of which they are members.
     * Get organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationDTO> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of organizations in the Jira Service Management instance. Use this method when you want to present a list of organizations or want to locate an organization by name.  **[Permissions](#permissions) required**: Any. However, to fetch organizations based on `accountId` the user must have a Service Desk agent license.  **Response limitations**: If the user is a customer, only those organizations of which the customer is a member are listed.
     * Get organizations
     */
    async getOrganizationsRaw(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOOrganizationDTO>> {
        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a list of organizations in the Jira Service Management instance. Use this method when you want to present a list of organizations or want to locate an organization by name.  **[Permissions](#permissions) required**: Any. However, to fetch organizations based on `accountId` the user must have a Service Desk agent license.  **Response limitations**: If the user is a customer, only those organizations of which the customer is a member are listed.
     * Get organizations
     */
    async getOrganizations(requestParameters: GetOrganizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOOrganizationDTO> {
        const response = await this.getOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of all organizations associated with a service desk.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Get organizations
     */
    async getOrganizations_1Raw(requestParameters: GetOrganizations0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOOrganizationDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getOrganizations_1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/organization`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a list of all organizations associated with a service desk.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Get organizations
     */
    async getOrganizations_1(requestParameters: GetOrganizations0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOOrganizationDTO> {
        const response = await this.getOrganizations_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the keys of all organization properties. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  To get organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Any  **Response limitations**: Customers can only access properties of organizations of which they are members.
     * Get properties keys
     */
    async getPropertiesKeysRaw(requestParameters: GetPropertiesKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyKeys>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getPropertiesKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/property`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the keys of all organization properties. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  To get organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Any  **Response limitations**: Customers can only access properties of organizations of which they are members.
     * Get properties keys
     */
    async getPropertiesKeys(requestParameters: GetPropertiesKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyKeys> {
        const response = await this.getPropertiesKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the value of an organization property. Use this method to obtain the JSON content for an organization\'s property. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  To get organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Any  **Response limitations**: Customers can only access properties of organizations of which they are members.
     * Get property
     */
    async getPropertyRaw(requestParameters: GetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityProperty>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling getProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/property/{propertyKey}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the value of an organization property. Use this method to obtain the JSON content for an organization\'s property. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  To get organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Any  **Response limitations**: Customers can only access properties of organizations of which they are members.
     * Get property
     */
    async getProperty(requestParameters: GetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityProperty> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all the users associated with an organization. Use this method where you want to provide a list of users for an organization or determine if a user is associated with an organization.  **[Permissions](#permissions) required**: Service desk administrator or agent.
     * Get users in organization
     */
    async getUsersInOrganizationRaw(requestParameters: GetUsersInOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOUserDTO>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getUsersInOrganization().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/user`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all the users associated with an organization. Use this method where you want to provide a list of users for an organization or determine if a user is associated with an organization.  **[Permissions](#permissions) required**: Service desk administrator or agent.
     * Get users in organization
     */
    async getUsersInOrganization(requestParameters: GetUsersInOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOUserDTO> {
        const response = await this.getUsersInOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method removes an organization from a service desk. If the organization ID does not match an organization associated with the service desk, no change is made and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Remove organization
     */
    async removeOrganizationRaw(requestParameters: RemoveOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling removeOrganization().'
            );
        }

        if (requestParameters['organizationServiceDeskUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'organizationServiceDeskUpdateDTO',
                'Required parameter "organizationServiceDeskUpdateDTO" was null or undefined when calling removeOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/organization`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['organizationServiceDeskUpdateDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method removes an organization from a service desk. If the organization ID does not match an organization associated with the service desk, no change is made and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Remove organization
     */
    async removeOrganization(requestParameters: RemoveOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * This method removes users from an organization.  **[Permissions](#permissions) required**: Service desk administrator or agent. Note: Permission to delete users from an organization can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Remove users from organization
     */
    async removeUsersFromOrganizationRaw(requestParameters: RemoveUsersFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling removeUsersFromOrganization().'
            );
        }

        if (requestParameters['usersOrganizationUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'usersOrganizationUpdateDTO',
                'Required parameter "usersOrganizationUpdateDTO" was null or undefined when calling removeUsersFromOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/user`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['usersOrganizationUpdateDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method removes users from an organization.  **[Permissions](#permissions) required**: Service desk administrator or agent. Note: Permission to delete users from an organization can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Remove users from organization
     */
    async removeUsersFromOrganization(requestParameters: RemoveUsersFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUsersFromOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the value of an organization property. Use this resource to store custom data against an organization. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  To store organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Service Desk Administrator or Agent.  Note: Permission to manage organizations can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Set property
     */
    async setPropertyRaw(requestParameters: SetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling setProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling setProperty().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling setProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/organization/{organizationId}/property/{propertyKey}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sets the value of an organization property. Use this resource to store custom data against an organization. Organization properties are a type of entity property which are available to the API only, and not shown in Jira Service Management. [Learn more](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).  To store organization detail field values which are visible in Jira Service Management, see the [Customer Service Management REST API](https://developer.atlassian.com/cloud/customer-service-management/rest/v1/api-group-organization/#api-group-organization).  **[Permissions](#permissions) required**: Service Desk Administrator or Agent.  Note: Permission to manage organizations can be switched to users with the Jira administrator permission, using the **[Organization management](https://confluence.atlassian.com/servicedeskcloud/setting-up-service-desk-users-732528877.html#Settingupservicedeskusers-manageorgsManageorganizations)** feature.
     * Set property
     */
    async setProperty(requestParameters: SetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
