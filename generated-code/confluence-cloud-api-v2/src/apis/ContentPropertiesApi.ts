/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentProperty,
  ContentPropertyCreateRequest,
  ContentPropertySortOrder,
  ContentPropertyUpdateRequest,
  MultiEntityResultContentProperty,
} from '../models';

export interface CreateAttachmentPropertyRequest {
    attachmentId: string;
    contentPropertyCreateRequest: ContentPropertyCreateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface CreateBlogpostPropertyRequest {
    blogpostId: number;
    contentPropertyCreateRequest: ContentPropertyCreateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface CreateCommentPropertyRequest {
    commentId: number;
    contentPropertyCreateRequest: ContentPropertyCreateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface CreateCustomContentPropertyRequest {
    customContentId: number;
    contentPropertyCreateRequest: ContentPropertyCreateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface CreatePagePropertyRequest {
    pageId: number;
    contentPropertyCreateRequest: ContentPropertyCreateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface DeleteAttachmentPropertyByIdRequest {
    attachmentId: string;
    propertyId: number;
}

export interface DeleteBlogpostPropertyByIdRequest {
    blogpostId: number;
    propertyId: number;
}

export interface DeleteCommentPropertyByIdRequest {
    commentId: number;
    propertyId: number;
}

export interface DeleteCustomContentPropertyByIdRequest {
    customContentId: number;
    propertyId: number;
}

export interface DeletePagePropertyByIdRequest {
    pageId: number;
    propertyId: number;
}

export interface GetAttachmentContentPropertiesRequest {
    attachmentId: string;
    key?: string;
    sort?: ContentPropertySortOrder;
    cursor?: string;
    limit?: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetAttachmentContentPropertiesByIdRequest {
    attachmentId: string;
    propertyId: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetBlogpostContentPropertiesRequest {
    blogpostId: number;
    key?: string;
    sort?: ContentPropertySortOrder;
    cursor?: string;
    limit?: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetBlogpostContentPropertiesByIdRequest {
    blogpostId: number;
    propertyId: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetCommentContentPropertiesRequest {
    commentId: number;
    key?: string;
    sort?: ContentPropertySortOrder;
    cursor?: string;
    limit?: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetCommentContentPropertiesByIdRequest {
    commentId: number;
    propertyId: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetCustomContentContentPropertiesRequest {
    customContentId: number;
    key?: string;
    sort?: ContentPropertySortOrder;
    cursor?: string;
    limit?: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetCustomContentContentPropertiesByIdRequest {
    customContentId: number;
    propertyId: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetPageContentPropertiesRequest {
    pageId: number;
    key?: string;
    sort?: ContentPropertySortOrder;
    cursor?: string;
    limit?: number;
    serializeIdsAsStrings?: boolean;
}

export interface GetPageContentPropertiesByIdRequest {
    pageId: number;
    propertyId: number;
    serializeIdsAsStrings?: boolean;
}

export interface UpdateAttachmentPropertyByIdRequest {
    attachmentId: string;
    propertyId: number;
    contentPropertyUpdateRequest: ContentPropertyUpdateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface UpdateBlogpostPropertyByIdRequest {
    blogpostId: number;
    propertyId: number;
    contentPropertyUpdateRequest: ContentPropertyUpdateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface UpdateCommentPropertyByIdRequest {
    commentId: number;
    propertyId: number;
    contentPropertyUpdateRequest: ContentPropertyUpdateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface UpdateCustomContentPropertyByIdRequest {
    customContentId: number;
    propertyId: number;
    contentPropertyUpdateRequest: ContentPropertyUpdateRequest;
    serializeIdsAsStrings?: boolean;
}

export interface UpdatePagePropertyByIdRequest {
    pageId: number;
    propertyId: number;
    contentPropertyUpdateRequest: ContentPropertyUpdateRequest;
    serializeIdsAsStrings?: boolean;
}

/**
 * 
 */
export class ContentPropertiesApi extends runtime.BaseAPI {

    /**
     * Creates a new attachment property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the attachment.
     * Create attachment property
     */
    async createAttachmentPropertyRaw(requestParameters: CreateAttachmentPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling createAttachmentProperty.');
        }

        if (requestParameters.contentPropertyCreateRequest === null || requestParameters.contentPropertyCreateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyCreateRequest','Required parameter requestParameters.contentPropertyCreateRequest was null or undefined when calling createAttachmentProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{attachment-id}/properties`.replace(`{${"attachment-id"}}`, encodeURIComponent(String(requestParameters.attachmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new attachment property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the attachment.
     * Create attachment property
     */
    async createAttachmentProperty(requestParameters: CreateAttachmentPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.createAttachmentPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new blog post property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the blog post.
     * Create blog post property
     */
    async createBlogpostPropertyRaw(requestParameters: CreateBlogpostPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.blogpostId === null || requestParameters.blogpostId === undefined) {
            throw new runtime.RequiredError('blogpostId','Required parameter requestParameters.blogpostId was null or undefined when calling createBlogpostProperty.');
        }

        if (requestParameters.contentPropertyCreateRequest === null || requestParameters.contentPropertyCreateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyCreateRequest','Required parameter requestParameters.contentPropertyCreateRequest was null or undefined when calling createBlogpostProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{blogpost-id}/properties`.replace(`{${"blogpost-id"}}`, encodeURIComponent(String(requestParameters.blogpostId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new blog post property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the blog post.
     * Create blog post property
     */
    async createBlogpostProperty(requestParameters: CreateBlogpostPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.createBlogpostPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new comment property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the comment.
     * Create comment property
     */
    async createCommentPropertyRaw(requestParameters: CreateCommentPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling createCommentProperty.');
        }

        if (requestParameters.contentPropertyCreateRequest === null || requestParameters.contentPropertyCreateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyCreateRequest','Required parameter requestParameters.contentPropertyCreateRequest was null or undefined when calling createCommentProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence", "write:comment:confluence"]);
        }

        const response = await this.request({
            path: `/comments/{comment-id}/properties`.replace(`{${"comment-id"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new comment property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the comment.
     * Create comment property
     */
    async createCommentProperty(requestParameters: CreateCommentPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.createCommentPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new custom content property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the custom content.
     * Create custom content property
     */
    async createCustomContentPropertyRaw(requestParameters: CreateCustomContentPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling createCustomContentProperty.');
        }

        if (requestParameters.contentPropertyCreateRequest === null || requestParameters.contentPropertyCreateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyCreateRequest','Required parameter requestParameters.contentPropertyCreateRequest was null or undefined when calling createCustomContentProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence", "write:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/properties`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new custom content property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the custom content.
     * Create custom content property
     */
    async createCustomContentProperty(requestParameters: CreateCustomContentPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.createCustomContentPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new page property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the page.
     * Create page property
     */
    async createPagePropertyRaw(requestParameters: CreatePagePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling createPageProperty.');
        }

        if (requestParameters.contentPropertyCreateRequest === null || requestParameters.contentPropertyCreateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyCreateRequest','Required parameter requestParameters.contentPropertyCreateRequest was null or undefined when calling createPageProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{page-id}/properties`.replace(`{${"page-id"}}`, encodeURIComponent(String(requestParameters.pageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyCreateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new page property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the page.
     * Create page property
     */
    async createPageProperty(requestParameters: CreatePagePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.createPagePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a attachment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to attachment the page.
     * Delete attachment property by id
     */
    async deleteAttachmentPropertyByIdRaw(requestParameters: DeleteAttachmentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling deleteAttachmentPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling deleteAttachmentPropertyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{attachment-id}/properties/{property-id}`.replace(`{${"attachment-id"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a attachment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to attachment the page.
     * Delete attachment property by id
     */
    async deleteAttachmentPropertyById(requestParameters: DeleteAttachmentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttachmentPropertyByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a blog post property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the blog post.
     * Delete blog post property by id
     */
    async deleteBlogpostPropertyByIdRaw(requestParameters: DeleteBlogpostPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.blogpostId === null || requestParameters.blogpostId === undefined) {
            throw new runtime.RequiredError('blogpostId','Required parameter requestParameters.blogpostId was null or undefined when calling deleteBlogpostPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling deleteBlogpostPropertyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{blogpost-id}/properties/{property-id}`.replace(`{${"blogpost-id"}}`, encodeURIComponent(String(requestParameters.blogpostId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a blog post property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the blog post.
     * Delete blog post property by id
     */
    async deleteBlogpostPropertyById(requestParameters: DeleteBlogpostPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBlogpostPropertyByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a comment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the comment.
     * Delete comment property by id
     */
    async deleteCommentPropertyByIdRaw(requestParameters: DeleteCommentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteCommentPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling deleteCommentPropertyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence", "write:comment:confluence"]);
        }

        const response = await this.request({
            path: `/comments/{comment-id}/properties/{property-id}`.replace(`{${"comment-id"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a comment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the comment.
     * Delete comment property by id
     */
    async deleteCommentPropertyById(requestParameters: DeleteCommentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCommentPropertyByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a custom content property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the custom content.
     * Delete custom content property by id
     */
    async deleteCustomContentPropertyByIdRaw(requestParameters: DeleteCustomContentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling deleteCustomContentPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling deleteCustomContentPropertyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence", "write:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/properties/{property-id}`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a custom content property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the custom content.
     * Delete custom content property by id
     */
    async deleteCustomContentPropertyById(requestParameters: DeleteCustomContentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomContentPropertyByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a page property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the page.
     * Delete page property by id
     */
    async deletePagePropertyByIdRaw(requestParameters: DeletePagePropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling deletePagePropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling deletePagePropertyById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{page-id}/properties/{property-id}`.replace(`{${"page-id"}}`, encodeURIComponent(String(requestParameters.pageId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a page property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the page.
     * Delete page property by id
     */
    async deletePagePropertyById(requestParameters: DeletePagePropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePagePropertyByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all Content Properties tied to a specified attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
     * Get content properties for attachment
     */
    async getAttachmentContentPropertiesRaw(requestParameters: GetAttachmentContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultContentProperty>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling getAttachmentContentProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{attachment-id}/properties`.replace(`{${"attachment-id"}}`, encodeURIComponent(String(requestParameters.attachmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all Content Properties tied to a specified attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
     * Get content properties for attachment
     */
    async getAttachmentContentProperties(requestParameters: GetAttachmentContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultContentProperty> {
        const response = await this.getAttachmentContentPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
     * Get content property for attachment by id
     */
    async getAttachmentContentPropertiesByIdRaw(requestParameters: GetAttachmentContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling getAttachmentContentPropertiesById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getAttachmentContentPropertiesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{attachment-id}/properties/{property-id}`.replace(`{${"attachment-id"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
     * Get content property for attachment by id
     */
    async getAttachmentContentPropertiesById(requestParameters: GetAttachmentContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.getAttachmentContentPropertiesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all Content Properties tied to a specified blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
     * Get content properties for blog post
     */
    async getBlogpostContentPropertiesRaw(requestParameters: GetBlogpostContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultContentProperty>> {
        if (requestParameters.blogpostId === null || requestParameters.blogpostId === undefined) {
            throw new runtime.RequiredError('blogpostId','Required parameter requestParameters.blogpostId was null or undefined when calling getBlogpostContentProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{blogpost-id}/properties`.replace(`{${"blogpost-id"}}`, encodeURIComponent(String(requestParameters.blogpostId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all Content Properties tied to a specified blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
     * Get content properties for blog post
     */
    async getBlogpostContentProperties(requestParameters: GetBlogpostContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultContentProperty> {
        const response = await this.getBlogpostContentPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
     * Get content property for blog post by id
     */
    async getBlogpostContentPropertiesByIdRaw(requestParameters: GetBlogpostContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.blogpostId === null || requestParameters.blogpostId === undefined) {
            throw new runtime.RequiredError('blogpostId','Required parameter requestParameters.blogpostId was null or undefined when calling getBlogpostContentPropertiesById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getBlogpostContentPropertiesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{blogpost-id}/properties/{property-id}`.replace(`{${"blogpost-id"}}`, encodeURIComponent(String(requestParameters.blogpostId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified blog post.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
     * Get content property for blog post by id
     */
    async getBlogpostContentPropertiesById(requestParameters: GetBlogpostContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.getBlogpostContentPropertiesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves Content Properties attached to a specified comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the comment.
     * Get content properties for comment
     */
    async getCommentContentPropertiesRaw(requestParameters: GetCommentContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultContentProperty>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling getCommentContentProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence"]);
        }

        const response = await this.request({
            path: `/comments/{comment-id}/properties`.replace(`{${"comment-id"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves Content Properties attached to a specified comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the comment.
     * Get content properties for comment
     */
    async getCommentContentProperties(requestParameters: GetCommentContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultContentProperty> {
        const response = await this.getCommentContentPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the comment.
     * Get content property for comment by id
     */
    async getCommentContentPropertiesByIdRaw(requestParameters: GetCommentContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling getCommentContentPropertiesById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getCommentContentPropertiesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence"]);
        }

        const response = await this.request({
            path: `/comments/{comment-id}/properties/{property-id}`.replace(`{${"comment-id"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the comment.
     * Get content property for comment by id
     */
    async getCommentContentPropertiesById(requestParameters: GetCommentContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.getCommentContentPropertiesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves Content Properties tied to a specified custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the custom content.
     * Get content properties for custom content
     */
    async getCustomContentContentPropertiesRaw(requestParameters: GetCustomContentContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultContentProperty>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling getCustomContentContentProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/properties`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves Content Properties tied to a specified custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the custom content.
     * Get content properties for custom content
     */
    async getCustomContentContentProperties(requestParameters: GetCustomContentContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultContentProperty> {
        const response = await this.getCustomContentContentPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get content property for custom content by id
     */
    async getCustomContentContentPropertiesByIdRaw(requestParameters: GetCustomContentContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling getCustomContentContentPropertiesById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getCustomContentContentPropertiesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/properties/{property-id}`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get content property for custom content by id
     */
    async getCustomContentContentPropertiesById(requestParameters: GetCustomContentContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.getCustomContentContentPropertiesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves Content Properties tied to a specified page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get content properties for page
     */
    async getPageContentPropertiesRaw(requestParameters: GetPageContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultContentProperty>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling getPageContentProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{page-id}/properties`.replace(`{${"page-id"}}`, encodeURIComponent(String(requestParameters.pageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves Content Properties tied to a specified page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get content properties for page
     */
    async getPageContentProperties(requestParameters: GetPageContentPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultContentProperty> {
        const response = await this.getPageContentPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get content property for page by id
     */
    async getPageContentPropertiesByIdRaw(requestParameters: GetPageContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling getPageContentPropertiesById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling getPageContentPropertiesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{page-id}/properties/{property-id}`.replace(`{${"page-id"}}`, encodeURIComponent(String(requestParameters.pageId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific Content Property by ID that is attached to a specified page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get content property for page by id
     */
    async getPageContentPropertiesById(requestParameters: GetPageContentPropertiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.getPageContentPropertiesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an attachment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the attachment.
     * Update attachment property by id
     */
    async updateAttachmentPropertyByIdRaw(requestParameters: UpdateAttachmentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling updateAttachmentPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling updateAttachmentPropertyById.');
        }

        if (requestParameters.contentPropertyUpdateRequest === null || requestParameters.contentPropertyUpdateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyUpdateRequest','Required parameter requestParameters.contentPropertyUpdateRequest was null or undefined when calling updateAttachmentPropertyById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{attachment-id}/properties/{property-id}`.replace(`{${"attachment-id"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update an attachment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the attachment.
     * Update attachment property by id
     */
    async updateAttachmentPropertyById(requestParameters: UpdateAttachmentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.updateAttachmentPropertyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a blog post property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the blog post.
     * Update blog post property by id
     */
    async updateBlogpostPropertyByIdRaw(requestParameters: UpdateBlogpostPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.blogpostId === null || requestParameters.blogpostId === undefined) {
            throw new runtime.RequiredError('blogpostId','Required parameter requestParameters.blogpostId was null or undefined when calling updateBlogpostPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling updateBlogpostPropertyById.');
        }

        if (requestParameters.contentPropertyUpdateRequest === null || requestParameters.contentPropertyUpdateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyUpdateRequest','Required parameter requestParameters.contentPropertyUpdateRequest was null or undefined when calling updateBlogpostPropertyById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{blogpost-id}/properties/{property-id}`.replace(`{${"blogpost-id"}}`, encodeURIComponent(String(requestParameters.blogpostId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a blog post property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the blog post.
     * Update blog post property by id
     */
    async updateBlogpostPropertyById(requestParameters: UpdateBlogpostPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.updateBlogpostPropertyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a comment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the comment.
     * Update comment property by id
     */
    async updateCommentPropertyByIdRaw(requestParameters: UpdateCommentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling updateCommentPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling updateCommentPropertyById.');
        }

        if (requestParameters.contentPropertyUpdateRequest === null || requestParameters.contentPropertyUpdateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyUpdateRequest','Required parameter requestParameters.contentPropertyUpdateRequest was null or undefined when calling updateCommentPropertyById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence", "write:comment:confluence"]);
        }

        const response = await this.request({
            path: `/comments/{comment-id}/properties/{property-id}`.replace(`{${"comment-id"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a comment property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the comment.
     * Update comment property by id
     */
    async updateCommentPropertyById(requestParameters: UpdateCommentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.updateCommentPropertyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a custom content property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the custom content.
     * Update custom content property by id
     */
    async updateCustomContentPropertyByIdRaw(requestParameters: UpdateCustomContentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling updateCustomContentPropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling updateCustomContentPropertyById.');
        }

        if (requestParameters.contentPropertyUpdateRequest === null || requestParameters.contentPropertyUpdateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyUpdateRequest','Required parameter requestParameters.contentPropertyUpdateRequest was null or undefined when calling updateCustomContentPropertyById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence", "write:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/properties/{property-id}`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a custom content property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the custom content.
     * Update custom content property by id
     */
    async updateCustomContentPropertyById(requestParameters: UpdateCustomContentPropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.updateCustomContentPropertyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a page property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the page.
     * Update page property by id
     */
    async updatePagePropertyByIdRaw(requestParameters: UpdatePagePropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentProperty>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling updatePagePropertyById.');
        }

        if (requestParameters.propertyId === null || requestParameters.propertyId === undefined) {
            throw new runtime.RequiredError('propertyId','Required parameter requestParameters.propertyId was null or undefined when calling updatePagePropertyById.');
        }

        if (requestParameters.contentPropertyUpdateRequest === null || requestParameters.contentPropertyUpdateRequest === undefined) {
            throw new runtime.RequiredError('contentPropertyUpdateRequest','Required parameter requestParameters.contentPropertyUpdateRequest was null or undefined when calling updatePagePropertyById.');
        }

        const queryParameters: any = {};

        if (requestParameters.serializeIdsAsStrings !== undefined) {
            queryParameters['serialize-ids-as-strings'] = requestParameters.serializeIdsAsStrings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence", "write:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{page-id}/properties/{property-id}`.replace(`{${"page-id"}}`, encodeURIComponent(String(requestParameters.pageId))).replace(`{${"property-id"}}`, encodeURIComponent(String(requestParameters.propertyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentPropertyUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a page property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the page.
     * Update page property by id
     */
    async updatePagePropertyById(requestParameters: UpdatePagePropertyByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentProperty> {
        const response = await this.updatePagePropertyByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
