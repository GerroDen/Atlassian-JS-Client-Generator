/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArchivePagesRequest,
  Content,
  ContentArray,
  ContentBlueprintDraft,
  ContentCreate,
  ContentHistory,
  ContentUpdate,
  LongTask,
} from '../models';

export interface ArchivePagesOperationRequest {
    archivePagesRequest?: ArchivePagesRequest;
}

export interface CreateContentRequest {
    content: { [key: string]: any; } | null;
    status?: string;
    expand?: Array<string>;
}

export interface DeleteContentRequest {
    id: string;
    status?: string;
}

export interface GetContentRequest {
    type?: string;
    spaceKey?: string;
    title?: string;
    status?: GetContentStatusEnum;
    postingDay?: string;
    expand?: Array<string>;
    trigger?: GetContentTriggerEnum;
    orderby?: string;
    start?: number;
    limit?: number;
}

export interface GetContentByIdRequest {
    id: string;
    status?: GetContentByIdStatusEnum;
    version?: number;
    embeddedContentRender?: GetContentByIdEmbeddedContentRenderEnum;
    expand?: Array<string>;
    trigger?: GetContentByIdTriggerEnum;
}

export interface GetHistoryForContentRequest {
    id: string;
    expand?: Array<GetHistoryForContentExpandEnum>;
}

export interface PublishLegacyDraftRequest {
    draftId: string;
    body: { [key: string]: any; };
    status?: string;
    expand?: Array<string>;
}

export interface PublishSharedDraftRequest {
    draftId: string;
    body: { [key: string]: any; };
    status?: string;
    expand?: Array<string>;
}

export interface SearchContentByCQLRequest {
    cql: string;
    cqlcontext?: string;
    expand?: Array<string>;
    cursor?: string;
    limit?: number;
}

export interface UpdateContentRequest {
    id: string;
    content: { [key: string]: any; };
    status?: UpdateContentStatusEnum;
    conflictPolicy?: UpdateContentConflictPolicyEnum;
}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI {

    /**
     * Archives a list of pages. The pages to be archived are specified as a list of content IDs. This API accepts the archival request and returns a task ID. The archival process happens asynchronously. Use the /longtask/<taskId> REST API to get the copy task status.  Each content ID needs to resolve to page objects that are not already in an archived state. The content IDs need not belong to the same space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Archive\' permission for each of the pages in the corresponding space it belongs to.
     * Archive pages
     */
    async archivePagesRaw(requestParameters: ArchivePagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LongTask>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/archive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.archivePagesRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Archives a list of pages. The pages to be archived are specified as a list of content IDs. This API accepts the archival request and returns a task ID. The archival process happens asynchronously. Use the /longtask/<taskId> REST API to get the copy task status.  Each content ID needs to resolve to page objects that are not already in an archived state. The content IDs need not belong to the same space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Archive\' permission for each of the pages in the corresponding space it belongs to.
     * Archive pages
     */
    async archivePages(requestParameters: ArchivePagesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LongTask> {
        const response = await this.archivePagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new piece of content or publishes an existing draft.  To publish a draft, add the `id` and `status` properties to the body of the request. Set the `id` to the ID of the draft and set the `status` to \'current\'. When the request is sent, a new piece of content will be created and the metadata from the draft will be transferred into it.  By default, the following objects are expanded: `space`, `history`, `version`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Add\' permission for the space that the content will be created in, and permission to view the draft if publishing a draft.
     * Create content
     */
    async createContentRaw(requestParameters: CreateContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Content>> {
        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling createContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.content,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new piece of content or publishes an existing draft.  To publish a draft, add the `id` and `status` properties to the body of the request. Set the `id` to the ID of the draft and set the `status` to \'current\'. When the request is sent, a new piece of content will be created and the metadata from the draft will be transferred into it.  By default, the following objects are expanded: `space`, `history`, `version`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Add\' permission for the space that the content will be created in, and permission to view the draft if publishing a draft.
     * Create content
     */
    async createContent(requestParameters: CreateContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Content> {
        const response = await this.createContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Moves a piece of content to the space\'s trash or purges it from the trash, depending on the content\'s type and status:  - If the content\'s type is `page`,`blogpost`, or `attachment` and its status is `current`, it will be trashed. - If the content\'s type is `page`,`blogpost`, or `attachment` and its status is `trashed`, the content will be purged from the trash and deleted permanently. Note, you must also set the `status` query parameter to `trashed` in your request. - If the content\'s type is `comment`, it will be deleted permanently without being trashed.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Delete\' permission for the space that the content is in.
     * Delete content
     */
    async deleteContentRaw(requestParameters: DeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Moves a piece of content to the space\'s trash or purges it from the trash, depending on the content\'s type and status:  - If the content\'s type is `page`,`blogpost`, or `attachment` and its status is `current`, it will be trashed. - If the content\'s type is `page`,`blogpost`, or `attachment` and its status is `trashed`, the content will be purged from the trash and deleted permanently. Note, you must also set the `status` query parameter to `trashed` in your request. - If the content\'s type is `comment`, it will be deleted permanently without being trashed.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Delete\' permission for the space that the content is in.
     * Delete content
     */
    async deleteContent(requestParameters: DeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContentRaw(requestParameters, initOverrides);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a Confluence instance.  By default, the following objects are expanded: `space`, `history`, `version`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Only content that the user has permission to view will be returned.
     * Get content
     */
    async getContentRaw(requestParameters: GetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentArray>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.spaceKey !== undefined) {
            queryParameters['spaceKey'] = requestParameters.spaceKey;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.postingDay !== undefined) {
            queryParameters['postingDay'] = requestParameters.postingDay;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.trigger !== undefined) {
            queryParameters['trigger'] = requestParameters.trigger;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a Confluence instance.  By default, the following objects are expanded: `space`, `history`, `version`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Only content that the user has permission to view will be returned.
     * Get content
     */
    async getContent(requestParameters: GetContentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentArray> {
        const response = await this.getContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a single piece of content, like a page or a blog post.  By default, the following objects are expanded: `space`, `history`, `version`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the content is a blog post, \'View\' permission for the space is required.
     * Get content by ID
     */
    async getContentByIdRaw(requestParameters: GetContentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Content>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getContentById.');
        }

        const queryParameters: any = {};

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.embeddedContentRender !== undefined) {
            queryParameters['embeddedContentRender'] = requestParameters.embeddedContentRender;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.trigger !== undefined) {
            queryParameters['trigger'] = requestParameters.trigger;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a single piece of content, like a page or a blog post.  By default, the following objects are expanded: `space`, `history`, `version`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the content is a blog post, \'View\' permission for the space is required.
     * Get content by ID
     */
    async getContentById(requestParameters: GetContentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Content> {
        const response = await this.getContentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns the most recent update for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content history
     */
    async getHistoryForContentRaw(requestParameters: GetHistoryForContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentHistory>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHistoryForContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns the most recent update for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content history
     */
    async getHistoryForContent(requestParameters: GetHistoryForContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentHistory> {
        const response = await this.getHistoryForContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes a legacy draft of a page created from a blueprint. Legacy drafts will eventually be removed in favor of shared drafts. For now, this method works the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).  By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the draft and \'Add\' permission for the space that the content will be created in.
     * Publish legacy draft
     */
    async publishLegacyDraftRaw(requestParameters: PublishLegacyDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Content>> {
        if (requestParameters.draftId === null || requestParameters.draftId === undefined) {
            throw new runtime.RequiredError('draftId','Required parameter requestParameters.draftId was null or undefined when calling publishLegacyDraft.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling publishLegacyDraft.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/blueprint/instance/{draftId}`.replace(`{${"draftId"}}`, encodeURIComponent(String(requestParameters.draftId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Publishes a legacy draft of a page created from a blueprint. Legacy drafts will eventually be removed in favor of shared drafts. For now, this method works the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).  By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the draft and \'Add\' permission for the space that the content will be created in.
     * Publish legacy draft
     */
    async publishLegacyDraft(requestParameters: PublishLegacyDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Content> {
        const response = await this.publishLegacyDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes a shared draft of a page created from a blueprint.  By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the draft and \'Add\' permission for the space that the content will be created in.
     * Publish shared draft
     */
    async publishSharedDraftRaw(requestParameters: PublishSharedDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Content>> {
        if (requestParameters.draftId === null || requestParameters.draftId === undefined) {
            throw new runtime.RequiredError('draftId','Required parameter requestParameters.draftId was null or undefined when calling publishSharedDraft.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling publishSharedDraft.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/blueprint/instance/{draftId}`.replace(`{${"draftId"}}`, encodeURIComponent(String(requestParameters.draftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Publishes a shared draft of a page created from a blueprint.  By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the draft and \'Add\' permission for the space that the content will be created in.
     * Publish shared draft
     */
    async publishSharedDraft(requestParameters: PublishSharedDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Content> {
        const response = await this.publishSharedDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of content that matches a Confluence Query Language (CQL) query. For information on CQL, see: [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Example initial call: ``` /wiki/rest/api/content/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/content/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call. Example subsequent call (taken from example response): ``` /wiki/rest/api/content/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Only content that the user has permission to view will be returned.
     * Search content by CQL
     */
    async searchContentByCQLRaw(requestParameters: SearchContentByCQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentArray>> {
        if (requestParameters.cql === null || requestParameters.cql === undefined) {
            throw new runtime.RequiredError('cql','Required parameter requestParameters.cql was null or undefined when calling searchContentByCQL.');
        }

        const queryParameters: any = {};

        if (requestParameters.cql !== undefined) {
            queryParameters['cql'] = requestParameters.cql;
        }

        if (requestParameters.cqlcontext !== undefined) {
            queryParameters['cqlcontext'] = requestParameters.cqlcontext;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["search:confluence"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the list of content that matches a Confluence Query Language (CQL) query. For information on CQL, see: [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Example initial call: ``` /wiki/rest/api/content/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/content/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call. Example subsequent call (taken from example response): ``` /wiki/rest/api/content/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Only content that the user has permission to view will be returned.
     * Search content by CQL
     */
    async searchContentByCQL(requestParameters: SearchContentByCQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentArray> {
        const response = await this.searchContentByCQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Updates a piece of content. Use this method to update the title or body of a piece of content, change the status, change the parent page, and more.  Note, updating draft content is currently not supported.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * Update content
     */
    async updateContentRaw(requestParameters: UpdateContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Content>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateContent.');
        }

        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling updateContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.conflictPolicy !== undefined) {
            queryParameters['conflictPolicy'] = requestParameters.conflictPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.content,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Updates a piece of content. Use this method to update the title or body of a piece of content, change the status, change the parent page, and more.  Note, updating draft content is currently not supported.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * Update content
     */
    async updateContent(requestParameters: UpdateContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Content> {
        const response = await this.updateContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetContentStatusEnum = {
} as const;
export type GetContentStatusEnum = typeof GetContentStatusEnum[keyof typeof GetContentStatusEnum];
/**
 * @export
 */
export const GetContentTriggerEnum = {
    Viewed: 'viewed'
} as const;
export type GetContentTriggerEnum = typeof GetContentTriggerEnum[keyof typeof GetContentTriggerEnum];
/**
 * @export
 */
export const GetContentByIdStatusEnum = {
} as const;
export type GetContentByIdStatusEnum = typeof GetContentByIdStatusEnum[keyof typeof GetContentByIdStatusEnum];
/**
 * @export
 */
export const GetContentByIdEmbeddedContentRenderEnum = {
    Current: 'current',
    VersionAtSave: 'version-at-save'
} as const;
export type GetContentByIdEmbeddedContentRenderEnum = typeof GetContentByIdEmbeddedContentRenderEnum[keyof typeof GetContentByIdEmbeddedContentRenderEnum];
/**
 * @export
 */
export const GetContentByIdTriggerEnum = {
    Viewed: 'viewed'
} as const;
export type GetContentByIdTriggerEnum = typeof GetContentByIdTriggerEnum[keyof typeof GetContentByIdTriggerEnum];
/**
 * @export
 */
export const GetHistoryForContentExpandEnum = {
    LastUpdated: 'lastUpdated',
    PreviousVersion: 'previousVersion',
    Contributors: 'contributors',
    NextVersion: 'nextVersion'
} as const;
export type GetHistoryForContentExpandEnum = typeof GetHistoryForContentExpandEnum[keyof typeof GetHistoryForContentExpandEnum];
/**
 * @export
 */
export const UpdateContentStatusEnum = {
    Current: 'current',
    Trashed: 'trashed',
    Deleted: 'deleted',
    Historical: 'historical',
    Draft: 'draft'
} as const;
export type UpdateContentStatusEnum = typeof UpdateContentStatusEnum[keyof typeof UpdateContentStatusEnum];
/**
 * @export
 */
export const UpdateContentConflictPolicyEnum = {
    Abort: 'abort'
} as const;
export type UpdateContentConflictPolicyEnum = typeof UpdateContentConflictPolicyEnum[keyof typeof UpdateContentConflictPolicyEnum];
