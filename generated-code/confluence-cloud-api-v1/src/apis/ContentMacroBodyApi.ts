/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AsyncId,
  ContentBody,
  MacroInstance,
} from '../models/index';

export interface GetAndAsyncConvertMacroBodyByMacroIdRequest {
    id: string;
    version: number;
    macroId: string;
    to: GetAndAsyncConvertMacroBodyByMacroIdToEnum;
    expand?: Array<string>;
    allowCache?: boolean;
    spaceKeyContext?: string;
    embeddedContentRender?: GetAndAsyncConvertMacroBodyByMacroIdEmbeddedContentRenderEnum;
}

export interface GetAndConvertMacroBodyByMacroIdRequest {
    id: string;
    version: number;
    macroId: string;
    to: string;
    expand?: Array<string>;
    spaceKeyContext?: string;
    embeddedContentRender?: GetAndConvertMacroBodyByMacroIdEmbeddedContentRenderEnum;
}

export interface GetMacroBodyByMacroIdRequest {
    id: string;
    version: number;
    macroId: string;
}

/**
 * 
 */
export class ContentMacroBodyApi extends runtime.BaseAPI {

    /**
     * Returns Async Id of the conversion task which will convert the macro into a content body of the desired format. The result will be available for 5 minutes after completion of the conversion.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: \'884bd9-0cb8-41d5-98be-f80943c14f96\'. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     * Get macro body by macro ID and convert representation Asynchronously
     */
    async getAndAsyncConvertMacroBodyByMacroIdRaw(requestParameters: GetAndAsyncConvertMacroBodyByMacroIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AsyncId>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAndAsyncConvertMacroBodyByMacroId().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getAndAsyncConvertMacroBodyByMacroId().'
            );
        }

        if (requestParameters['macroId'] == null) {
            throw new runtime.RequiredError(
                'macroId',
                'Required parameter "macroId" was null or undefined when calling getAndAsyncConvertMacroBodyByMacroId().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling getAndAsyncConvertMacroBodyByMacroId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['allowCache'] != null) {
            queryParameters['allowCache'] = requestParameters['allowCache'];
        }

        if (requestParameters['spaceKeyContext'] != null) {
            queryParameters['spaceKeyContext'] = requestParameters['spaceKeyContext'];
        }

        if (requestParameters['embeddedContentRender'] != null) {
            queryParameters['embeddedContentRender'] = requestParameters['embeddedContentRender'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/history/{version}/macro/id/{macroId}/convert/async/{to}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"macroId"}}`, encodeURIComponent(String(requestParameters['macroId']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns Async Id of the conversion task which will convert the macro into a content body of the desired format. The result will be available for 5 minutes after completion of the conversion.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: \'884bd9-0cb8-41d5-98be-f80943c14f96\'. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     * Get macro body by macro ID and convert representation Asynchronously
     */
    async getAndAsyncConvertMacroBodyByMacroId(requestParameters: GetAndAsyncConvertMacroBodyByMacroIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncId> {
        const response = await this.getAndAsyncConvertMacroBodyByMacroIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the body of a macro in format specified in path, for the given macro ID. This includes information like the name of the macro, the body of the macro, and any macro parameters.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: \'50884bd9-0cb8-41d5-98be-f80943c14f96\'. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     * Get macro body by macro ID and convert the representation synchronously
     */
    async getAndConvertMacroBodyByMacroIdRaw(requestParameters: GetAndConvertMacroBodyByMacroIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAndConvertMacroBodyByMacroId().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getAndConvertMacroBodyByMacroId().'
            );
        }

        if (requestParameters['macroId'] == null) {
            throw new runtime.RequiredError(
                'macroId',
                'Required parameter "macroId" was null or undefined when calling getAndConvertMacroBodyByMacroId().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling getAndConvertMacroBodyByMacroId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['spaceKeyContext'] != null) {
            queryParameters['spaceKeyContext'] = requestParameters['spaceKeyContext'];
        }

        if (requestParameters['embeddedContentRender'] != null) {
            queryParameters['embeddedContentRender'] = requestParameters['embeddedContentRender'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/history/{version}/macro/id/{macroId}/convert/{to}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"macroId"}}`, encodeURIComponent(String(requestParameters['macroId']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the body of a macro in format specified in path, for the given macro ID. This includes information like the name of the macro, the body of the macro, and any macro parameters.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: \'50884bd9-0cb8-41d5-98be-f80943c14f96\'. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     * Get macro body by macro ID and convert the representation synchronously
     */
    async getAndConvertMacroBodyByMacroId(requestParameters: GetAndConvertMacroBodyByMacroIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentBody> {
        const response = await this.getAndConvertMacroBodyByMacroIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the body of a macro in storage format, for the given macro ID. This includes information like the name of the macro, the body of the macro, and any macro parameters. This method is mainly used by Cloud apps.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: \'50884bd9-0cb8-41d5-98be-f80943c14f96\'. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     * Get macro body by macro ID
     */
    async getMacroBodyByMacroIdRaw(requestParameters: GetMacroBodyByMacroIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MacroInstance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMacroBodyByMacroId().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getMacroBodyByMacroId().'
            );
        }

        if (requestParameters['macroId'] == null) {
            throw new runtime.RequiredError(
                'macroId',
                'Required parameter "macroId" was null or undefined when calling getMacroBodyByMacroId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/history/{version}/macro/id/{macroId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))).replace(`{${"macroId"}}`, encodeURIComponent(String(requestParameters['macroId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the body of a macro in storage format, for the given macro ID. This includes information like the name of the macro, the body of the macro, and any macro parameters. This method is mainly used by Cloud apps.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: \'50884bd9-0cb8-41d5-98be-f80943c14f96\'. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     * Get macro body by macro ID
     */
    async getMacroBodyByMacroId(requestParameters: GetMacroBodyByMacroIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MacroInstance> {
        const response = await this.getMacroBodyByMacroIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAndAsyncConvertMacroBodyByMacroIdToEnum = {
    ExportView: 'export_view',
    View: 'view',
    StyledView: 'styled_view'
} as const;
export type GetAndAsyncConvertMacroBodyByMacroIdToEnum = typeof GetAndAsyncConvertMacroBodyByMacroIdToEnum[keyof typeof GetAndAsyncConvertMacroBodyByMacroIdToEnum];
/**
 * @export
 */
export const GetAndAsyncConvertMacroBodyByMacroIdEmbeddedContentRenderEnum = {
    Current: 'current',
    VersionAtSave: 'version-at-save'
} as const;
export type GetAndAsyncConvertMacroBodyByMacroIdEmbeddedContentRenderEnum = typeof GetAndAsyncConvertMacroBodyByMacroIdEmbeddedContentRenderEnum[keyof typeof GetAndAsyncConvertMacroBodyByMacroIdEmbeddedContentRenderEnum];
/**
 * @export
 */
export const GetAndConvertMacroBodyByMacroIdEmbeddedContentRenderEnum = {
    Current: 'current',
    VersionAtSave: 'version-at-save'
} as const;
export type GetAndConvertMacroBodyByMacroIdEmbeddedContentRenderEnum = typeof GetAndConvertMacroBodyByMacroIdEmbeddedContentRenderEnum[keyof typeof GetAndConvertMacroBodyByMacroIdEmbeddedContentRenderEnum];
