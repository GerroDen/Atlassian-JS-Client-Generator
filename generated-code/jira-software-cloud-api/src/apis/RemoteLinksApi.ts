/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RemoteLinkData,
  SubmitRemoteLinks202Response,
  SubmitRemoteLinks202ResponseRejectedRemoteLinksValueInner,
  SubmitRemoteLinksRequest,
} from '../models';

export interface DeleteRemoteLinkByIdRequest {
    authorization: string;
    remoteLinkId: string;
    updateSequenceNumber?: number;
}

export interface DeleteRemoteLinksByPropertyRequest {
    authorization: string;
    updateSequenceNumber?: number;
    params?: object;
}

export interface GetRemoteLinkByIdRequest {
    authorization: string;
    remoteLinkId: string;
}

export interface SubmitRemoteLinksOperationRequest {
    authorization: string;
    submitRemoteLinksRequest: SubmitRemoteLinksRequest;
}

/**
 * 
 */
export class RemoteLinksApi extends runtime.BaseAPI {

    /**
     * Delete the Remote Link data currently stored for the given ID.  Deletion is performed asynchronously. The `getRemoteLinkById` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a Remote Link by ID
     */
    async deleteRemoteLinkByIdRaw(requestParameters: DeleteRemoteLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRemoteLinkById.');
        }

        if (requestParameters.remoteLinkId === null || requestParameters.remoteLinkId === undefined) {
            throw new runtime.RequiredError('remoteLinkId','Required parameter requestParameters.remoteLinkId was null or undefined when calling deleteRemoteLinkById.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateSequenceNumber !== undefined) {
            queryParameters['_updateSequenceNumber'] = requestParameters.updateSequenceNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/remotelinks/1.0/remotelink/{remoteLinkId}`.replace(`{${"remoteLinkId"}}`, encodeURIComponent(String(requestParameters.remoteLinkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the Remote Link data currently stored for the given ID.  Deletion is performed asynchronously. The `getRemoteLinkById` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a Remote Link by ID
     */
    async deleteRemoteLinkById(requestParameters: DeleteRemoteLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRemoteLinkByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk delete all Remote Links data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param `_updateSequenceNumber` is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the `submitRemoteLinks` operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&repoId=repo-345  Deletion is performed asynchronously. The `getRemoteLinkById` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete Remote Links by Property
     */
    async deleteRemoteLinksByPropertyRaw(requestParameters: DeleteRemoteLinksByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRemoteLinksByProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateSequenceNumber !== undefined) {
            queryParameters['_updateSequenceNumber'] = requestParameters.updateSequenceNumber;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/remotelinks/1.0/bulkByProperties`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk delete all Remote Links data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param `_updateSequenceNumber` is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the `submitRemoteLinks` operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&repoId=repo-345  Deletion is performed asynchronously. The `getRemoteLinkById` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete Remote Links by Property
     */
    async deleteRemoteLinksByProperty(requestParameters: DeleteRemoteLinksByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRemoteLinksByPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the currently stored Remote Link data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a Remote Link by ID
     */
    async getRemoteLinkByIdRaw(requestParameters: GetRemoteLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoteLinkData>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRemoteLinkById.');
        }

        if (requestParameters.remoteLinkId === null || requestParameters.remoteLinkId === undefined) {
            throw new runtime.RequiredError('remoteLinkId','Required parameter requestParameters.remoteLinkId was null or undefined when calling getRemoteLinkById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/remotelinks/1.0/remotelink/{remoteLinkId}`.replace(`{${"remoteLinkId"}}`, encodeURIComponent(String(requestParameters.remoteLinkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the currently stored Remote Link data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a Remote Link by ID
     */
    async getRemoteLinkById(requestParameters: GetRemoteLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoteLinkData> {
        const response = await this.getRemoteLinkByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update / insert Remote Link data.  Remote Links are identified by their ID, existing Remote Link data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The `getRemoteLinkById` operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Remote Links being submitted in one request, each is validated individually prior to submission. Details of which Remote LInk failed submission (if any) are available in the response object.  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit Remote Link data
     */
    async submitRemoteLinksRaw(requestParameters: SubmitRemoteLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitRemoteLinks202Response>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling submitRemoteLinks.');
        }

        if (requestParameters.submitRemoteLinksRequest === null || requestParameters.submitRemoteLinksRequest === undefined) {
            throw new runtime.RequiredError('submitRemoteLinksRequest','Required parameter requestParameters.submitRemoteLinksRequest was null or undefined when calling submitRemoteLinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/remotelinks/1.0/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.submitRemoteLinksRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update / insert Remote Link data.  Remote Links are identified by their ID, existing Remote Link data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The `getRemoteLinkById` operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Remote Links being submitted in one request, each is validated individually prior to submission. Details of which Remote LInk failed submission (if any) are available in the response object.  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit Remote Link data
     */
    async submitRemoteLinks(requestParameters: SubmitRemoteLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitRemoteLinks202Response> {
        const response = await this.submitRemoteLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
