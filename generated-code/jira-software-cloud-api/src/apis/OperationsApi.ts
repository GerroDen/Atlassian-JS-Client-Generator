/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage1,
  GetIncidentById200Response,
  GetReviewById200Response,
  OperationsWorkspaceIds,
  SubmitIncidentsRequest,
  SubmitIncidentsResponse,
  SubmitOperationsWorkspacesRequest,
  SubmitOperationsWorkspacesResponse,
} from '../models/index';

export interface DeleteEntityByPropertyRequest {
    authorization: string;
}

export interface DeleteIncidentByIdRequest {
    authorization: string;
    incidentId: string;
}

export interface DeleteReviewByIdRequest {
    authorization: string;
    reviewId: string;
}

export interface DeleteWorkspacesRequest {
    authorization: string;
}

export interface GetIncidentByIdRequest {
    authorization: string;
    incidentId: string;
}

export interface GetReviewByIdRequest {
    authorization: string;
    reviewId: string;
}

export interface GetWorkspacesRequest {
    authorization: string;
}

export interface SubmitEntityRequest {
    authorization: string;
    submitIncidentsRequest: SubmitIncidentsRequest;
}

export interface SubmitOperationsWorkspacesOperationRequest {
    authorization: string;
    submitOperationsWorkspacesRequest: SubmitOperationsWorkspacesRequest;
}

/**
 * 
 */
export class OperationsApi extends runtime.BaseAPI {

    /**
     * Bulk delete all Entties that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitEntity operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete Incidents or Review by Property
     */
    async deleteEntityByPropertyRaw(requestParameters: DeleteEntityByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteEntityByProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/bulkByProperties`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk delete all Entties that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitEntity operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete Incidents or Review by Property
     */
    async deleteEntityByProperty(requestParameters: DeleteEntityByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntityByPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the Incident data currently stored for the given ID.  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a Incident by ID
     */
    async deleteIncidentByIdRaw(requestParameters: DeleteIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteIncidentById().'
            );
        }

        if (requestParameters['incidentId'] == null) {
            throw new runtime.RequiredError(
                'incidentId',
                'Required parameter "incidentId" was null or undefined when calling deleteIncidentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/incidents/{incidentId}`.replace(`{${"incidentId"}}`, encodeURIComponent(String(requestParameters['incidentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the Incident data currently stored for the given ID.  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a Incident by ID
     */
    async deleteIncidentById(requestParameters: DeleteIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIncidentByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Delete the Review data currently stored for the given ID.  Deletion is performed asynchronously. The getReviewById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a Review by ID
     */
    async deleteReviewByIdRaw(requestParameters: DeleteReviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteReviewById().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling deleteReviewById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/post-incident-reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the Review data currently stored for the given ID.  Deletion is performed asynchronously. The getReviewById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a Review by ID
     */
    async deleteReviewById(requestParameters: DeleteReviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReviewByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk delete all Operations Workspaces that match the given request.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps.  e.g. DELETE /bulk?workspaceIds=111-222-333,444-555-666 
     * Delete Operations Workpaces by Id
     */
    async deleteWorkspacesRaw(requestParameters: DeleteWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteWorkspaces().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/linkedWorkspaces/bulk`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk delete all Operations Workspaces that match the given request.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'DELETE\' scope for Connect apps.  e.g. DELETE /bulk?workspaceIds=111-222-333,444-555-666 
     * Delete Operations Workpaces by Id
     */
    async deleteWorkspaces(requestParameters: DeleteWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkspacesRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the currently stored Incident data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a Incident by ID
     */
    async getIncidentByIdRaw(requestParameters: GetIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIncidentById200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getIncidentById().'
            );
        }

        if (requestParameters['incidentId'] == null) {
            throw new runtime.RequiredError(
                'incidentId',
                'Required parameter "incidentId" was null or undefined when calling getIncidentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/incidents/{incidentId}`.replace(`{${"incidentId"}}`, encodeURIComponent(String(requestParameters['incidentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the currently stored Incident data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a Incident by ID
     */
    async getIncidentById(requestParameters: GetIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIncidentById200Response> {
        const response = await this.getIncidentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the currently stored Review data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a Review by ID
     */
    async getReviewByIdRaw(requestParameters: GetReviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReviewById200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getReviewById().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling getReviewById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/post-incident-reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the currently stored Review data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a Review by ID
     */
    async getReviewById(requestParameters: GetReviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReviewById200Response> {
        const response = await this.getReviewByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the either all Operations Workspace IDs associated with the Jira site or a specific Operations Workspace ID for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  e.g. GET /workspace?workspaceId=111-222-333  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get all Operations Workspace IDs or a specific Operations Workspace by ID
     */
    async getWorkspacesRaw(requestParameters: GetWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationsWorkspaceIds>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getWorkspaces().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/linkedWorkspaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the either all Operations Workspace IDs associated with the Jira site or a specific Operations Workspace ID for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  e.g. GET /workspace?workspaceId=111-222-333  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get all Operations Workspace IDs or a specific Operations Workspace by ID
     */
    async getWorkspaces(requestParameters: GetWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationsWorkspaceIds> {
        const response = await this.getWorkspacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update / insert Incident or Review data.  Incidents and reviews are identified by their ID, and existing Incident and Review data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getIncidentById or getReviewById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Incidents and Reviews being submitted in one request, each is validated individually prior to submission. Details of which entities failed submission (if any) are available in the response object.  A maximum of 1000 incidents can be submitted in one request.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit Incident or Review data
     */
    async submitEntityRaw(requestParameters: SubmitEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitIncidentsResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling submitEntity().'
            );
        }

        if (requestParameters['submitIncidentsRequest'] == null) {
            throw new runtime.RequiredError(
                'submitIncidentsRequest',
                'Required parameter "submitIncidentsRequest" was null or undefined when calling submitEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submitIncidentsRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update / insert Incident or Review data.  Incidents and reviews are identified by their ID, and existing Incident and Review data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getIncidentById or getReviewById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Incidents and Reviews being submitted in one request, each is validated individually prior to submission. Details of which entities failed submission (if any) are available in the response object.  A maximum of 1000 incidents can be submitted in one request.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit Incident or Review data
     */
    async submitEntity(requestParameters: SubmitEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitIncidentsResponse> {
        const response = await this.submitEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert Operations Workspace IDs to establish a relationship between them and the Jira site the app is installed in. If a relationship between the Workspace ID and Jira already exists then the workspace ID will be ignored and Jira will process the rest of the entries.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit Operations Workspace Ids
     */
    async submitOperationsWorkspacesRaw(requestParameters: SubmitOperationsWorkspacesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitOperationsWorkspacesResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling submitOperationsWorkspaces().'
            );
        }

        if (requestParameters['submitOperationsWorkspacesRequest'] == null) {
            throw new runtime.RequiredError(
                'submitOperationsWorkspacesRequest',
                'Required parameter "submitOperationsWorkspacesRequest" was null or undefined when calling submitOperationsWorkspaces().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/rest/operations/1.0/linkedWorkspaces/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['submitOperationsWorkspacesRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Insert Operations Workspace IDs to establish a relationship between them and the Jira site the app is installed in. If a relationship between the Workspace ID and Jira already exists then the workspace ID will be ignored and Jira will process the rest of the entries.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit Operations Workspace Ids
     */
    async submitOperationsWorkspaces(requestParameters: SubmitOperationsWorkspacesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitOperationsWorkspacesResponse> {
        const response = await this.submitOperationsWorkspacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
