/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentArray,
  GetContentForSpace200Response,
  LongTask,
  Space,
  SpaceArray,
  SpaceCreate,
  SpaceUpdate,
} from '../models';

export interface CreatePrivateSpaceRequest {
    spacePrivateCreate: { [key: string]: any; };
}

export interface CreateSpaceRequest {
    body: { [key: string]: any; };
}

export interface DeleteSpaceRequest {
    spaceKey: string;
}

export interface GetContentByTypeForSpaceRequest {
    spaceKey: string;
    type: string;
    depth?: GetContentByTypeForSpaceDepthEnum;
    expand?: Array<string>;
    start?: number;
    limit?: number;
}

export interface GetContentForSpaceRequest {
    spaceKey: string;
    depth?: GetContentForSpaceDepthEnum;
    expand?: Array<string>;
    start?: number;
    limit?: number;
}

export interface GetSpaceRequest {
    spaceKey: string;
    expand?: Array<GetSpaceExpandEnum>;
}

export interface GetSpacesRequest {
    spaceKey?: Array<string>;
    spaceId?: Array<number>;
    type?: GetSpacesTypeEnum;
    status?: GetSpacesStatusEnum;
    label?: Array<string>;
    favourite?: boolean;
    favouriteUserKey?: string;
    expand?: Array<GetSpacesExpandEnum>;
    start?: number;
    limit?: number;
}

export interface UpdateSpaceRequest {
    spaceKey: string;
    body: { [key: string]: any; };
}

/**
 * 
 */
export class SpaceApi extends runtime.BaseAPI {

    /**
     * Creates a new space that is only visible to the creator. This method is the same as the [Create space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Create Space(s)\' global permission.
     * Create private space
     */
    async createPrivateSpaceRaw(requestParameters: CreatePrivateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.spacePrivateCreate === null || requestParameters.spacePrivateCreate === undefined) {
            throw new runtime.RequiredError('spacePrivateCreate','Required parameter requestParameters.spacePrivateCreate was null or undefined when calling createPrivateSpace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/_private`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.spacePrivateCreate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new space that is only visible to the creator. This method is the same as the [Create space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Create Space(s)\' global permission.
     * Create private space
     */
    async createPrivateSpace(requestParameters: CreatePrivateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Space> {
        const response = await this.createPrivateSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new space. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Create Space(s)\' global permission.
     * Create space
     */
    async createSpaceRaw(requestParameters: CreateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSpace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new space. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Create Space(s)\' global permission.
     * Create space
     */
    async createSpace(requestParameters: CreateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Space> {
        const response = await this.createSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted yet when this method has returned. Clients should poll the status link that is returned in the response until the task completes.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Delete space
     */
    async deleteSpaceRaw(requestParameters: DeleteSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LongTask>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling deleteSpace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted yet when this method has returned. Clients should poll the status link that is returned in the response until the task completes.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Delete space
     */
    async deleteSpace(requestParameters: DeleteSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LongTask> {
        const response = await this.deleteSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * Get content by type for space
     */
    async getContentByTypeForSpaceRaw(requestParameters: GetContentByTypeForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentArray>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling getContentByTypeForSpace.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getContentByTypeForSpace.');
        }

        const queryParameters: any = {};

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/content/{type}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * Get content by type for space
     */
    async getContentByTypeForSpace(requestParameters: GetContentByTypeForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentArray> {
        const response = await this.getContentByTypeForSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * Get content for space
     */
    async getContentForSpaceRaw(requestParameters: GetContentForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContentForSpace200Response>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling getContentForSpace.');
        }

        const queryParameters: any = {};

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/content`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * Get content for space
     */
    async getContentForSpace(requestParameters: GetContentForSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContentForSpace200Response> {
        const response = await this.getContentForSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space. This includes information like the name, description, and permissions, but not the content in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get space
     */
    async getSpaceRaw(requestParameters: GetSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling getSpace.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-space.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space. This includes information like the name, description, and permissions, but not the content in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get space
     */
    async getSpace(requestParameters: GetSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Space> {
        const response = await this.getSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Note, the returned list will only contain spaces that the current user has permission to view.
     * Get spaces
     */
    async getSpacesRaw(requestParameters: GetSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceArray>> {
        const queryParameters: any = {};

        if (requestParameters.spaceKey) {
            queryParameters['spaceKey'] = requestParameters.spaceKey;
        }

        if (requestParameters.spaceId) {
            queryParameters['spaceId'] = requestParameters.spaceId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.label) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.favourite !== undefined) {
            queryParameters['favourite'] = requestParameters.favourite;
        }

        if (requestParameters.favouriteUserKey !== undefined) {
            queryParameters['favouriteUserKey'] = requestParameters.favouriteUserKey;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-space.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deprecated, use [Confluence\'s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\'Can use\' global permission). Note, the returned list will only contain spaces that the current user has permission to view.
     * Get spaces
     */
    async getSpaces(requestParameters: GetSpacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceArray> {
        const response = await this.getSpacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the name, description, or homepage of a space.  -   For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead. -   Currently you cannot set space labels when updating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Update space
     */
    async updateSpaceRaw(requestParameters: UpdateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling updateSpace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateSpace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the name, description, or homepage of a space.  -   For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead. -   Currently you cannot set space labels when updating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Update space
     */
    async updateSpace(requestParameters: UpdateSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Space> {
        const response = await this.updateSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetContentByTypeForSpaceDepthEnum = {
    All: 'all',
    Root: 'root'
} as const;
export type GetContentByTypeForSpaceDepthEnum = typeof GetContentByTypeForSpaceDepthEnum[keyof typeof GetContentByTypeForSpaceDepthEnum];
/**
 * @export
 */
export const GetContentForSpaceDepthEnum = {
    All: 'all',
    Root: 'root'
} as const;
export type GetContentForSpaceDepthEnum = typeof GetContentForSpaceDepthEnum[keyof typeof GetContentForSpaceDepthEnum];
/**
 * @export
 */
export const GetSpaceExpandEnum = {
    Settings: 'settings',
    Metadata: 'metadata',
    MetadataLabels: 'metadata.labels',
    Operations: 'operations',
    LookAndFeel: 'lookAndFeel',
    Permissions: 'permissions',
    Icon: 'icon',
    Description: 'description',
    DescriptionPlain: 'description.plain',
    DescriptionView: 'description.view',
    Theme: 'theme',
    Homepage: 'homepage',
    History: 'history'
} as const;
export type GetSpaceExpandEnum = typeof GetSpaceExpandEnum[keyof typeof GetSpaceExpandEnum];
/**
 * @export
 */
export const GetSpacesTypeEnum = {
    Global: 'global',
    Personal: 'personal'
} as const;
export type GetSpacesTypeEnum = typeof GetSpacesTypeEnum[keyof typeof GetSpacesTypeEnum];
/**
 * @export
 */
export const GetSpacesStatusEnum = {
    Current: 'current',
    Archived: 'archived'
} as const;
export type GetSpacesStatusEnum = typeof GetSpacesStatusEnum[keyof typeof GetSpacesStatusEnum];
/**
 * @export
 */
export const GetSpacesExpandEnum = {
    Settings: 'settings',
    Metadata: 'metadata',
    MetadataLabels: 'metadata.labels',
    Operations: 'operations',
    LookAndFeel: 'lookAndFeel',
    Permissions: 'permissions',
    Icon: 'icon',
    Description: 'description',
    DescriptionPlain: 'description.plain',
    DescriptionView: 'description.view',
    Theme: 'theme',
    Homepage: 'homepage',
    History: 'history'
} as const;
export type GetSpacesExpandEnum = typeof GetSpacesExpandEnum[keyof typeof GetSpacesExpandEnum];
