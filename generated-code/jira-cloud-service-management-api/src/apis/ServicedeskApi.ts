/* tslint:disable */
/* eslint-disable */
/**
 * Service Management Public REST API
 * Public REST API for Jira Service Management
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-b3300bcdd36d8c214940b3035162ea6fa1d58aa8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerRequestCreateMetaDTO,
  EntityProperty,
  ErrorResponse,
  PagedDTOArticleDTO,
  PagedDTOIssueBean,
  PagedDTOQueueDTO,
  PagedDTORequestTypeDTO,
  PagedDTORequestTypeGroupDTO,
  PagedDTOServiceDeskDTO,
  PagedDTOUserDTO,
  PropertyKeys,
  QueueDTO,
  RequestTypeCreateDTO,
  RequestTypeDTO,
  ServiceDeskCustomerDTO,
  ServiceDeskDTO,
} from '../models/index';

export interface AddCustomersRequest {
    serviceDeskId: string;
    serviceDeskCustomerDTO: ServiceDeskCustomerDTO;
}

export interface AttachTemporaryFileRequest {
    serviceDeskId: string;
}

export interface CreateRequestTypeRequest {
    serviceDeskId: string;
    requestTypeCreateDTO: RequestTypeCreateDTO;
}

export interface DeletePropertyServicedeskRequest {
    serviceDeskId: string;
    requestTypeId: number;
    propertyKey: string;
}

export interface DeleteRequestTypeRequest {
    serviceDeskId: string;
    requestTypeId: number;
}

export interface GetArticlesServicedeskRequest {
    serviceDeskId: string;
    query: string;
    highlight?: boolean;
    start?: number;
    limit?: number;
}

export interface GetCustomersRequest {
    serviceDeskId: string;
    query?: string;
    start?: number;
    limit?: number;
}

export interface GetIssuesInQueueRequest {
    serviceDeskId: string;
    queueId: number;
    start?: number;
    limit?: number;
}

export interface GetPropertiesKeysServicedeskRequest {
    requestTypeId: number;
    serviceDeskId: string;
}

export interface GetPropertyServicedeskRequest {
    serviceDeskId: string;
    requestTypeId: number;
    propertyKey: string;
}

export interface GetQueueRequest {
    serviceDeskId: string;
    queueId: number;
    includeCount?: boolean;
}

export interface GetQueuesRequest {
    serviceDeskId: string;
    includeCount?: boolean;
    start?: number;
    limit?: number;
}

export interface GetRequestTypeByIdRequest {
    serviceDeskId: string;
    requestTypeId: string;
    expand?: Array<string>;
}

export interface GetRequestTypeFieldsRequest {
    serviceDeskId: string;
    requestTypeId: number;
    expand?: Array<string>;
}

export interface GetRequestTypeGroupsRequest {
    serviceDeskId: string;
    start?: number;
    limit?: number;
}

export interface GetRequestTypesRequest {
    serviceDeskId: string;
    groupId?: number;
    expand?: Array<string>;
    searchQuery?: string;
    start?: number;
    limit?: number;
    includeHiddenRequestTypesInSearch?: boolean;
    restrictionStatus?: string;
}

export interface GetServiceDeskByIdRequest {
    serviceDeskId: string;
}

export interface GetServiceDesksRequest {
    start?: number;
    limit?: number;
}

export interface RemoveCustomersRequest {
    serviceDeskId: string;
    serviceDeskCustomerDTO: ServiceDeskCustomerDTO;
}

export interface SetPropertyServicedeskRequest {
    serviceDeskId: string;
    requestTypeId: number;
    propertyKey: string;
}

/**
 * 
 */
export class ServicedeskApi extends runtime.BaseAPI {

    /**
     * Adds one or more customers to a service desk. If any of the passed customers are associated with the service desk, no changes will be made for those customers and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Service desk administrator
     * Add customers
     */
    async addCustomersRaw(requestParameters: AddCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling addCustomers().'
            );
        }

        if (requestParameters['serviceDeskCustomerDTO'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskCustomerDTO',
                'Required parameter "serviceDeskCustomerDTO" was null or undefined when calling addCustomers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/customer`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['serviceDeskCustomerDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds one or more customers to a service desk. If any of the passed customers are associated with the service desk, no changes will be made for those customers and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Service desk administrator
     * Add customers
     */
    async addCustomers(requestParameters: AddCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addCustomersRaw(requestParameters, initOverrides);
    }

    /**
     * This method adds one or more temporary attachments to a service desk, which can then be permanently attached to a customer request using [servicedeskapi/request/\\{issueIdOrKey\\}/attachment](#api-request-issueIdOrKey-attachment-post).  **Note**: It is possible for a service desk administrator to turn off the ability to add attachments to a service desk.  This method expects a multipart request. The media-type multipart/form-data is defined in RFC 1867. Most client libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components library provides [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html).  Because this method accepts multipart/form-data, it has XSRF protection on it. This means you must submit a header of X-Atlassian-Token: no-check with the request or it will be blocked.  The name of the multipart/form-data parameter that contains the attachments must be `file`.  For example, to upload a file called `myfile.txt` in the Service Desk with ID 10001 use      curl -D- -u customer:customer -X POST -H \"X-ExperimentalApi: opt-in\" -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" https://your-domain.atlassian.net/rest/servicedeskapi/servicedesk/10001/attachTemporaryFile  **[Permissions](#permissions) required**: Permission to add attachments in this Service Desk.
     * Attach temporary file
     */
    async attachTemporaryFileRaw(requestParameters: AttachTemporaryFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling attachTemporaryFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/attachTemporaryFile`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method adds one or more temporary attachments to a service desk, which can then be permanently attached to a customer request using [servicedeskapi/request/\\{issueIdOrKey\\}/attachment](#api-request-issueIdOrKey-attachment-post).  **Note**: It is possible for a service desk administrator to turn off the ability to add attachments to a service desk.  This method expects a multipart request. The media-type multipart/form-data is defined in RFC 1867. Most client libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components library provides [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html).  Because this method accepts multipart/form-data, it has XSRF protection on it. This means you must submit a header of X-Atlassian-Token: no-check with the request or it will be blocked.  The name of the multipart/form-data parameter that contains the attachments must be `file`.  For example, to upload a file called `myfile.txt` in the Service Desk with ID 10001 use      curl -D- -u customer:customer -X POST -H \"X-ExperimentalApi: opt-in\" -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" https://your-domain.atlassian.net/rest/servicedeskapi/servicedesk/10001/attachTemporaryFile  **[Permissions](#permissions) required**: Permission to add attachments in this Service Desk.
     * Attach temporary file
     */
    async attachTemporaryFile(requestParameters: AttachTemporaryFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.attachTemporaryFileRaw(requestParameters, initOverrides);
    }

    /**
     * This method enables a customer request type to be added to a service desk based on an issue type. Note that not all customer request type fields can be specified in the request and these fields are given the following default values:   *  Request type icon is given the headset icon.  *  Request type groups is left empty, which means this customer request type will not be visible on the [customer portal](https://confluence.atlassian.com/servicedeskcloud/configuring-the-customer-portal-732528918.html).  *  Request type status mapping is left empty, so the request type has no custom status mapping but inherits the status map from the issue type upon which it is based.  *  Request type field mapping is set to show the required fields as specified by the issue type used to create the customer request type.     These fields can be updated by a service desk administrator using the **Request types** option in **Project settings**.   Request Types are created in next-gen projects by creating Issue Types. Please use the Jira Cloud Platform Create issue type endpoint instead.  **[Permissions](#permissions) required**: Service desk\'s administrator
     * Create request type
     */
    async createRequestTypeRaw(requestParameters: CreateRequestTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestTypeDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling createRequestType().'
            );
        }

        if (requestParameters['requestTypeCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'requestTypeCreateDTO',
                'Required parameter "requestTypeCreateDTO" was null or undefined when calling createRequestType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:requesttype:jira-service-management", "write:requesttype:jira-service-management"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestTypeCreateDTO'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method enables a customer request type to be added to a service desk based on an issue type. Note that not all customer request type fields can be specified in the request and these fields are given the following default values:   *  Request type icon is given the headset icon.  *  Request type groups is left empty, which means this customer request type will not be visible on the [customer portal](https://confluence.atlassian.com/servicedeskcloud/configuring-the-customer-portal-732528918.html).  *  Request type status mapping is left empty, so the request type has no custom status mapping but inherits the status map from the issue type upon which it is based.  *  Request type field mapping is set to show the required fields as specified by the issue type used to create the customer request type.     These fields can be updated by a service desk administrator using the **Request types** option in **Project settings**.   Request Types are created in next-gen projects by creating Issue Types. Please use the Jira Cloud Platform Create issue type endpoint instead.  **[Permissions](#permissions) required**: Service desk\'s administrator
     * Create request type
     */
    async createRequestType(requestParameters: CreateRequestTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestTypeDTO> {
        const response = await this.createRequestTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a property from a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore can also be deleted by calling the Jira Cloud Platform [Delete issue type property](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-propertyKey-delete) endpoint.  **[Permissions](#permissions) required**: Jira project administrator with a Jira Service Management agent license.
     * Delete property
     */
    async deletePropertyRaw(requestParameters: DeletePropertyServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling deleteProperty().'
            );
        }

        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling deleteProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling deleteProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}/property/{propertyKey}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a property from a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore can also be deleted by calling the Jira Cloud Platform [Delete issue type property](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-propertyKey-delete) endpoint.  **[Permissions](#permissions) required**: Jira project administrator with a Jira Service Management agent license.
     * Delete property
     */
    async deleteProperty(requestParameters: DeletePropertyServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * This method deletes a customer request type from a service desk, and removes it from all customer requests.   This only supports classic projects.  **[Permissions](#permissions) required**: Service desk administrator.
     * Delete request type
     */
    async deleteRequestTypeRaw(requestParameters: DeleteRequestTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling deleteRequestType().'
            );
        }

        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling deleteRequestType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method deletes a customer request type from a service desk, and removes it from all customer requests.   This only supports classic projects.  **[Permissions](#permissions) required**: Service desk administrator.
     * Delete request type
     */
    async deleteRequestType(requestParameters: DeleteRequestTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRequestTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Returns articles which match the given query and belong to the knowledge base linked to the service desk.  **[Permissions](#permissions) required**: Permission to access the service desk.
     * Get articles
     */
    async getArticlesRaw(requestParameters: GetArticlesServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOArticleDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getArticles().'
            );
        }

        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getArticles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['highlight'] != null) {
            queryParameters['highlight'] = requestParameters['highlight'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:knowledgebase:jira-service-management"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/knowledgebase/article`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns articles which match the given query and belong to the knowledge base linked to the service desk.  **[Permissions](#permissions) required**: Permission to access the service desk.
     * Get articles
     */
    async getArticles(requestParameters: GetArticlesServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOArticleDTO> {
        const response = await this.getArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of the customers on a service desk.  The returned list of customers can be filtered using the `query` parameter. The parameter is matched against customers\' `displayName`, `name`, or `email`. For example, searching for \"John\", \"Jo\", \"Smi\", or \"Smith\" will match a user with display name \"John Smith\".  **[Permissions](#permissions) required**: Permission to view this Service Desk\'s customers.
     * Get customers
     */
    async getCustomersRaw(requestParameters: GetCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOUserDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getCustomers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/customer`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a list of the customers on a service desk.  The returned list of customers can be filtered using the `query` parameter. The parameter is matched against customers\' `displayName`, `name`, or `email`. For example, searching for \"John\", \"Jo\", \"Smi\", or \"Smith\" will match a user with display name \"John Smith\".  **[Permissions](#permissions) required**: Permission to view this Service Desk\'s customers.
     * Get customers
     */
    async getCustomers(requestParameters: GetCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOUserDTO> {
        const response = await this.getCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the customer requests in a queue. Only fields that the queue is configured to show are returned. For example, if a queue is configured to show description and due date, then only those two fields are returned for each customer request in the queue.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Get issues in queue
     */
    async getIssuesInQueueRaw(requestParameters: GetIssuesInQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOIssueBean>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getIssuesInQueue().'
            );
        }

        if (requestParameters['queueId'] == null) {
            throw new runtime.RequiredError(
                'queueId',
                'Required parameter "queueId" was null or undefined when calling getIssuesInQueue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/queue/{queueId}/issue`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"queueId"}}`, encodeURIComponent(String(requestParameters['queueId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns the customer requests in a queue. Only fields that the queue is configured to show are returned. For example, if a queue is configured to show description and due date, then only those two fields are returned for each customer request in the queue.  **[Permissions](#permissions) required**: Service desk\'s agent.
     * Get issues in queue
     */
    async getIssuesInQueue(requestParameters: GetIssuesInQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOIssueBean> {
        const response = await this.getIssuesInQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the keys of all properties for a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore the keys of all properties for a request type are also available by calling the Jira Cloud Platform [Get issue type property keys](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-get) endpoint.  **[Permissions](#permissions) required**: The user must have permission to view the request type.
     * Get properties keys
     */
    async getPropertiesKeysRaw(requestParameters: GetPropertiesKeysServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyKeys>> {
        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling getPropertiesKeys().'
            );
        }

        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getPropertiesKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}/property`.replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))).replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the keys of all properties for a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore the keys of all properties for a request type are also available by calling the Jira Cloud Platform [Get issue type property keys](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-get) endpoint.  **[Permissions](#permissions) required**: The user must have permission to view the request type.
     * Get properties keys
     */
    async getPropertiesKeys(requestParameters: GetPropertiesKeysServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyKeys> {
        const response = await this.getPropertiesKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the value of the property from a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore also available by calling the Jira Cloud Platform [Get issue type property](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-propertyKey-get) endpoint.  **[Permissions](#permissions) required**: User must have permission to view the request type.
     * Get property
     */
    async getPropertyRaw(requestParameters: GetPropertyServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityProperty>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getProperty().'
            );
        }

        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling getProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling getProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}/property/{propertyKey}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the value of the property from a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore also available by calling the Jira Cloud Platform [Get issue type property](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-propertyKey-get) endpoint.  **[Permissions](#permissions) required**: User must have permission to view the request type.
     * Get property
     */
    async getProperty(requestParameters: GetPropertyServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityProperty> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a specific queues in a service desk. To include a customer request count for the queue (in the `issueCount` field) in the response, set the query parameter `includeCount` to true (its default is false).  **[Permissions](#permissions) required**: service desk\'s Agent.
     * Get queue
     */
    async getQueueRaw(requestParameters: GetQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueueDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getQueue().'
            );
        }

        if (requestParameters['queueId'] == null) {
            throw new runtime.RequiredError(
                'queueId',
                'Required parameter "queueId" was null or undefined when calling getQueue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeCount'] != null) {
            queryParameters['includeCount'] = requestParameters['includeCount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/queue/{queueId}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"queueId"}}`, encodeURIComponent(String(requestParameters['queueId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a specific queues in a service desk. To include a customer request count for the queue (in the `issueCount` field) in the response, set the query parameter `includeCount` to true (its default is false).  **[Permissions](#permissions) required**: service desk\'s Agent.
     * Get queue
     */
    async getQueue(requestParameters: GetQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueueDTO> {
        const response = await this.getQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the queues in a service desk. To include a customer request count for each queue (in the `issueCount` field) in the response, set the query parameter `includeCount` to true (its default is false).  **[Permissions](#permissions) required**: service desk\'s Agent.
     * Get queues
     */
    async getQueuesRaw(requestParameters: GetQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOQueueDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getQueues().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeCount'] != null) {
            queryParameters['includeCount'] = requestParameters['includeCount'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/queue`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns the queues in a service desk. To include a customer request count for each queue (in the `issueCount` field) in the response, set the query parameter `includeCount` to true (its default is false).  **[Permissions](#permissions) required**: service desk\'s Agent.
     * Get queues
     */
    async getQueues(requestParameters: GetQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOQueueDTO> {
        const response = await this.getQueuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a customer request type from a service desk.  This operation can be accessed anonymously.  **[Permissions](#permissions) required**: Permission to access the service desk.
     * Get request type by id
     */
    async getRequestTypeByIdRaw(requestParameters: GetRequestTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestTypeDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getRequestTypeById().'
            );
        }

        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling getRequestTypeById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a customer request type from a service desk.  This operation can be accessed anonymously.  **[Permissions](#permissions) required**: Permission to access the service desk.
     * Get request type by id
     */
    async getRequestTypeById(requestParameters: GetRequestTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestTypeDTO> {
        const response = await this.getRequestTypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the fields for a service desk\'s customer request type.  Also, the following information about the user\'s permissions for the request type is returned:   *  `canRaiseOnBehalfOf` returns `true` if the user has permission to raise customer requests on behalf of other customers. Otherwise, returns `false`.  *  `canAddRequestParticipants` returns `true` if the user can add customer request participants. Otherwise, returns `false`.  **[Permissions](#permissions) required**: Permission to view the Service Desk. However, hidden fields would be visible to only Service desk\'s Administrator.
     * Get request type fields
     */
    async getRequestTypeFieldsRaw(requestParameters: GetRequestTypeFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerRequestCreateMetaDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getRequestTypeFields().'
            );
        }

        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling getRequestTypeFields().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}/field`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns the fields for a service desk\'s customer request type.  Also, the following information about the user\'s permissions for the request type is returned:   *  `canRaiseOnBehalfOf` returns `true` if the user has permission to raise customer requests on behalf of other customers. Otherwise, returns `false`.  *  `canAddRequestParticipants` returns `true` if the user can add customer request participants. Otherwise, returns `false`.  **[Permissions](#permissions) required**: Permission to view the Service Desk. However, hidden fields would be visible to only Service desk\'s Administrator.
     * Get request type fields
     */
    async getRequestTypeFields(requestParameters: GetRequestTypeFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerRequestCreateMetaDTO> {
        const response = await this.getRequestTypeFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a service desk\'s customer request type groups. Jira Service Management administrators can arrange the customer request type groups in an arbitrary order for display on the customer portal; the groups are returned in this order.  **[Permissions](#permissions) required**: Permission to view the service desk.
     * Get request type groups
     */
    async getRequestTypeGroupsRaw(requestParameters: GetRequestTypeGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTORequestTypeGroupDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getRequestTypeGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttypegroup`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a service desk\'s customer request type groups. Jira Service Management administrators can arrange the customer request type groups in an arbitrary order for display on the customer portal; the groups are returned in this order.  **[Permissions](#permissions) required**: Permission to view the service desk.
     * Get request type groups
     */
    async getRequestTypeGroups(requestParameters: GetRequestTypeGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTORequestTypeGroupDTO> {
        const response = await this.getRequestTypeGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all customer request types from a service desk. There are two parameters for filtering the returned list:   *  `groupId` which filters the results to items in the customer request type group.  *  `searchQuery` which is matched against request types\' `name` or `description`. For example, the strings \"Install\", \"Inst\", \"Equi\", or \"Equipment\" will match a request type with the *name* \"Equipment Installation Request\".  **Note:** This API by default will filter out request types hidden in the portal (i.e. request types without groups and request types where a user doesn\'t have permission) when `searchQuery` is provided, unless `includeHiddenRequestTypesInSearch` is set to true. Restricted request types will not be returned for those who aren\'t admins.  **[Permissions](#permissions) required**: Permission to access the service desk.
     * Get request types
     */
    async getRequestTypesRaw(requestParameters: GetRequestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTORequestTypeDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getRequestTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupId'] != null) {
            queryParameters['groupId'] = requestParameters['groupId'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['searchQuery'] != null) {
            queryParameters['searchQuery'] = requestParameters['searchQuery'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeHiddenRequestTypesInSearch'] != null) {
            queryParameters['includeHiddenRequestTypesInSearch'] = requestParameters['includeHiddenRequestTypesInSearch'];
        }

        if (requestParameters['restrictionStatus'] != null) {
            queryParameters['restrictionStatus'] = requestParameters['restrictionStatus'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all customer request types from a service desk. There are two parameters for filtering the returned list:   *  `groupId` which filters the results to items in the customer request type group.  *  `searchQuery` which is matched against request types\' `name` or `description`. For example, the strings \"Install\", \"Inst\", \"Equi\", or \"Equipment\" will match a request type with the *name* \"Equipment Installation Request\".  **Note:** This API by default will filter out request types hidden in the portal (i.e. request types without groups and request types where a user doesn\'t have permission) when `searchQuery` is provided, unless `includeHiddenRequestTypesInSearch` is set to true. Restricted request types will not be returned for those who aren\'t admins.  **[Permissions](#permissions) required**: Permission to access the service desk.
     * Get request types
     */
    async getRequestTypes(requestParameters: GetRequestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTORequestTypeDTO> {
        const response = await this.getRequestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a service desk. Use this method to get service desk details whenever your application component is passed a service desk ID but needs to display other service desk details.  **[Permissions](#permissions) required**: Permission to access the Service Desk. For example, being the Service Desk\'s Administrator or one of its Agents or Users.
     * Get service desk by id
     */
    async getServiceDeskByIdRaw(requestParameters: GetServiceDeskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDeskDTO>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling getServiceDeskById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns a service desk. Use this method to get service desk details whenever your application component is passed a service desk ID but needs to display other service desk details.  **[Permissions](#permissions) required**: Permission to access the Service Desk. For example, being the Service Desk\'s Administrator or one of its Agents or Users.
     * Get service desk by id
     */
    async getServiceDeskById(requestParameters: GetServiceDeskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDeskDTO> {
        const response = await this.getServiceDeskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns all the service desks in the Jira Service Management instance that the user has permission to access. Use this method where you need a list of service desks or need to locate a service desk by name or keyword.  **Note:** This method will be slow if the instance has hundreds of service desks. If you want to fetch a single service desk by its ID, use [/rest/servicedeskapi/servicedesk/\\{serviceDeskId\\}](./#api-rest-servicedeskapi-servicedesk-servicedeskid-get) instead.  **[Permissions](#permissions) required**: Any
     * Get service desks
     */
    async getServiceDesksRaw(requestParameters: GetServiceDesksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedDTOServiceDeskDTO>> {
        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:servicedesk-request"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This method returns all the service desks in the Jira Service Management instance that the user has permission to access. Use this method where you need a list of service desks or need to locate a service desk by name or keyword.  **Note:** This method will be slow if the instance has hundreds of service desks. If you want to fetch a single service desk by its ID, use [/rest/servicedeskapi/servicedesk/\\{serviceDeskId\\}](./#api-rest-servicedeskapi-servicedesk-servicedeskid-get) instead.  **[Permissions](#permissions) required**: Any
     * Get service desks
     */
    async getServiceDesks(requestParameters: GetServiceDesksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedDTOServiceDeskDTO> {
        const response = await this.getServiceDesksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method removes one or more customers from a service desk. The service desk must have closed access. If any of the passed customers are not associated with the service desk, no changes will be made for those customers and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Services desk administrator
     * Remove customers
     */
    async removeCustomersRaw(requestParameters: RemoveCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling removeCustomers().'
            );
        }

        if (requestParameters['serviceDeskCustomerDTO'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskCustomerDTO',
                'Required parameter "serviceDeskCustomerDTO" was null or undefined when calling removeCustomers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:servicedesk-customer"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/customer`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['serviceDeskCustomerDTO'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method removes one or more customers from a service desk. The service desk must have closed access. If any of the passed customers are not associated with the service desk, no changes will be made for those customers and the resource returns a 204 success code.  **[Permissions](#permissions) required**: Services desk administrator
     * Remove customers
     */
    async removeCustomers(requestParameters: RemoveCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeCustomersRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the value of a request type property. Use this resource to store custom data against a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore can also be set by calling the Jira Cloud Platform [Set issue type property](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-propertyKey-put) endpoint.  **[Permissions](#permissions) required**: Jira project administrator with a Jira Service Management agent license.
     * Set property
     */
    async setPropertyRaw(requestParameters: SetPropertyServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serviceDeskId'] == null) {
            throw new runtime.RequiredError(
                'serviceDeskId',
                'Required parameter "serviceDeskId" was null or undefined when calling setProperty().'
            );
        }

        if (requestParameters['requestTypeId'] == null) {
            throw new runtime.RequiredError(
                'requestTypeId',
                'Required parameter "requestTypeId" was null or undefined when calling setProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling setProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        const response = await this.request({
            path: `/rest/servicedeskapi/servicedesk/{serviceDeskId}/requesttype/{requestTypeId}/property/{propertyKey}`.replace(`{${"serviceDeskId"}}`, encodeURIComponent(String(requestParameters['serviceDeskId']))).replace(`{${"requestTypeId"}}`, encodeURIComponent(String(requestParameters['requestTypeId']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sets the value of a request type property. Use this resource to store custom data against a request type.  Properties for a Request Type in next-gen are stored as Issue Type properties and therefore can also be set by calling the Jira Cloud Platform [Set issue type property](https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-rest-api-3-issuetype-issueTypeId-properties-propertyKey-put) endpoint.  **[Permissions](#permissions) required**: Jira project administrator with a Jira Service Management agent license.
     * Set property
     */
    async setProperty(requestParameters: SetPropertyServicedeskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
