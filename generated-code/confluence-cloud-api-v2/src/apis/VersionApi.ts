/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DetailedVersion,
  MultiEntityResultVersion,
  MultiEntityResultVersion1,
  MultiEntityResultVersion2,
  MultiEntityResultVersion3,
  MultiEntityResultVersion4,
  PrimaryBodyRepresentation,
  VersionSortOrder,
} from '../models';

export interface GetAttachmentVersionDetailsRequest {
    attachmentId: string;
    versionNumber: number;
}

export interface GetAttachmentVersionsRequest {
    id: string;
    cursor?: string;
    limit?: number;
    sort?: VersionSortOrder;
}

export interface GetBlogPostVersionDetailsRequest {
    blogpostId: number;
    versionNumber: number;
}

export interface GetBlogPostVersionsRequest {
    id: number;
    bodyFormat?: PrimaryBodyRepresentation;
    cursor?: string;
    limit?: number;
    sort?: VersionSortOrder;
}

export interface GetCustomContentVersionDetailsRequest {
    customContentId: number;
    versionNumber: number;
}

export interface GetCustomContentVersionsRequest {
    customContentId: number;
    bodyFormat?: PrimaryBodyRepresentation;
    cursor?: string;
    limit?: number;
    sort?: VersionSortOrder;
}

export interface GetFooterCommentVersionDetailsRequest {
    id: number;
    versionNumber: number;
}

export interface GetFooterCommentVersionsRequest {
    id: number;
    bodyFormat?: PrimaryBodyRepresentation;
    cursor?: string;
    limit?: number;
    sort?: VersionSortOrder;
}

export interface GetInlineCommentVersionDetailsRequest {
    id: number;
    versionNumber: number;
}

export interface GetInlineCommentVersionsRequest {
    id: number;
    bodyFormat?: PrimaryBodyRepresentation;
    cursor?: string;
    limit?: number;
    sort?: VersionSortOrder;
}

export interface GetPageVersionDetailsRequest {
    pageId: number;
    versionNumber: number;
}

export interface GetPageVersionsRequest {
    id: number;
    bodyFormat?: PrimaryBodyRepresentation;
    cursor?: string;
    limit?: number;
    sort?: VersionSortOrder;
}

/**
 * 
 */
export class VersionApi extends runtime.BaseAPI {

    /**
     * Retrieves version details for the specified attachment and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
     * Get version details for attachment version
     */
    async getAttachmentVersionDetailsRaw(requestParameters: GetAttachmentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedVersion>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling getAttachmentVersionDetails.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling getAttachmentVersionDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{attachment-id}/versions/{version-number}`.replace(`{${"attachment-id"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"version-number"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves version details for the specified attachment and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
     * Get version details for attachment version
     */
    async getAttachmentVersionDetails(requestParameters: GetAttachmentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedVersion> {
        const response = await this.getAttachmentVersionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the versions of specific attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment and its corresponding space.
     * Get attachment versions
     */
    async getAttachmentVersionsRaw(requestParameters: GetAttachmentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultVersion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAttachmentVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:attachment:confluence"]);
        }

        const response = await this.request({
            path: `/attachments/{id}/versions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the versions of specific attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment and its corresponding space.
     * Get attachment versions
     */
    async getAttachmentVersions(requestParameters: GetAttachmentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultVersion> {
        const response = await this.getAttachmentVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves version details for the specified blog post and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
     * Get version details for blog post version
     */
    async getBlogPostVersionDetailsRaw(requestParameters: GetBlogPostVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedVersion>> {
        if (requestParameters.blogpostId === null || requestParameters.blogpostId === undefined) {
            throw new runtime.RequiredError('blogpostId','Required parameter requestParameters.blogpostId was null or undefined when calling getBlogPostVersionDetails.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling getBlogPostVersionDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{blogpost-id}/versions/{version-number}`.replace(`{${"blogpost-id"}}`, encodeURIComponent(String(requestParameters.blogpostId))).replace(`{${"version-number"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves version details for the specified blog post and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
     * Get version details for blog post version
     */
    async getBlogPostVersionDetails(requestParameters: GetBlogPostVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedVersion> {
        const response = await this.getBlogPostVersionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the versions of specific blog post.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post and its corresponding space.
     * Get blog post versions
     */
    async getBlogPostVersionsRaw(requestParameters: GetBlogPostVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultVersion1>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBlogPostVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.bodyFormat !== undefined) {
            queryParameters['body-format'] = requestParameters.bodyFormat;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/blogposts/{id}/versions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the versions of specific blog post.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post and its corresponding space.
     * Get blog post versions
     */
    async getBlogPostVersions(requestParameters: GetBlogPostVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultVersion1> {
        const response = await this.getBlogPostVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves version details for the specified custom content and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get version details for custom content version
     */
    async getCustomContentVersionDetailsRaw(requestParameters: GetCustomContentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedVersion>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling getCustomContentVersionDetails.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling getCustomContentVersionDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/versions/{version-number}`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))).replace(`{${"version-number"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves version details for the specified custom content and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get version details for custom content version
     */
    async getCustomContentVersionDetails(requestParameters: GetCustomContentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedVersion> {
        const response = await this.getCustomContentVersionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the versions of specific custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the custom content and its corresponding page and space.
     * Get custom content versions
     */
    async getCustomContentVersionsRaw(requestParameters: GetCustomContentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultVersion3>> {
        if (requestParameters.customContentId === null || requestParameters.customContentId === undefined) {
            throw new runtime.RequiredError('customContentId','Required parameter requestParameters.customContentId was null or undefined when calling getCustomContentVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.bodyFormat !== undefined) {
            queryParameters['body-format'] = requestParameters.bodyFormat;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:custom-content:confluence"]);
        }

        const response = await this.request({
            path: `/custom-content/{custom-content-id}/versions`.replace(`{${"custom-content-id"}}`, encodeURIComponent(String(requestParameters.customContentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the versions of specific custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the custom content and its corresponding page and space.
     * Get custom content versions
     */
    async getCustomContentVersions(requestParameters: GetCustomContentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultVersion3> {
        const response = await this.getCustomContentVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves version details for the specified footer comment version.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get version details for footer comment version
     */
    async getFooterCommentVersionDetailsRaw(requestParameters: GetFooterCommentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedVersion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFooterCommentVersionDetails.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling getFooterCommentVersionDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence"]);
        }

        const response = await this.request({
            path: `/footer-comments/{id}/versions/{version-number}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version-number"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves version details for the specified footer comment version.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get version details for footer comment version
     */
    async getFooterCommentVersionDetails(requestParameters: GetFooterCommentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedVersion> {
        const response = await this.getFooterCommentVersionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the versions of the specified footer comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get footer comment versions
     */
    async getFooterCommentVersionsRaw(requestParameters: GetFooterCommentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultVersion4>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFooterCommentVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.bodyFormat !== undefined) {
            queryParameters['body-format'] = requestParameters.bodyFormat;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence"]);
        }

        const response = await this.request({
            path: `/footer-comments/{id}/versions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the versions of the specified footer comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get footer comment versions
     */
    async getFooterCommentVersions(requestParameters: GetFooterCommentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultVersion4> {
        const response = await this.getFooterCommentVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves version details for the specified inline comment version.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get version details for inline comment version
     */
    async getInlineCommentVersionDetailsRaw(requestParameters: GetInlineCommentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedVersion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInlineCommentVersionDetails.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling getInlineCommentVersionDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence"]);
        }

        const response = await this.request({
            path: `/inline-comments/{id}/versions/{version-number}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version-number"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves version details for the specified inline comment version.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get version details for inline comment version
     */
    async getInlineCommentVersionDetails(requestParameters: GetInlineCommentVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedVersion> {
        const response = await this.getInlineCommentVersionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the versions of the specified inline comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get inline comment versions
     */
    async getInlineCommentVersionsRaw(requestParameters: GetInlineCommentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultVersion4>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInlineCommentVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.bodyFormat !== undefined) {
            queryParameters['body-format'] = requestParameters.bodyFormat;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:comment:confluence"]);
        }

        const response = await this.request({
            path: `/inline-comments/{id}/versions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the versions of the specified inline comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
     * Get inline comment versions
     */
    async getInlineCommentVersions(requestParameters: GetInlineCommentVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultVersion4> {
        const response = await this.getInlineCommentVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves version details for the specified page and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get version details for page version
     */
    async getPageVersionDetailsRaw(requestParameters: GetPageVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedVersion>> {
        if (requestParameters.pageId === null || requestParameters.pageId === undefined) {
            throw new runtime.RequiredError('pageId','Required parameter requestParameters.pageId was null or undefined when calling getPageVersionDetails.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling getPageVersionDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{page-id}/versions/{version-number}`.replace(`{${"page-id"}}`, encodeURIComponent(String(requestParameters.pageId))).replace(`{${"version-number"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves version details for the specified page and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
     * Get version details for page version
     */
    async getPageVersionDetails(requestParameters: GetPageVersionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedVersion> {
        const response = await this.getPageVersionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the versions of specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page and its corresponding space.
     * Get page versions
     */
    async getPageVersionsRaw(requestParameters: GetPageVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiEntityResultVersion2>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPageVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.bodyFormat !== undefined) {
            queryParameters['body-format'] = requestParameters.bodyFormat;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:page:confluence"]);
        }

        const response = await this.request({
            path: `/pages/{id}/versions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the versions of specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page and its corresponding space.
     * Get page versions
     */
    async getPageVersions(requestParameters: GetPageVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiEntityResultVersion2> {
        const response = await this.getPageVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
