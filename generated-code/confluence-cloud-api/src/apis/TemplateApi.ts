/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlueprintTemplateArray,
  ContentTemplate,
  ContentTemplateArray,
  ContentTemplateCreate,
  ContentTemplateUpdate,
} from '../models';

export interface CreateContentTemplateRequest {
    body: { [key: string]: any; };
}

export interface GetBlueprintTemplatesRequest {
    spaceKey?: string;
    start?: number;
    limit?: number;
    expand?: Array<GetBlueprintTemplatesExpandEnum>;
}

export interface GetContentTemplateRequest {
    contentTemplateId: string;
}

export interface GetContentTemplatesRequest {
    spaceKey?: string;
    start?: number;
    limit?: number;
    expand?: Array<GetContentTemplatesExpandEnum>;
}

export interface RemoveTemplateRequest {
    contentTemplateId: string;
}

export interface UpdateContentTemplateRequest {
    body: { [key: string]: any; };
}

/**
 * 
 */
export class TemplateApi extends runtime.BaseAPI {

    /**
     * Creates a new content template. Note, blueprint templates cannot be created via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space to create a space template or \'Confluence Administrator\' global permission to create a global template.
     * Create content template
     */
    async createContentTemplateRaw(requestParameters: CreateContentTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTemplate>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createContentTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new content template. Note, blueprint templates cannot be created via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space to create a space template or \'Confluence Administrator\' global permission to create a global template.
     * Create content template
     */
    async createContentTemplate(requestParameters: CreateContentTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTemplate> {
        const response = await this.createContentTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all templates provided by blueprints. Use this method to retrieve all global blueprint templates or all blueprint templates in a space.  Note, all global blueprints are inherited by each space. Space blueprints can be customised without affecting the global blueprints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space to view blueprints for the space and permission to access the Confluence site (\'Can use\' global permission) to view global blueprints.
     * Get blueprint templates
     */
    async getBlueprintTemplatesRaw(requestParameters: GetBlueprintTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlueprintTemplateArray>> {
        const queryParameters: any = {};

        if (requestParameters.spaceKey !== undefined) {
            queryParameters['spaceKey'] = requestParameters.spaceKey;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/template/blueprint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all templates provided by blueprints. Use this method to retrieve all global blueprint templates or all blueprint templates in a space.  Note, all global blueprints are inherited by each space. Space blueprints can be customised without affecting the global blueprints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space to view blueprints for the space and permission to access the Confluence site (\'Can use\' global permission) to view global blueprints.
     * Get blueprint templates
     */
    async getBlueprintTemplates(requestParameters: GetBlueprintTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlueprintTemplateArray> {
        const response = await this.getBlueprintTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a content template. This includes information about template, like the name, the space or blueprint that the template is in, the body of the template, and more.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space to view space templates and permission to access the Confluence site (\'Can use\' global permission) to view global templates.
     * Get content template
     */
    async getContentTemplateRaw(requestParameters: GetContentTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTemplate>> {
        if (requestParameters.contentTemplateId === null || requestParameters.contentTemplateId === undefined) {
            throw new runtime.RequiredError('contentTemplateId','Required parameter requestParameters.contentTemplateId was null or undefined when calling getContentTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/template/{contentTemplateId}`.replace(`{${"contentTemplateId"}}`, encodeURIComponent(String(requestParameters.contentTemplateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a content template. This includes information about template, like the name, the space or blueprint that the template is in, the body of the template, and more.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space to view space templates and permission to access the Confluence site (\'Can use\' global permission) to view global templates.
     * Get content template
     */
    async getContentTemplate(requestParameters: GetContentTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTemplate> {
        const response = await this.getContentTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all content templates. Use this method to retrieve all global content templates or all content templates in a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space to view space templates and permission to access the Confluence site (\'Can use\' global permission) to view global templates.
     * Get content templates
     */
    async getContentTemplatesRaw(requestParameters: GetContentTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTemplateArray>> {
        const queryParameters: any = {};

        if (requestParameters.spaceKey !== undefined) {
            queryParameters['spaceKey'] = requestParameters.spaceKey;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/template/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all content templates. Use this method to retrieve all global content templates or all content templates in a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space to view space templates and permission to access the Confluence site (\'Can use\' global permission) to view global templates.
     * Get content templates
     */
    async getContentTemplates(requestParameters: GetContentTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTemplateArray> {
        const response = await this.getContentTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a template. This results in different actions depending on the type of template:  - If the template is a content template, it is deleted. - If the template is a modified space-level blueprint template, it reverts to the template inherited from the global-level blueprint template. - If the template is a modified global-level blueprint template, it reverts to the default global-level blueprint template.   Note, unmodified blueprint templates cannot be deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:         \'Admin\' permission for the space to delete a space template or \'Confluence Administrator\'         global permission to delete a global template.
     * Remove template
     */
    async removeTemplateRaw(requestParameters: RemoveTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentTemplateId === null || requestParameters.contentTemplateId === undefined) {
            throw new runtime.RequiredError('contentTemplateId','Required parameter requestParameters.contentTemplateId was null or undefined when calling removeTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/template/{contentTemplateId}`.replace(`{${"contentTemplateId"}}`, encodeURIComponent(String(requestParameters.contentTemplateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a template. This results in different actions depending on the type of template:  - If the template is a content template, it is deleted. - If the template is a modified space-level blueprint template, it reverts to the template inherited from the global-level blueprint template. - If the template is a modified global-level blueprint template, it reverts to the default global-level blueprint template.   Note, unmodified blueprint templates cannot be deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:         \'Admin\' permission for the space to delete a space template or \'Confluence Administrator\'         global permission to delete a global template.
     * Remove template
     */
    async removeTemplate(requestParameters: RemoveTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a content template. Note, blueprint templates cannot be updated via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space to update a space template or \'Confluence Administrator\' global permission to update a global template.
     * Update content template
     */
    async updateContentTemplateRaw(requestParameters: UpdateContentTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTemplate>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateContentTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/template`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a content template. Note, blueprint templates cannot be updated via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space to update a space template or \'Confluence Administrator\' global permission to update a global template.
     * Update content template
     */
    async updateContentTemplate(requestParameters: UpdateContentTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTemplate> {
        const response = await this.updateContentTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetBlueprintTemplatesExpandEnum = {
    Body: 'body'
} as const;
export type GetBlueprintTemplatesExpandEnum = typeof GetBlueprintTemplatesExpandEnum[keyof typeof GetBlueprintTemplatesExpandEnum];
/**
 * @export
 */
export const GetContentTemplatesExpandEnum = {
    Body: 'body'
} as const;
export type GetContentTemplatesExpandEnum = typeof GetContentTemplatesExpandEnum[keyof typeof GetContentTemplatesExpandEnum];
