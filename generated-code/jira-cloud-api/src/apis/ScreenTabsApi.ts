/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ScreenableTab,
} from '../models';

export interface AddScreenTabRequest {
    screenId: number;
    screenableTab: ScreenableTab;
}

export interface DeleteScreenTabRequest {
    screenId: number;
    tabId: number;
}

export interface GetAllScreenTabsRequest {
    screenId: number;
    projectKey?: string;
}

export interface GetBulkScreenTabsRequest {
    screenId?: Array<number>;
    tabId?: Array<number>;
    startAt?: number;
    maxResult?: number;
}

export interface MoveScreenTabRequest {
    screenId: number;
    tabId: number;
    pos: number;
}

export interface RenameScreenTabRequest {
    screenId: number;
    tabId: number;
    screenableTab: ScreenableTab;
}

/**
 * 
 */
export class ScreenTabsApi extends runtime.BaseAPI {

    /**
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create screen tab
     */
    async addScreenTabRaw(requestParameters: AddScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenableTab>> {
        if (requestParameters.screenId === null || requestParameters.screenId === undefined) {
            throw new runtime.RequiredError('screenId','Required parameter requestParameters.screenId was null or undefined when calling addScreenTab.');
        }

        if (requestParameters.screenableTab === null || requestParameters.screenableTab === undefined) {
            throw new runtime.RequiredError('screenableTab','Required parameter requestParameters.screenableTab was null or undefined when calling addScreenTab.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters.screenId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.screenableTab,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create screen tab
     */
    async addScreenTab(requestParameters: AddScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenableTab> {
        const response = await this.addScreenTabRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete screen tab
     */
    async deleteScreenTabRaw(requestParameters: DeleteScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.screenId === null || requestParameters.screenId === undefined) {
            throw new runtime.RequiredError('screenId','Required parameter requestParameters.screenId was null or undefined when calling deleteScreenTab.');
        }

        if (requestParameters.tabId === null || requestParameters.tabId === undefined) {
            throw new runtime.RequiredError('tabId','Required parameter requestParameters.tabId was null or undefined when calling deleteScreenTab.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters.screenId))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters.tabId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete screen tab
     */
    async deleteScreenTab(requestParameters: DeleteScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteScreenTabRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * Get all screen tabs
     */
    async getAllScreenTabsRaw(requestParameters: GetAllScreenTabsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScreenableTab>>> {
        if (requestParameters.screenId === null || requestParameters.screenId === undefined) {
            throw new runtime.RequiredError('screenId','Required parameter requestParameters.screenId was null or undefined when calling getAllScreenTabs.');
        }

        const queryParameters: any = {};

        if (requestParameters.projectKey !== undefined) {
            queryParameters['projectKey'] = requestParameters.projectKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters.screenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * Get all screen tabs
     */
    async getAllScreenTabs(requestParameters: GetAllScreenTabsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScreenableTab>> {
        const response = await this.getAllScreenTabsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of tabs for a bulk of screens.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get bulk screen tabs
     */
    async getBulkScreenTabsRaw(requestParameters: GetBulkScreenTabsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.screenId) {
            queryParameters['screenId'] = requestParameters.screenId;
        }

        if (requestParameters.tabId) {
            queryParameters['tabId'] = requestParameters.tabId;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResult !== undefined) {
            queryParameters['maxResult'] = requestParameters.maxResult;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/tabs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the list of tabs for a bulk of screens.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get bulk screen tabs
     */
    async getBulkScreenTabs(requestParameters: GetBulkScreenTabsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBulkScreenTabsRaw(requestParameters, initOverrides);
    }

    /**
     * Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Move screen tab
     */
    async moveScreenTabRaw(requestParameters: MoveScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.screenId === null || requestParameters.screenId === undefined) {
            throw new runtime.RequiredError('screenId','Required parameter requestParameters.screenId was null or undefined when calling moveScreenTab.');
        }

        if (requestParameters.tabId === null || requestParameters.tabId === undefined) {
            throw new runtime.RequiredError('tabId','Required parameter requestParameters.tabId was null or undefined when calling moveScreenTab.');
        }

        if (requestParameters.pos === null || requestParameters.pos === undefined) {
            throw new runtime.RequiredError('pos','Required parameter requestParameters.pos was null or undefined when calling moveScreenTab.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters.screenId))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters.tabId))).replace(`{${"pos"}}`, encodeURIComponent(String(requestParameters.pos))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Move screen tab
     */
    async moveScreenTab(requestParameters: MoveScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.moveScreenTabRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update screen tab
     */
    async renameScreenTabRaw(requestParameters: RenameScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenableTab>> {
        if (requestParameters.screenId === null || requestParameters.screenId === undefined) {
            throw new runtime.RequiredError('screenId','Required parameter requestParameters.screenId was null or undefined when calling renameScreenTab.');
        }

        if (requestParameters.tabId === null || requestParameters.tabId === undefined) {
            throw new runtime.RequiredError('tabId','Required parameter requestParameters.tabId was null or undefined when calling renameScreenTab.');
        }

        if (requestParameters.screenableTab === null || requestParameters.screenableTab === undefined) {
            throw new runtime.RequiredError('screenableTab','Required parameter requestParameters.screenableTab was null or undefined when calling renameScreenTab.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters.screenId))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters.tabId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.screenableTab,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update screen tab
     */
    async renameScreenTab(requestParameters: RenameScreenTabRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenableTab> {
        const response = await this.renameScreenTabRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
