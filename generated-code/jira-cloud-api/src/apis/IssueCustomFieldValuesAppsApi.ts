/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomFieldValueUpdateDetails,
  MultipleCustomFieldValuesUpdateDetails,
} from '../models';

export interface UpdateCustomFieldValueRequest {
    fieldIdOrKey: string;
    customFieldValueUpdateDetails: CustomFieldValueUpdateDetails;
    generateChangelog?: boolean;
}

export interface UpdateMultipleCustomFieldValuesRequest {
    multipleCustomFieldValuesUpdateDetails: MultipleCustomFieldValuesUpdateDetails;
    generateChangelog?: boolean;
}

/**
 * 
 */
export class IssueCustomFieldValuesAppsApi extends runtime.BaseAPI {

    /**
     * Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * Update custom field value
     */
    async updateCustomFieldValueRaw(requestParameters: UpdateCustomFieldValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.fieldIdOrKey === null || requestParameters.fieldIdOrKey === undefined) {
            throw new runtime.RequiredError('fieldIdOrKey','Required parameter requestParameters.fieldIdOrKey was null or undefined when calling updateCustomFieldValue.');
        }

        if (requestParameters.customFieldValueUpdateDetails === null || requestParameters.customFieldValueUpdateDetails === undefined) {
            throw new runtime.RequiredError('customFieldValueUpdateDetails','Required parameter requestParameters.customFieldValueUpdateDetails was null or undefined when calling updateCustomFieldValue.');
        }

        const queryParameters: any = {};

        if (requestParameters.generateChangelog !== undefined) {
            queryParameters['generateChangelog'] = requestParameters.generateChangelog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/app/field/{fieldIdOrKey}/value`.replace(`{${"fieldIdOrKey"}}`, encodeURIComponent(String(requestParameters.fieldIdOrKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customFieldValueUpdateDetails,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * Update custom field value
     */
    async updateCustomFieldValue(requestParameters: UpdateCustomFieldValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateCustomFieldValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * Update custom fields
     */
    async updateMultipleCustomFieldValuesRaw(requestParameters: UpdateMultipleCustomFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.multipleCustomFieldValuesUpdateDetails === null || requestParameters.multipleCustomFieldValuesUpdateDetails === undefined) {
            throw new runtime.RequiredError('multipleCustomFieldValuesUpdateDetails','Required parameter requestParameters.multipleCustomFieldValuesUpdateDetails was null or undefined when calling updateMultipleCustomFieldValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.generateChangelog !== undefined) {
            queryParameters['generateChangelog'] = requestParameters.generateChangelog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/app/field/value`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.multipleCustomFieldValuesUpdateDetails,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * Update custom fields
     */
    async updateMultipleCustomFieldValues(requestParameters: UpdateMultipleCustomFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateMultipleCustomFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
