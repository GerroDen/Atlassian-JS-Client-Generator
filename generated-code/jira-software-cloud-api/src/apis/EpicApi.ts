/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MoveIssuesToBacklogRequest,
  PartiallyUpdateEpicRequest,
  RankEpicsRequest,
} from '../models/index';

export interface GetEpicRequest {
    epicIdOrKey: string;
}

export interface GetIssuesForEpicRequest {
    epicIdOrKey: string;
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface GetIssuesWithoutEpicRequest {
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface MoveIssuesToEpicRequest {
    epicIdOrKey: string;
    moveIssuesToBacklogRequest: MoveIssuesToBacklogRequest;
}

export interface PartiallyUpdateEpicOperationRequest {
    epicIdOrKey: string;
    partiallyUpdateEpicRequest: PartiallyUpdateEpicRequest;
}

export interface RankEpicsOperationRequest {
    epicIdOrKey: string;
    rankEpicsRequest: RankEpicsRequest;
}

export interface RemoveIssuesFromEpicRequest {
    moveIssuesToBacklogRequest: MoveIssuesToBacklogRequest;
}

/**
 * 
 */
export class EpicApi extends runtime.BaseAPI {

    /**
     * Returns the epic for a given epic ID. This epic will only be returned if the user has permission to view it. **Note:** This operation does not work for epics in next-gen projects.
     * Get epic
     */
    async getEpicRaw(requestParameters: GetEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['epicIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'epicIdOrKey',
                'Required parameter "epicIdOrKey" was null or undefined when calling getEpic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/{epicIdOrKey}`.replace(`{${"epicIdOrKey"}}`, encodeURIComponent(String(requestParameters['epicIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the epic for a given epic ID. This epic will only be returned if the user has permission to view it. **Note:** This operation does not work for epics in next-gen projects.
     * Get epic
     */
    async getEpic(requestParameters: GetEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getEpicRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all issues that belong to the epic, for the given epic ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the `parent` clause. For more information on the `parent` JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * Get issues for epic
     */
    async getIssuesForEpicRaw(requestParameters: GetIssuesForEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['epicIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'epicIdOrKey',
                'Required parameter "epicIdOrKey" was null or undefined when calling getIssuesForEpic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['jql'] != null) {
            queryParameters['jql'] = requestParameters['jql'];
        }

        if (requestParameters['validateQuery'] != null) {
            queryParameters['validateQuery'] = requestParameters['validateQuery'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/{epicIdOrKey}/issue`.replace(`{${"epicIdOrKey"}}`, encodeURIComponent(String(requestParameters['epicIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all issues that belong to the epic, for the given epic ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the `parent` clause. For more information on the `parent` JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * Get issues for epic
     */
    async getIssuesForEpic(requestParameters: GetIssuesForEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getIssuesForEpicRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that don\'t belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the `parent is empty` clause. For more information on the `parent` JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * Get issues without epic
     */
    async getIssuesWithoutEpicRaw(requestParameters: GetIssuesWithoutEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['jql'] != null) {
            queryParameters['jql'] = requestParameters['jql'];
        }

        if (requestParameters['validateQuery'] != null) {
            queryParameters['validateQuery'] = requestParameters['validateQuery'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/none/issue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank. **Note:** If you are querying a next-gen project, do not use this operation. Instead, search for issues that don\'t belong to an epic by using the [Search for issues using JQL](https://developer.atlassian.com/cloud/jira/platform/rest/v2/#api-rest-api-2-search-get) operation in the Jira platform REST API. Build your JQL query using the `parent is empty` clause. For more information on the `parent` JQL field, see [Advanced searching](https://confluence.atlassian.com/x/dAiiLQ#Advancedsearching-fieldsreference-Parent).
     * Get issues without epic
     */
    async getIssuesWithoutEpic(requestParameters: GetIssuesWithoutEpicRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getIssuesWithoutEpicRaw(requestParameters, initOverrides);
    }

    /**
     * Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects.
     * Move issues to epic
     */
    async moveIssuesToEpicRaw(requestParameters: MoveIssuesToEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['epicIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'epicIdOrKey',
                'Required parameter "epicIdOrKey" was null or undefined when calling moveIssuesToEpic().'
            );
        }

        if (requestParameters['moveIssuesToBacklogRequest'] == null) {
            throw new runtime.RequiredError(
                'moveIssuesToBacklogRequest',
                'Required parameter "moveIssuesToBacklogRequest" was null or undefined when calling moveIssuesToEpic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/{epicIdOrKey}/issue`.replace(`{${"epicIdOrKey"}}`, encodeURIComponent(String(requestParameters['epicIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['moveIssuesToBacklogRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects.
     * Move issues to epic
     */
    async moveIssuesToEpic(requestParameters: MoveIssuesToEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.moveIssuesToEpicRaw(requestParameters, initOverrides);
    }

    /**
     * Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are `color_1` to `color_9`. **Note:** This operation does not work for epics in next-gen projects.
     * Partially update epic
     */
    async partiallyUpdateEpicRaw(requestParameters: PartiallyUpdateEpicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['epicIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'epicIdOrKey',
                'Required parameter "epicIdOrKey" was null or undefined when calling partiallyUpdateEpic().'
            );
        }

        if (requestParameters['partiallyUpdateEpicRequest'] == null) {
            throw new runtime.RequiredError(
                'partiallyUpdateEpicRequest',
                'Required parameter "partiallyUpdateEpicRequest" was null or undefined when calling partiallyUpdateEpic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/{epicIdOrKey}`.replace(`{${"epicIdOrKey"}}`, encodeURIComponent(String(requestParameters['epicIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['partiallyUpdateEpicRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are `color_1` to `color_9`. **Note:** This operation does not work for epics in next-gen projects.
     * Partially update epic
     */
    async partiallyUpdateEpic(requestParameters: PartiallyUpdateEpicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partiallyUpdateEpicRaw(requestParameters, initOverrides);
    }

    /**
     * Moves (ranks) an epic before or after a given epic.  If rankCustomFieldId is not defined, the default rank field will be used.  **Note:** This operation does not work for epics in next-gen projects.
     * Rank epics
     */
    async rankEpicsRaw(requestParameters: RankEpicsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['epicIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'epicIdOrKey',
                'Required parameter "epicIdOrKey" was null or undefined when calling rankEpics().'
            );
        }

        if (requestParameters['rankEpicsRequest'] == null) {
            throw new runtime.RequiredError(
                'rankEpicsRequest',
                'Required parameter "rankEpicsRequest" was null or undefined when calling rankEpics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/{epicIdOrKey}/rank`.replace(`{${"epicIdOrKey"}}`, encodeURIComponent(String(requestParameters['epicIdOrKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['rankEpicsRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moves (ranks) an epic before or after a given epic.  If rankCustomFieldId is not defined, the default rank field will be used.  **Note:** This operation does not work for epics in next-gen projects.
     * Rank epics
     */
    async rankEpics(requestParameters: RankEpicsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rankEpicsRaw(requestParameters, initOverrides);
    }

    /**
     * Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects. Instead, update the issue using `\\{ fields: \\{ parent: \\{\\} \\} \\}`
     * Remove issues from epic
     */
    async removeIssuesFromEpicRaw(requestParameters: RemoveIssuesFromEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['moveIssuesToBacklogRequest'] == null) {
            throw new runtime.RequiredError(
                'moveIssuesToBacklogRequest',
                'Required parameter "moveIssuesToBacklogRequest" was null or undefined when calling removeIssuesFromEpic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/epic/none/issue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['moveIssuesToBacklogRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50. **Note:** This operation does not work for epics in next-gen projects. Instead, update the issue using `\\{ fields: \\{ parent: \\{\\} \\} \\}`
     * Remove issues from epic
     */
    async removeIssuesFromEpic(requestParameters: RemoveIssuesFromEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeIssuesFromEpicRaw(requestParameters, initOverrides);
    }

}
