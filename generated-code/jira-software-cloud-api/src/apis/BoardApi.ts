/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateBoardRequest,
  GetAllBoards200Response,
  GetAllBoards200ResponseValuesInner,
  GetAllQuickFilters200Response,
  GetAllQuickFilters200ResponseValuesInner,
  GetBoardByFilterId200Response,
  GetConfiguration200Response,
  GetFeaturesForBoard200Response,
  GetReportsForBoard200Response,
  MoveIssuesToBacklogForBoardRequest,
  MoveIssuesToBoard207Response,
  SearchResults,
  ToggleFeaturesRequest,
} from '../models';

export interface CreateBoardOperationRequest {
    createBoardRequest: CreateBoardRequest;
}

export interface DeleteBoardRequest {
    boardId: number;
}

export interface DeleteBoardPropertyRequest {
    boardId: string;
    propertyKey: string;
}

export interface GetAllBoardsRequest {
    startAt?: number;
    maxResults?: number;
    type?: "scrum" | "kanban" | "simple";
    name?: string;
    projectKeyOrId?: string;
    accountIdLocation?: string;
    projectLocation?: string;
    includePrivate?: boolean;
    negateLocationFiltering?: boolean;
    orderBy?: GetAllBoardsOrderByEnum;
    expand?: string;
    filterId?: number;
}

export interface GetAllQuickFiltersRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
}

export interface GetAllSprintsRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
    state?: object;
}

export interface GetAllVersionsRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
    released?: string;
}

export interface GetBoardRequest {
    boardId: number;
}

export interface GetBoardByFilterIdRequest {
    filterId: number;
    startAt?: number;
    maxResults?: number;
}

export interface GetBoardIssuesForEpicRequest {
    boardId: number;
    epicId: number;
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface GetBoardIssuesForSprintRequest {
    boardId: number;
    sprintId: number;
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface GetBoardPropertyRequest {
    boardId: string;
    propertyKey: string;
}

export interface GetBoardPropertyKeysRequest {
    boardId: string;
}

export interface GetConfigurationRequest {
    boardId: number;
}

export interface GetEpicsRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
    done?: string;
}

export interface GetFeaturesForBoardRequest {
    boardId: number;
}

export interface GetIssuesForBacklogRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface GetIssuesForBoardRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface GetIssuesWithoutEpicForBoardRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
    jql?: string;
    validateQuery?: boolean;
    fields?: Array<object>;
    expand?: string;
}

export interface GetProjectsRequest {
    boardId: number;
    startAt?: number;
    maxResults?: number;
}

export interface GetProjectsFullRequest {
    boardId: number;
}

export interface GetQuickFilterRequest {
    boardId: number;
    quickFilterId: number;
}

export interface GetReportsForBoardRequest {
    boardId: number;
}

export interface MoveIssuesToBoardRequest {
    boardId: number;
    moveIssuesToBacklogForBoardRequest: MoveIssuesToBacklogForBoardRequest;
}

export interface SetBoardPropertyRequest {
    boardId: string;
    propertyKey: string;
}

export interface ToggleFeaturesOperationRequest {
    boardId: number;
    toggleFeaturesRequest: ToggleFeaturesRequest;
}

/**
 * 
 */
export class BoardApi extends runtime.BaseAPI {

    /**
     * Creates a new board. Board name, type and filter ID is required.   *  `name` \\- Must be less than 255 characters.  *  `type` \\- Valid values: scrum, kanban  *  `filterId` \\- ID of a filter that the user has permissions to view. Note, if the user does not have the \'Create shared objects\' permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).  *  `location` \\- The container that the board will be located in. `location` must include the `type` property (Valid values: project, user). If choosing \'project\', then a project must be specified by a `projectKeyOrId` property in `location`. If choosing \'user\', the current user is chosen by default. The `projectKeyOrId` property should not be provided.  Note:   *  If you want to create a new project with an associated board, use the [Jira platform REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create project](#api-rest-api-3-project-post) method. The `projectTypeKey` for software boards must be \'software\' and the `projectTemplateKey` must be either `com.pyxis.greenhopper.jira:gh-kanban-template` or `com.pyxis.greenhopper.jira:gh-scrum-template`.  *  You can create a filter using the [Jira REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create filter](#api-rest-api-3-filter-post) method.  *  If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.
     * Create board
     */
    async createBoardRaw(requestParameters: CreateBoardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllBoards200ResponseValuesInner>> {
        if (requestParameters.createBoardRequest === null || requestParameters.createBoardRequest === undefined) {
            throw new runtime.RequiredError('createBoardRequest','Required parameter requestParameters.createBoardRequest was null or undefined when calling createBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createBoardRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new board. Board name, type and filter ID is required.   *  `name` \\- Must be less than 255 characters.  *  `type` \\- Valid values: scrum, kanban  *  `filterId` \\- ID of a filter that the user has permissions to view. Note, if the user does not have the \'Create shared objects\' permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).  *  `location` \\- The container that the board will be located in. `location` must include the `type` property (Valid values: project, user). If choosing \'project\', then a project must be specified by a `projectKeyOrId` property in `location`. If choosing \'user\', the current user is chosen by default. The `projectKeyOrId` property should not be provided.  Note:   *  If you want to create a new project with an associated board, use the [Jira platform REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create project](#api-rest-api-3-project-post) method. The `projectTypeKey` for software boards must be \'software\' and the `projectTemplateKey` must be either `com.pyxis.greenhopper.jira:gh-kanban-template` or `com.pyxis.greenhopper.jira:gh-scrum-template`.  *  You can create a filter using the [Jira REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create filter](#api-rest-api-3-filter-post) method.  *  If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.
     * Create board
     */
    async createBoard(requestParameters: CreateBoardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllBoards200ResponseValuesInner> {
        const response = await this.createBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the board. Admin without the view permission can still remove the board.
     * Delete board
     */
    async deleteBoardRaw(requestParameters: DeleteBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling deleteBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the board. Admin without the view permission can still remove the board.
     * Delete board
     */
    async deleteBoard(requestParameters: DeleteBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardRaw(requestParameters, initOverrides);
    }

    /**
     * Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.
     * Delete board property
     */
    async deleteBoardPropertyRaw(requestParameters: DeleteBoardPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling deleteBoardProperty.');
        }

        if (requestParameters.propertyKey === null || requestParameters.propertyKey === undefined) {
            throw new runtime.RequiredError('propertyKey','Required parameter requestParameters.propertyKey was null or undefined when calling deleteBoardProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["delete:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/properties/{propertyKey}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters.propertyKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.
     * Delete board property
     */
    async deleteBoardProperty(requestParameters: DeleteBoardPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all boards. This only includes boards that the user has permission to view.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on February 15, 2024.   *  `read:board-scope:jira-software`, `read:project:jira`
     * Get all boards
     */
    async getAllBoardsRaw(requestParameters: GetAllBoardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllBoards200Response>> {
        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.projectKeyOrId !== undefined) {
            queryParameters['projectKeyOrId'] = requestParameters.projectKeyOrId;
        }

        if (requestParameters.accountIdLocation !== undefined) {
            queryParameters['accountIdLocation'] = requestParameters.accountIdLocation;
        }

        if (requestParameters.projectLocation !== undefined) {
            queryParameters['projectLocation'] = requestParameters.projectLocation;
        }

        if (requestParameters.includePrivate !== undefined) {
            queryParameters['includePrivate'] = requestParameters.includePrivate;
        }

        if (requestParameters.negateLocationFiltering !== undefined) {
            queryParameters['negateLocationFiltering'] = requestParameters.negateLocationFiltering;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filterId'] = requestParameters.filterId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all boards. This only includes boards that the user has permission to view.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on February 15, 2024.   *  `read:board-scope:jira-software`, `read:project:jira`
     * Get all boards
     */
    async getAllBoards(requestParameters: GetAllBoardsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllBoards200Response> {
        const response = await this.getAllBoardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all quick filters from a board, for a given board ID.
     * Get all quick filters
     */
    async getAllQuickFiltersRaw(requestParameters: GetAllQuickFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllQuickFilters200Response>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getAllQuickFilters.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/quickfilter`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all quick filters from a board, for a given board ID.
     * Get all quick filters
     */
    async getAllQuickFilters(requestParameters: GetAllQuickFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllQuickFilters200Response> {
        const response = await this.getAllQuickFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all sprints from a board, for a given board ID. This only includes sprints that the user has permission to view.
     * Get all sprints
     */
    async getAllSprintsRaw(requestParameters: GetAllSprintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getAllSprints.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:sprint:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/sprint`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all sprints from a board, for a given board ID. This only includes sprints that the user has permission to view.
     * Get all sprints
     */
    async getAllSprints(requestParameters: GetAllSprintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAllSprintsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all versions from a board, for a given board ID. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.
     * Get all versions
     */
    async getAllVersionsRaw(requestParameters: GetAllVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getAllVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.released !== undefined) {
            queryParameters['released'] = requestParameters.released;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/version`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all versions from a board, for a given board ID. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.
     * Get all versions
     */
    async getAllVersions(requestParameters: GetAllVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAllVersionsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the board for the given board ID. This board will only be returned if the user has permission to view it. Admins without the view permission will see the board as a private one, so will see only a subset of the board\'s data (board location for instance).
     * Get board
     */
    async getBoardRaw(requestParameters: GetBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllBoards200ResponseValuesInner>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the board for the given board ID. This board will only be returned if the user has permission to view it. Admins without the view permission will see the board as a private one, so will see only a subset of the board\'s data (board location for instance).
     * Get board
     */
    async getBoard(requestParameters: GetBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllBoards200ResponseValuesInner> {
        const response = await this.getBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns any boards which use the provided filter id. This method can be executed by users without a valid software license in order to find which boards are using a particular filter.
     * Get board by filter id
     */
    async getBoardByFilterIdRaw(requestParameters: GetBoardByFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBoardByFilterId200Response>> {
        if (requestParameters.filterId === null || requestParameters.filterId === undefined) {
            throw new runtime.RequiredError('filterId','Required parameter requestParameters.filterId was null or undefined when calling getBoardByFilterId.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/filter/{filterId}`.replace(`{${"filterId"}}`, encodeURIComponent(String(requestParameters.filterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns any boards which use the provided filter id. This method can be executed by users without a valid software license in order to find which boards are using a particular filter.
     * Get board by filter id
     */
    async getBoardByFilterId(requestParameters: GetBoardByFilterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBoardByFilterId200Response> {
        const response = await this.getBoardByFilterIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all issues that belong to an epic on the board, for the given epic ID and the board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get board issues for epic
     */
    async getBoardIssuesForEpicRaw(requestParameters: GetBoardIssuesForEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardIssuesForEpic.');
        }

        if (requestParameters.epicId === null || requestParameters.epicId === undefined) {
            throw new runtime.RequiredError('epicId','Required parameter requestParameters.epicId was null or undefined when calling getBoardIssuesForEpic.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.jql !== undefined) {
            queryParameters['jql'] = requestParameters.jql;
        }

        if (requestParameters.validateQuery !== undefined) {
            queryParameters['validateQuery'] = requestParameters.validateQuery;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/epic/{epicId}/issue`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"epicId"}}`, encodeURIComponent(String(requestParameters.epicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all issues that belong to an epic on the board, for the given epic ID and the board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get board issues for epic
     */
    async getBoardIssuesForEpic(requestParameters: GetBoardIssuesForEpicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBoardIssuesForEpicRaw(requestParameters, initOverrides);
    }

    /**
     * Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.
     * Get board issues for sprint
     */
    async getBoardIssuesForSprintRaw(requestParameters: GetBoardIssuesForSprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardIssuesForSprint.');
        }

        if (requestParameters.sprintId === null || requestParameters.sprintId === undefined) {
            throw new runtime.RequiredError('sprintId','Required parameter requestParameters.sprintId was null or undefined when calling getBoardIssuesForSprint.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.jql !== undefined) {
            queryParameters['jql'] = requestParameters.jql;
        }

        if (requestParameters.validateQuery !== undefined) {
            queryParameters['validateQuery'] = requestParameters.validateQuery;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:sprint:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/sprint/{sprintId}/issue`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"sprintId"}}`, encodeURIComponent(String(requestParameters.sprintId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.
     * Get board issues for sprint
     */
    async getBoardIssuesForSprint(requestParameters: GetBoardIssuesForSprintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBoardIssuesForSprintRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.
     * Get board property
     */
    async getBoardPropertyRaw(requestParameters: GetBoardPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardProperty.');
        }

        if (requestParameters.propertyKey === null || requestParameters.propertyKey === undefined) {
            throw new runtime.RequiredError('propertyKey','Required parameter requestParameters.propertyKey was null or undefined when calling getBoardProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/properties/{propertyKey}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters.propertyKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.
     * Get board property
     */
    async getBoardProperty(requestParameters: GetBoardPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBoardPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.
     * Get board property keys
     */
    async getBoardPropertyKeysRaw(requestParameters: GetBoardPropertyKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getBoardPropertyKeys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/properties`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.
     * Get board property keys
     */
    async getBoardPropertyKeys(requestParameters: GetBoardPropertyKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBoardPropertyKeysRaw(requestParameters, initOverrides);
    }

    /**
     * Get the board configuration. The response contains the following fields:   *  `id` \\- ID of the board.  *  `name` \\- Name of the board.  *  `filter` \\- Reference to the filter used by the given board.  *  `location` \\- Reference to the container that the board is located in. Includes the container type (Valid values: project, user).  *  `subQuery` (Kanban only) - JQL subquery used by the given board.  *  `columnConfig` \\- The column configuration lists the columns for the board, in the order defined in the column configuration. For each column, it shows the issue status mapping as well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues. Note, the last column with statuses mapped to it is treated as the \"Done\" column, which means that issues in that column will be marked as already completed.  *  `estimation` (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field. If the estimation type is \"field\", the ID and display name of the field used for estimation is also returned. Note, estimates for an issue can be updated by a PUT /rest/api/3/issue/\\{issueIdOrKey\\} request, however the fields must be on the screen. \"timeoriginalestimate\" field will never be on the screen, so in order to update it \"originalEstimate\" in \"timetracking\" field should be updated.  *  `ranking` \\- Contains information about custom field used for ranking in the given board.
     * Get configuration
     */
    async getConfigurationRaw(requestParameters: GetConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConfiguration200Response>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/configuration`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the board configuration. The response contains the following fields:   *  `id` \\- ID of the board.  *  `name` \\- Name of the board.  *  `filter` \\- Reference to the filter used by the given board.  *  `location` \\- Reference to the container that the board is located in. Includes the container type (Valid values: project, user).  *  `subQuery` (Kanban only) - JQL subquery used by the given board.  *  `columnConfig` \\- The column configuration lists the columns for the board, in the order defined in the column configuration. For each column, it shows the issue status mapping as well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues. Note, the last column with statuses mapped to it is treated as the \"Done\" column, which means that issues in that column will be marked as already completed.  *  `estimation` (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field. If the estimation type is \"field\", the ID and display name of the field used for estimation is also returned. Note, estimates for an issue can be updated by a PUT /rest/api/3/issue/\\{issueIdOrKey\\} request, however the fields must be on the screen. \"timeoriginalestimate\" field will never be on the screen, so in order to update it \"originalEstimate\" in \"timetracking\" field should be updated.  *  `ranking` \\- Contains information about custom field used for ranking in the given board.
     * Get configuration
     */
    async getConfiguration(requestParameters: GetConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConfiguration200Response> {
        const response = await this.getConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.
     * Get epics
     */
    async getEpicsRaw(requestParameters: GetEpicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getEpics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.done !== undefined) {
            queryParameters['done'] = requestParameters.done;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/epic`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.
     * Get epics
     */
    async getEpics(requestParameters: GetEpicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getEpicsRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get features for board
     */
    async getFeaturesForBoardRaw(requestParameters: GetFeaturesForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeaturesForBoard200Response>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getFeaturesForBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/features`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get features for board
     */
    async getFeaturesForBoard(requestParameters: GetFeaturesForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeaturesForBoard200Response> {
        const response = await this.getFeaturesForBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all issues from the board\'s backlog, for the given board ID. This only includes issues that the user has permission to view. The backlog contains incomplete issues that are not assigned to any future or active sprint. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get issues for backlog
     */
    async getIssuesForBacklogRaw(requestParameters: GetIssuesForBacklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResults>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getIssuesForBacklog.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.jql !== undefined) {
            queryParameters['jql'] = requestParameters.jql;
        }

        if (requestParameters.validateQuery !== undefined) {
            queryParameters['validateQuery'] = requestParameters.validateQuery;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/backlog`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all issues from the board\'s backlog, for the given board ID. This only includes issues that the user has permission to view. The backlog contains incomplete issues that are not assigned to any future or active sprint. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get issues for backlog
     */
    async getIssuesForBacklog(requestParameters: GetIssuesForBacklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResults> {
        const response = await this.getIssuesForBacklogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all issues from a board, for a given board ID. This only includes issues that the user has permission to view. An issue belongs to the board if its status is mapped to the board\'s column. Epic issues do not belongs to the scrum boards. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get issues for board
     */
    async getIssuesForBoardRaw(requestParameters: GetIssuesForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResults>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getIssuesForBoard.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.jql !== undefined) {
            queryParameters['jql'] = requestParameters.jql;
        }

        if (requestParameters.validateQuery !== undefined) {
            queryParameters['validateQuery'] = requestParameters.validateQuery;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/issue`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all issues from a board, for a given board ID. This only includes issues that the user has permission to view. An issue belongs to the board if its status is mapped to the board\'s column. Epic issues do not belongs to the scrum boards. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get issues for board
     */
    async getIssuesForBoard(requestParameters: GetIssuesForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResults> {
        const response = await this.getIssuesForBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get issues without epic for board
     */
    async getIssuesWithoutEpicForBoardRaw(requestParameters: GetIssuesWithoutEpicForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getIssuesWithoutEpicForBoard.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.jql !== undefined) {
            queryParameters['jql'] = requestParameters.jql;
        }

        if (requestParameters.validateQuery !== undefined) {
            queryParameters['validateQuery'] = requestParameters.validateQuery;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:epic:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/epic/none/issue`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * Get issues without epic for board
     */
    async getIssuesWithoutEpicForBoard(requestParameters: GetIssuesWithoutEpicForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getIssuesWithoutEpicForBoardRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all projects that are associated with the board, for the given board ID. If the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project or there is an issue from the project that belongs to the board.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query `project in (ABC, BCD) AND reporter = admin` have reference to ABC and BCD projects but query `project in (ABC, BCD) OR reporter = admin` doesn\'t have reference to any project.  An issue belongs to the board if its status is mapped to the board\'s column. Epic issues do not belongs to the scrum boards.
     * Get projects
     */
    async getProjectsRaw(requestParameters: GetProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getProjects.');
        }

        const queryParameters: any = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/project`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all projects that are associated with the board, for the given board ID. If the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project or there is an issue from the project that belongs to the board.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query `project in (ABC, BCD) AND reporter = admin` have reference to ABC and BCD projects but query `project in (ABC, BCD) OR reporter = admin` doesn\'t have reference to any project.  An issue belongs to the board if its status is mapped to the board\'s column. Epic issues do not belongs to the scrum boards.
     * Get projects
     */
    async getProjects(requestParameters: GetProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getProjectsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all projects that are statically associated with the board, for the given board ID. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query `project in (ABC, BCD) AND reporter = admin` have reference to ABC and BCD projects but query `project in (ABC, BCD) OR reporter = admin` doesn\'t have reference to any project.
     * Get projects full
     */
    async getProjectsFullRaw(requestParameters: GetProjectsFullRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getProjectsFull.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/project/full`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all projects that are statically associated with the board, for the given board ID. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query `project in (ABC, BCD) AND reporter = admin` have reference to ABC and BCD projects but query `project in (ABC, BCD) OR reporter = admin` doesn\'t have reference to any project.
     * Get projects full
     */
    async getProjectsFull(requestParameters: GetProjectsFullRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getProjectsFullRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the quick filter for a given quick filter ID. The quick filter will only be returned if the user can view the board that the quick filter belongs to.
     * Get quick filter
     */
    async getQuickFilterRaw(requestParameters: GetQuickFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllQuickFilters200ResponseValuesInner>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getQuickFilter.');
        }

        if (requestParameters.quickFilterId === null || requestParameters.quickFilterId === undefined) {
            throw new runtime.RequiredError('quickFilterId','Required parameter requestParameters.quickFilterId was null or undefined when calling getQuickFilter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/quickfilter/{quickFilterId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"quickFilterId"}}`, encodeURIComponent(String(requestParameters.quickFilterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the quick filter for a given quick filter ID. The quick filter will only be returned if the user can view the board that the quick filter belongs to.
     * Get quick filter
     */
    async getQuickFilter(requestParameters: GetQuickFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllQuickFilters200ResponseValuesInner> {
        const response = await this.getQuickFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get reports for board
     */
    async getReportsForBoardRaw(requestParameters: GetReportsForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReportsForBoard200Response>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling getReportsForBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/reports`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get reports for board
     */
    async getReportsForBoard(requestParameters: GetReportsForBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReportsForBoard200Response> {
        const response = await this.getReportsForBoardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move issues from the backog to the board (if they are already in the backlog of that board).   This operation either moves an issue(s) onto a board from the backlog (by adding it to the issueList for the board) Or transitions the issue(s) to the first column for a kanban board with backlog. At most 50 issues may be moved at once.
     * Move issues to board
     */
    async moveIssuesToBoardRaw(requestParameters: MoveIssuesToBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling moveIssuesToBoard.');
        }

        if (requestParameters.moveIssuesToBacklogForBoardRequest === null || requestParameters.moveIssuesToBacklogForBoardRequest === undefined) {
            throw new runtime.RequiredError('moveIssuesToBacklogForBoardRequest','Required parameter requestParameters.moveIssuesToBacklogForBoardRequest was null or undefined when calling moveIssuesToBoard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:board-scope:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/issue`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.moveIssuesToBacklogForBoardRequest,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move issues from the backog to the board (if they are already in the backlog of that board).   This operation either moves an issue(s) onto a board from the backlog (by adding it to the issueList for the board) Or transitions the issue(s) to the first column for a kanban board with backlog. At most 50 issues may be moved at once.
     * Move issues to board
     */
    async moveIssuesToBoard(requestParameters: MoveIssuesToBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.moveIssuesToBoardRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the value of the specified board\'s property.  You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.
     * Set board property
     */
    async setBoardPropertyRaw(requestParameters: SetBoardPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling setBoardProperty.');
        }

        if (requestParameters.propertyKey === null || requestParameters.propertyKey === undefined) {
            throw new runtime.RequiredError('propertyKey','Required parameter requestParameters.propertyKey was null or undefined when calling setBoardProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/properties/{propertyKey}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters.propertyKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the value of the specified board\'s property.  You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.
     * Set board property
     */
    async setBoardProperty(requestParameters: SetBoardPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setBoardPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Toggle features
     */
    async toggleFeaturesRaw(requestParameters: ToggleFeaturesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeaturesForBoard200Response>> {
        if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
            throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling toggleFeatures.');
        }

        if (requestParameters.toggleFeaturesRequest === null || requestParameters.toggleFeaturesRequest === undefined) {
            throw new runtime.RequiredError('toggleFeaturesRequest','Required parameter requestParameters.toggleFeaturesRequest was null or undefined when calling toggleFeatures.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:board-scope.admin:jira-software"]);
        }

        const response = await this.request({
            path: `/rest/agile/1.0/board/{boardId}/features`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters.boardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.toggleFeaturesRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Toggle features
     */
    async toggleFeatures(requestParameters: ToggleFeaturesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeaturesForBoard200Response> {
        const response = await this.toggleFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllBoardsOrderByEnum = {
    Name: 'name',
    NameDesc: '-name',
    NameAsc: '+name'
} as const;
export type GetAllBoardsOrderByEnum = typeof GetAllBoardsOrderByEnum[keyof typeof GetAllBoardsOrderByEnum];
