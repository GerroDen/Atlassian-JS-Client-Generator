/* tslint:disable */
/* eslint-disable */
/**
 * Teams Public API
 * Teams Public API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PublicApiOverallCodedError,
  PublicApiTeamCreationPayload,
  PublicApiTeamPaginationResult,
  PublicApiTeamResponse,
  PublicApiTeamResponseWithMembers,
  PublicApiTeamUpdatePayload,
} from '../models/index';

export interface CreateTeamRequest {
    orgId: string;
    publicApiTeamCreationPayload: PublicApiTeamCreationPayload;
}

export interface DeleteTeam2Request {
    orgId: string;
    teamId: string;
}

export interface GetTeam2Request {
    orgId: string;
    teamId: string;
    siteId?: string;
}

export interface QueryTeamsRequest {
    orgId: string;
    siteId?: string;
    size?: number;
    cursor?: string;
}

export interface RestoreTeamRequest {
    orgId: string;
    teamId: string;
}

export interface UpdateTeam1Request {
    orgId: string;
    teamId: string;
    publicApiTeamUpdatePayload: PublicApiTeamUpdatePayload;
}

export interface UploadAndSetTeamCoverPhotoRequest {
    teamId: string;
    file: Blob;
}

/**
 * 
 */
export class TeamsPublicAPIApi extends runtime.BaseAPI {

    /**
     * Creates a team, and adds the requesting user as the initial member.
     * Create a team.
     */
    async createTeamRaw(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiTeamResponseWithMembers>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createTeam().'
            );
        }

        if (requestParameters['publicApiTeamCreationPayload'] == null) {
            throw new runtime.RequiredError(
                'publicApiTeamCreationPayload',
                'Required parameter "publicApiTeamCreationPayload" was null or undefined when calling createTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['publicApiTeamCreationPayload'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a team, and adds the requesting user as the initial member.
     * Create a team.
     */
    async createTeam(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiTeamResponseWithMembers> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a team.
     */
    async deleteTeam2Raw(requestParameters: DeleteTeam2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteTeam2().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling deleteTeam2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a team.
     */
    async deleteTeam2(requestParameters: DeleteTeam2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeam2Raw(requestParameters, initOverrides);
    }

    /**
     * Get a single team.
     */
    async getTeam2Raw(requestParameters: GetTeam2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiTeamResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getTeam2().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeam2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['siteId'] != null) {
            queryParameters['siteId'] = requestParameters['siteId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a single team.
     */
    async getTeam2(requestParameters: GetTeam2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiTeamResponse> {
        const response = await this.getTeam2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a list of all teams contained under an organization. This may be used as an option to export teams data within your organization.
     * Get a list of teams.
     */
    async queryTeamsRaw(requestParameters: QueryTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiTeamPaginationResult>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling queryTeams().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['siteId'] != null) {
            queryParameters['siteId'] = requestParameters['siteId'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This returns a list of all teams contained under an organization. This may be used as an option to export teams data within your organization.
     * Get a list of teams.
     */
    async queryTeams(requestParameters: QueryTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiTeamPaginationResult> {
        const response = await this.queryTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restore a single soft-deleted team
     */
    async restoreTeamRaw(requestParameters: RestoreTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling restoreTeam().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling restoreTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/restore`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore a single soft-deleted team
     */
    async restoreTeam(requestParameters: RestoreTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restoreTeamRaw(requestParameters, initOverrides);
    }

    /**
     * This will only update the fields that get passed in and leave the rest as unmodified.
     * Modify a team.
     */
    async updateTeam1Raw(requestParameters: UpdateTeam1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiTeamResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateTeam1().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling updateTeam1().'
            );
        }

        if (requestParameters['publicApiTeamUpdatePayload'] == null) {
            throw new runtime.RequiredError(
                'publicApiTeamUpdatePayload',
                'Required parameter "publicApiTeamUpdatePayload" was null or undefined when calling updateTeam1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['publicApiTeamUpdatePayload'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This will only update the fields that get passed in and leave the rest as unmodified.
     * Modify a team.
     */
    async updateTeam1(requestParameters: UpdateTeam1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiTeamResponse> {
        const response = await this.updateTeam1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This updates the cover photo of the team. The cover photo must be a valid image file.
     * Upload a team cover photo
     */
    async uploadAndSetTeamCoverPhotoRaw(requestParameters: UploadAndSetTeamCoverPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling uploadAndSetTeamCoverPhoto().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadAndSetTeamCoverPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/{teamId}/cover-photo`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This updates the cover photo of the team. The cover photo must be a valid image file.
     * Upload a team cover photo
     */
    async uploadAndSetTeamCoverPhoto(requestParameters: UploadAndSetTeamCoverPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadAndSetTeamCoverPhotoRaw(requestParameters, initOverrides);
    }

}
