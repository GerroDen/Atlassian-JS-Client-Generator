/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWhiteboard200Response,
  CreateWhiteboardRequest,
} from '../models/index';

export interface CreateWhiteboardOperationRequest {
    createWhiteboardRequest: CreateWhiteboardRequest;
    _private?: boolean;
}

export interface DeleteWhiteboardRequest {
    id: number;
}

export interface GetWhiteboardByIdRequest {
    id: number;
}

/**
 * 
 */
export class WhiteboardApi extends runtime.BaseAPI {

    /**
     * Creates a whiteboard in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the corresponding space. Permission to create a whiteboard in the space.
     * Create whiteboard
     */
    async createWhiteboardRaw(requestParameters: CreateWhiteboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWhiteboard200Response>> {
        if (requestParameters['createWhiteboardRequest'] == null) {
            throw new runtime.RequiredError(
                'createWhiteboardRequest',
                'Required parameter "createWhiteboardRequest" was null or undefined when calling createWhiteboard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['_private'] != null) {
            queryParameters['private'] = requestParameters['_private'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:whiteboard:confluence"]);
        }

        const response = await this.request({
            path: `/whiteboards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createWhiteboardRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a whiteboard in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the corresponding space. Permission to create a whiteboard in the space.
     * Create whiteboard
     */
    async createWhiteboard(requestParameters: CreateWhiteboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWhiteboard200Response> {
        const response = await this.createWhiteboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a whiteboard by id.  Deleting a whiteboard moves the whiteboard to the trash, where it can be restored later  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the whiteboard and its corresponding space. Permission to delete whiteboards in the space.
     * Delete whiteboard
     */
    async deleteWhiteboardRaw(requestParameters: DeleteWhiteboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWhiteboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["delete:whiteboard:confluence"]);
        }

        const response = await this.request({
            path: `/whiteboards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a whiteboard by id.  Deleting a whiteboard moves the whiteboard to the trash, where it can be restored later  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the whiteboard and its corresponding space. Permission to delete whiteboards in the space.
     * Delete whiteboard
     */
    async deleteWhiteboard(requestParameters: DeleteWhiteboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWhiteboardRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the whiteboard and its corresponding space.
     * Get whiteboard by id
     */
    async getWhiteboardByIdRaw(requestParameters: GetWhiteboardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWhiteboard200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWhiteboardById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:whiteboard:confluence"]);
        }

        const response = await this.request({
            path: `/whiteboards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the whiteboard and its corresponding space.
     * Get whiteboard by id
     */
    async getWhiteboardById(requestParameters: GetWhiteboardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWhiteboard200Response> {
        const response = await this.getWhiteboardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
