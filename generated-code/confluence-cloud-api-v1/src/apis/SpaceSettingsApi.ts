/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SpaceSettings,
  SpaceSettingsUpdate,
} from '../models';

export interface GetSpaceSettingsRequest {
    spaceKey: string;
}

export interface UpdateSpaceSettingsRequest {
    spaceKey: string;
    spaceSettingsUpdate: SpaceSettingsUpdate;
}

/**
 * 
 */
export class SpaceSettingsApi extends runtime.BaseAPI {

    /**
     * Returns the settings of a space. Currently only the `routeOverrideEnabled` setting can be returned.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get space settings
     */
    async getSpaceSettingsRaw(requestParameters: GetSpaceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceSettings>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling getSpaceSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-space.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/settings`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the settings of a space. Currently only the `routeOverrideEnabled` setting can be returned.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'View\' permission for the space.
     * Get space settings
     */
    async getSpaceSettings(requestParameters: GetSpaceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceSettings> {
        const response = await this.getSpaceSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the settings for a space. Currently only the `routeOverrideEnabled` setting can be updated.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Update space settings
     */
    async updateSpaceSettingsRaw(requestParameters: UpdateSpaceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpaceSettings>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling updateSpaceSettings.');
        }

        if (requestParameters.spaceSettingsUpdate === null || requestParameters.spaceSettingsUpdate === undefined) {
            throw new runtime.RequiredError('spaceSettingsUpdate','Required parameter requestParameters.spaceSettingsUpdate was null or undefined when calling updateSpaceSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/settings`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.spaceSettingsUpdate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the settings for a space. Currently only the `routeOverrideEnabled` setting can be updated.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Update space settings
     */
    async updateSpaceSettings(requestParameters: UpdateSpaceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpaceSettings> {
        const response = await this.updateSpaceSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
