/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentRestriction,
  ContentRestrictionAddOrUpdateArray,
  ContentRestrictionArray,
  GetRestrictionsByOperation200ResponseValue,
} from '../models/index';

export interface AddGroupToContentRestrictionByGroupIdRequest {
    id: string;
    operationKey: AddGroupToContentRestrictionByGroupIdOperationKeyEnum;
    groupId: string;
}

export interface AddRestrictionsRequest {
    id: string;
    body: ContentRestrictionAddOrUpdateArray;
    expand?: Array<AddRestrictionsExpandEnum>;
}

export interface AddUserToContentRestrictionRequest {
    id: string;
    operationKey: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface DeleteRestrictionsRequest {
    id: string;
    expand?: Array<DeleteRestrictionsExpandEnum>;
}

export interface GetContentRestrictionStatusForUserRequest {
    id: string;
    operationKey: string;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface GetIndividualGroupRestrictionStatusByGroupIdRequest {
    id: string;
    operationKey: GetIndividualGroupRestrictionStatusByGroupIdOperationKeyEnum;
    groupId: string;
}

export interface GetRestrictionsRequest {
    id: string;
    expand?: Array<GetRestrictionsExpandEnum>;
    start?: number;
    limit?: number;
}

export interface GetRestrictionsByOperationRequest {
    id: string;
    expand?: Array<GetRestrictionsByOperationExpandEnum>;
}

export interface GetRestrictionsForOperationRequest {
    id: string;
    operationKey: GetRestrictionsForOperationOperationKeyEnum;
    expand?: Array<GetRestrictionsForOperationExpandEnum>;
    start?: number;
    limit?: number;
}

export interface RemoveGroupFromContentRestrictionRequest {
    id: string;
    operationKey: RemoveGroupFromContentRestrictionOperationKeyEnum;
    groupId: string;
}

export interface RemoveUserFromContentRestrictionRequest {
    id: string;
    operationKey: RemoveUserFromContentRestrictionOperationKeyEnum;
    key?: string;
    username?: string;
    accountId?: string;
}

export interface UpdateRestrictionsRequest {
    id: string;
    body: ContentRestrictionAddOrUpdateArray;
    expand?: Array<UpdateRestrictionsExpandEnum>;
}

/**
 * 
 */
export class ContentRestrictionsApi extends runtime.BaseAPI {

    /**
     * Adds a group to a content restriction by Group Id. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Add group to content restriction
     */
    async addGroupToContentRestrictionByGroupIdRaw(requestParameters: AddGroupToContentRestrictionByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addGroupToContentRestrictionByGroupId().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling addGroupToContentRestrictionByGroupId().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling addGroupToContentRestrictionByGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a group to a content restriction by Group Id. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Add group to content restriction
     */
    async addGroupToContentRestrictionByGroupId(requestParameters: AddGroupToContentRestrictionByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addGroupToContentRestrictionByGroupIdRaw(requestParameters, initOverrides);
    }

    /**
     * Adds restrictions to a piece of content. Note, this does not change any existing restrictions on the content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Add restrictions
     */
    async addRestrictionsRaw(requestParameters: AddRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentRestrictionArray>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addRestrictions().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addRestrictions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds restrictions to a piece of content. Note, this does not change any existing restrictions on the content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Add restrictions
     */
    async addRestrictions(requestParameters: AddRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentRestrictionArray> {
        const response = await this.addRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a user to a content restriction. That is, grant read or update permission to the user for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Add user to content restriction
     */
    async addUserToContentRestrictionRaw(requestParameters: AddUserToContentRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addUserToContentRestriction().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling addUserToContentRestriction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/user`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a user to a content restriction. That is, grant read or update permission to the user for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Add user to content restriction
     */
    async addUserToContentRestriction(requestParameters: AddUserToContentRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserToContentRestrictionRaw(requestParameters, initOverrides);
    }

    /**
     * Removes all restrictions (read and update) on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Delete restrictions
     */
    async deleteRestrictionsRaw(requestParameters: DeleteRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentRestrictionArray>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRestrictions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes all restrictions (read and update) on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Delete restrictions
     */
    async deleteRestrictions(requestParameters: DeleteRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentRestrictionArray> {
        const response = await this.deleteRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns whether the specified content restriction applies to a user. For example, if a page with `id=123` has a `read` restriction for a user with an account ID of `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`, the following request will return `true`:  `/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId=384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`  Note that a response of `true` does not guarantee that the user can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content restriction status for user
     */
    async getContentRestrictionStatusForUserRaw(requestParameters: GetContentRestrictionStatusForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getContentRestrictionStatusForUser().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling getContentRestrictionStatusForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/user`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns whether the specified content restriction applies to a user. For example, if a page with `id=123` has a `read` restriction for a user with an account ID of `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`, the following request will return `true`:  `/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId=384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`  Note that a response of `true` does not guarantee that the user can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content restriction status for user
     */
    async getContentRestrictionStatusForUser(requestParameters: GetContentRestrictionStatusForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getContentRestrictionStatusForUserRaw(requestParameters, initOverrides);
    }

    /**
     * Returns whether the specified content restriction applies to a group. For example, if a page with `id=123` has a `read` restriction for the `123456` group id, the following request will return `true`:  `/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456`  Note that a response of `true` does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content restriction status for group
     */
    async getIndividualGroupRestrictionStatusByGroupIdRaw(requestParameters: GetIndividualGroupRestrictionStatusByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getIndividualGroupRestrictionStatusByGroupId().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling getIndividualGroupRestrictionStatusByGroupId().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getIndividualGroupRestrictionStatusByGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns whether the specified content restriction applies to a group. For example, if a page with `id=123` has a `read` restriction for the `123456` group id, the following request will return `true`:  `/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456`  Note that a response of `true` does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get content restriction status for group
     */
    async getIndividualGroupRestrictionStatusByGroupId(requestParameters: GetIndividualGroupRestrictionStatusByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getIndividualGroupRestrictionStatusByGroupIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the restrictions on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get restrictions
     */
    async getRestrictionsRaw(requestParameters: GetRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentRestrictionArray>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRestrictions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the restrictions on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get restrictions
     */
    async getRestrictions(requestParameters: GetRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentRestrictionArray> {
        const response = await this.getRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns restrictions on a piece of content by operation. This method is similar to [Get restrictions](#api-content-id-restriction-get) except that the operations are properties of the return object, rather than items in a results array.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get restrictions by operation
     */
    async getRestrictionsByOperationRaw(requestParameters: GetRestrictionsByOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GetRestrictionsByOperation200ResponseValue; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRestrictionsByOperation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns restrictions on a piece of content by operation. This method is similar to [Get restrictions](#api-content-id-restriction-get) except that the operations are properties of the return object, rather than items in a results array.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get restrictions by operation
     */
    async getRestrictionsByOperation(requestParameters: GetRestrictionsByOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GetRestrictionsByOperation200ResponseValue; }> {
        const response = await this.getRestrictionsByOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the restictions on a piece of content for a given operation (read or update).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get restrictions for operation
     */
    async getRestrictionsForOperationRaw(requestParameters: GetRestrictionsForOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentRestriction>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRestrictionsForOperation().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling getRestrictionsForOperation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-content.all"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the restictions on a piece of content for a given operation (read or update).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * Get restrictions for operation
     */
    async getRestrictionsForOperation(requestParameters: GetRestrictionsForOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentRestriction> {
        const response = await this.getRestrictionsForOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Remove group from content restriction
     */
    async removeGroupFromContentRestrictionRaw(requestParameters: RemoveGroupFromContentRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeGroupFromContentRestriction().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling removeGroupFromContentRestriction().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling removeGroupFromContentRestriction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Remove group from content restriction
     */
    async removeGroupFromContentRestriction(requestParameters: RemoveGroupFromContentRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeGroupFromContentRestrictionRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Remove user from content restriction
     */
    async removeUserFromContentRestrictionRaw(requestParameters: RemoveUserFromContentRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeUserFromContentRestriction().'
            );
        }

        if (requestParameters['operationKey'] == null) {
            throw new runtime.RequiredError(
                'operationKey',
                'Required parameter "operationKey" was null or undefined when calling removeUserFromContentRestriction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/user`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"operationKey"}}`, encodeURIComponent(String(requestParameters['operationKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Remove user from content restriction
     */
    async removeUserFromContentRestriction(requestParameters: RemoveUserFromContentRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserFromContentRestrictionRaw(requestParameters, initOverrides);
    }

    /**
     * Updates restrictions for a piece of content. This removes the existing restrictions and replaces them with the restrictions in the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Update restrictions
     */
    async updateRestrictionsRaw(requestParameters: UpdateRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentRestrictionArray>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRestrictions().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateRestrictions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-content"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/content/{id}/restriction`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates restrictions for a piece of content. This removes the existing restrictions and replaces them with the restrictions in the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * Update restrictions
     */
    async updateRestrictions(requestParameters: UpdateRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentRestrictionArray> {
        const response = await this.updateRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddGroupToContentRestrictionByGroupIdOperationKeyEnum = {
    Read: 'read',
    Update: 'update'
} as const;
export type AddGroupToContentRestrictionByGroupIdOperationKeyEnum = typeof AddGroupToContentRestrictionByGroupIdOperationKeyEnum[keyof typeof AddGroupToContentRestrictionByGroupIdOperationKeyEnum];
/**
 * @export
 */
export const AddRestrictionsExpandEnum = {
    RestrictionsUser: 'restrictions.user',
    ReadRestrictionsUser: 'read.restrictions.user',
    UpdateRestrictionsUser: 'update.restrictions.user',
    RestrictionsGroup: 'restrictions.group',
    ReadRestrictionsGroup: 'read.restrictions.group',
    UpdateRestrictionsGroup: 'update.restrictions.group',
    Content: 'content'
} as const;
export type AddRestrictionsExpandEnum = typeof AddRestrictionsExpandEnum[keyof typeof AddRestrictionsExpandEnum];
/**
 * @export
 */
export const DeleteRestrictionsExpandEnum = {
    RestrictionsUser: 'restrictions.user',
    ReadRestrictionsUser: 'read.restrictions.user',
    UpdateRestrictionsUser: 'update.restrictions.user',
    RestrictionsGroup: 'restrictions.group',
    ReadRestrictionsGroup: 'read.restrictions.group',
    UpdateRestrictionsGroup: 'update.restrictions.group',
    Content: 'content'
} as const;
export type DeleteRestrictionsExpandEnum = typeof DeleteRestrictionsExpandEnum[keyof typeof DeleteRestrictionsExpandEnum];
/**
 * @export
 */
export const GetIndividualGroupRestrictionStatusByGroupIdOperationKeyEnum = {
    Read: 'read',
    Update: 'update'
} as const;
export type GetIndividualGroupRestrictionStatusByGroupIdOperationKeyEnum = typeof GetIndividualGroupRestrictionStatusByGroupIdOperationKeyEnum[keyof typeof GetIndividualGroupRestrictionStatusByGroupIdOperationKeyEnum];
/**
 * @export
 */
export const GetRestrictionsExpandEnum = {
    RestrictionsUser: 'restrictions.user',
    ReadRestrictionsUser: 'read.restrictions.user',
    UpdateRestrictionsUser: 'update.restrictions.user',
    RestrictionsGroup: 'restrictions.group',
    ReadRestrictionsGroup: 'read.restrictions.group',
    UpdateRestrictionsGroup: 'update.restrictions.group',
    Content: 'content'
} as const;
export type GetRestrictionsExpandEnum = typeof GetRestrictionsExpandEnum[keyof typeof GetRestrictionsExpandEnum];
/**
 * @export
 */
export const GetRestrictionsByOperationExpandEnum = {
    RestrictionsUser: 'restrictions.user',
    RestrictionsGroup: 'restrictions.group',
    Content: 'content'
} as const;
export type GetRestrictionsByOperationExpandEnum = typeof GetRestrictionsByOperationExpandEnum[keyof typeof GetRestrictionsByOperationExpandEnum];
/**
 * @export
 */
export const GetRestrictionsForOperationOperationKeyEnum = {
    Read: 'read',
    Update: 'update'
} as const;
export type GetRestrictionsForOperationOperationKeyEnum = typeof GetRestrictionsForOperationOperationKeyEnum[keyof typeof GetRestrictionsForOperationOperationKeyEnum];
/**
 * @export
 */
export const GetRestrictionsForOperationExpandEnum = {
    RestrictionsUser: 'restrictions.user',
    RestrictionsGroup: 'restrictions.group',
    Content: 'content'
} as const;
export type GetRestrictionsForOperationExpandEnum = typeof GetRestrictionsForOperationExpandEnum[keyof typeof GetRestrictionsForOperationExpandEnum];
/**
 * @export
 */
export const RemoveGroupFromContentRestrictionOperationKeyEnum = {
    Read: 'read',
    Update: 'update'
} as const;
export type RemoveGroupFromContentRestrictionOperationKeyEnum = typeof RemoveGroupFromContentRestrictionOperationKeyEnum[keyof typeof RemoveGroupFromContentRestrictionOperationKeyEnum];
/**
 * @export
 */
export const RemoveUserFromContentRestrictionOperationKeyEnum = {
    Read: 'read',
    Update: 'update'
} as const;
export type RemoveUserFromContentRestrictionOperationKeyEnum = typeof RemoveUserFromContentRestrictionOperationKeyEnum[keyof typeof RemoveUserFromContentRestrictionOperationKeyEnum];
/**
 * @export
 */
export const UpdateRestrictionsExpandEnum = {
    RestrictionsUser: 'restrictions.user',
    ReadRestrictionsUser: 'read.restrictions.user',
    UpdateRestrictionsUser: 'update.restrictions.user',
    RestrictionsGroup: 'restrictions.group',
    ReadRestrictionsGroup: 'read.restrictions.group',
    UpdateRestrictionsGroup: 'update.restrictions.group',
    Content: 'content'
} as const;
export type UpdateRestrictionsExpandEnum = typeof UpdateRestrictionsExpandEnum[keyof typeof UpdateRestrictionsExpandEnum];
