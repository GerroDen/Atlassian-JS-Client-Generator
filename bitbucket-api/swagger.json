{
  "swagger": "2.0",
  "info": {
    "title": "REST Resources Provided By: Bitbucket Server - REST",
    "version": ""
  },
  "host": "bitbucket.apps.seibert-media.net",
  "basePath": "/rest/api/1.0/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/admin/banner": {
      "parameters": [],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Deletes a banner, if one is present in the database.",
        "operationId": "deleteBanner"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the announcement banner, if one exists and is available to the user",
        "operationId": "getBanner",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Sets the announcement banner with the provided JSON.\n Only users authenticated as Admins may call this resource",
        "operationId": "setBanner"
      }
    },
    "/admin/cluster": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets information about the nodes that currently make up the stash cluster.\n <p>\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "getInformation",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/admin/default-branch": {
      "parameters": [],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Clears the global default branch, which is used when creating new repositories if an explicit default\n branch is not specified, if one has been configured.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "clearDefaultBranch"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the configured global default branch, which is used when creating new repositories if an explicit\n default branch is not specified.\n <p>\n The user must be authenticated to call this resource.",
        "operationId": "getDefaultBranch",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Configures the global default branch, which is used when creating new repositories if an explicit default\n branch is not specified.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "setDefaultBranch"
      }
    },
    "/admin/groups": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "the name identifying the group to delete",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Deletes the specified group, removing them from the system. This also removes any permissions that may have been\n granted to the group.\n <p>\n A user may not delete the last group that is granting them administrative permissions, or a group with greater\n permissions than themselves.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "deleteGroup"
      },
      "get": {
        "parameters": [
          {
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups.\n <p>\n The authenticated user must have <strong>LICENSED_USER</strong> permission or higher to call this resource.",
        "operationId": "getGroups"
      },
      "post": {
        "parameters": [
          {
            "description": "Name of the group.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a new group.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "createGroup"
      }
    },
    "/admin/groups/add-user": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "<strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.\n <p>\n Add a user to a group.\n <p>\n In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addUserToGroup"
      }
    },
    "/admin/groups/add-users": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add multiple users to a group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addUsersToGroup"
      }
    },
    "/admin/groups/more-members": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "the group which should be used to locate members",
            "in": "query",
            "name": "context",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "if specified only users with usernames, display names or email addresses containing the\n                  supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a list of users that are members of a specified group.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findUsersInGroup"
      }
    },
    "/admin/groups/more-non-members": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "the group which should be used to locate non-members",
            "in": "query",
            "name": "context",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "if specified only users with usernames, display names or email addresses containing the\n                  supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a list of users that are <em>not</em> members of a specified group.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findUsersNotInGroup"
      }
    },
    "/admin/groups/remove-user": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "<strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.\n <p>\n Remove a user from a group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.\n <p>\n In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.",
        "operationId": "removeUserFromGroup"
      }
    },
    "/admin/license": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves details about the current license, as well as the current status of the system with regards to the\n installed license. The status includes the current number of users applied toward the license limit, as well\n as any status messages about the license (warnings about expiry or user counts exceeding license limits).\n <p>\n The authenticated user must have <b>ADMIN</b> permission. Unauthenticated users, and non-administrators, are\n not permitted to access license details.",
        "operationId": "get",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Decodes the provided encoded license and sets it as the active license. If no license was provided, a 400 is\n returned. If the license cannot be decoded, or cannot be applied, a 409 is returned. Some possible reasons a\n license may not be applied include:\n <ul>\n     <li>It is for a different product</li>\n     <li>It is already expired</li>\n </ul>\n Otherwise, if the license is updated successfully, details for the new license are returned with a 200 response.\n <p>\n <b>Warning</b>: It is possible to downgrade the license during update, applying a license with a lower number\n of permitted users. If the number of currently-licensed users exceeds the limits of the new license, pushing\n will be disabled until the licensed user count is brought into compliance with the new license.\n <p>\n The authenticated user must have <b>SYS_ADMIN</b> permission. <b>ADMIN</b> users may <i>view</i> the current\n license details, but they may not <i>update</i> the license.",
        "operationId": "update"
      }
    },
    "/admin/mail-server": {
      "parameters": [],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Deletes the current mail configuration.\n <p>\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "deleteMailConfig"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the current mail configuration.\n\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "getMailConfig",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Updates the mail configuration\n\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "setMailConfig"
      }
    },
    "/admin/mail-server/sender-address": {
      "parameters": [],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Clears the server email address.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "clearSenderAddress"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the server email address",
        "operationId": "getSenderAddress",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Updates the server email address\n\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "setSenderAddress"
      }
    },
    "/admin/permissions/groups": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "the name of the group",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Revoke all global permissions for a group.\n\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>greater or equal permissions than the current permission level of the group (a user may not demote the\n     permission level of a group with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not revoke a group's permissions if their own permission level\n would be reduced as a result.",
        "operationId": "revokePermissionsForGroup"
      },
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups that have been granted at least one global permission.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getGroupsWithAnyPermission"
      },
      "put": {
        "parameters": [
          {
            "description": "the permission to grant",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "the names of the groups",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Promote or demote a user's global permission level. Available global permissions are:\n <ul>\n     <li>LICENSED_USER</li>\n     <li>PROJECT_CREATE</li>\n     <li>ADMIN</li>\n     <li>SYS_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Global+permissions\">Bitbucket Server\n documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>the permission they are attempting to grant or higher; and</li>\n     <li>greater or equal permissions than the current permission level of the group (a user may not demote the\n     permission level of a group with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not demote a group's permission level if their own permission\n level would be reduced as a result.",
        "operationId": "setPermissionForGroups"
      }
    },
    "/admin/permissions/groups/none": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups that have no granted global permissions.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getGroupsWithoutAnyPermission"
      }
    },
    "/admin/permissions/users": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "the name of the user",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Revoke all global permissions for a user.\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>greater or equal permissions than the current permission level of the user (a user may not demote the\n     permission level of a user with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not demote their own permission level.",
        "operationId": "revokePermissionsForUser"
      },
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "if specified only user names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of users that have been granted at least one global permission.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getUsersWithAnyPermission"
      },
      "put": {
        "parameters": [
          {
            "description": "the names of the users",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "the permission to grant",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Promote or demote the global permission level of a user. Available global permissions are:\n <ul>\n     <li>LICENSED_USER</li>\n     <li>PROJECT_CREATE</li>\n     <li>ADMIN</li>\n     <li>SYS_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Global+permissions\">Bitbucket Server\n documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>the permission they are attempting to grant; and</li>\n     <li>greater or equal permissions than the current permission level of the user (a user may not demote the\n     permission level of a user with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not demote their own permission level.",
        "operationId": "setPermissionForUsers"
      }
    },
    "/admin/permissions/users/none": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "if specified only user names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of users that have no granted global permissions.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getUsersWithoutAnyPermission"
      }
    },
    "/admin/pull-requests/{scmId}": {
      "parameters": [
        {
          "description": "the id of the scm to get strategies for",
          "in": "path",
          "name": "scmId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the merge strategies available for this instance.\n <p>\n The user must be authenticated to call this resource.",
        "operationId": "getMergeConfig",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the pull request merge strategies for the context repository.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.\n <p>\n Only the strategies provided will be enabled, only one may be set to default\n <p>\n An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with\n an empty \"mergeConfig\" attribute. i.e:\n <pre>\n {\n     \"mergeConfig\": {\n     }\n }\n </pre>\n Upon completion of this request, the effective configuration will be the default configuration.",
        "operationId": "setMergeConfig"
      }
    },
    "/admin/rate-limit/history": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "an optional sort category to arrange the results in descending order by either\n                    {@link AggregateRejectCounterOrder#NEWEST} or\n                    {@link AggregateRejectCounterOrder#FREQUENCY}",
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the recent rate limit history for the instance.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "getHistory"
      }
    },
    "/admin/rate-limit/settings": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the rate limit settings for the instance.\n <p>\n The user must be authenticated to call this resource.",
        "operationId": "getSettings",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Sets the rate limit settings for the instance.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "setSettings"
      }
    },
    "/admin/rate-limit/settings/users": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the user-specific rate limit settings for the given user.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "getAll"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Sets the given rate limit settings for the given user.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "set"
      }
    },
    "/admin/rate-limit/settings/users/{userSlug}": {
      "parameters": [
        {
          "type": "string",
          "name": "userSlug",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Deletes the user-specific rate limit settings for the given user.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the user-specific rate limit settings for the given user.\n <p>\n To call this resource, the user must be authenticated and either have <strong>ADMIN</strong> permission or be the\n same user as the one whose settings are requested. A user with <strong>ADMIN</strong> permission cannot get the\n settings of a user with <strong>SYS_ADMIN</strong> permission.",
        "operationId": "get",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Sets the given rate limit settings for the given user.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "set"
      }
    },
    "/admin/users": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "the username identifying the user to delete",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Deletes the specified user, removing them from the system. This also removes any permissions that may have been\n granted to the user.\n <p>\n A user may not delete themselves, and a user with <strong>ADMIN</strong> permissions may not delete a user with\n <strong>SYS_ADMIN</strong>permissions.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "deleteUser"
      },
      "get": {
        "parameters": [
          {
            "description": "if specified only users with usernames, display name or email addresses containing the supplied\n               string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of users.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "getUsers"
      },
      "post": {
        "parameters": [
          {
            "description": "the username for the new user",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "the password for the new user",
            "in": "query",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "the display name for the new user",
            "in": "query",
            "name": "displayName",
            "required": false,
            "type": "string"
          },
          {
            "description": "the e-mail address for the new user",
            "in": "query",
            "name": "emailAddress",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "<code>true</code> to add the user to the default group, which can be used to grant them\n                          a set of initial permissions; otherwise, <code>false</code> to not add them to a group",
            "in": "query",
            "name": "addToDefaultGroup",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "if present and not <code>false</code> instead of requiring a password,\n                          the create user will be notified via email their account has been created and requires\n                          a password to be reset. This option can only be used if a mail server has been configured",
            "in": "query",
            "name": "notify",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Creates a new user from the assembled query parameters.\n <p>\n The default group can be used to control initial permissions for new users, such as granting users the ability\n to login or providing read access to certain projects or repositories. If the user is not added to the default\n group, they may not be able to login after their account is created until explicit permissions are configured.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "createUser"
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update a user's details.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "updateUserDetails"
      }
    },
    "/admin/users/add-group": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "<strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.\n <p>\n Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and\n <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear\n redundant, but it facilitates a specific UI component in Stash.\n <p>\n In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addGroupToUser"
      }
    },
    "/admin/users/add-groups": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add a user to one or more groups.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addUserToGroups"
      }
    },
    "/admin/users/captcha": {
      "parameters": [],
      "delete": {
        "parameters": [
          {
            "description": "the username",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Clears any CAPTCHA challenge that may constrain the user with the supplied username when they authenticate.\n Additionally any counter or metric that contributed towards the user being issued the CAPTCHA challenge\n (for instance too many consecutive failed logins) will also be reset.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not clear\n the CAPTCHA of a user with greater permissions than themselves.",
        "operationId": "clearUserCaptchaChallenge"
      }
    },
    "/admin/users/credentials": {
      "parameters": [],
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update a user's password.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not update\n the password of a user with greater permissions than themselves.",
        "operationId": "updateUserPassword"
      }
    },
    "/admin/users/erasure": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "the username of the user to validate erasability for.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Validate if a user can be erased.\n <p>\n A username is only valid for erasure if it exists as the username of a deleted user. This endpoint will return\n an appropriate error response if the supplied username is invalid for erasure.\n <p>\n This endpoint does <strong>not</strong> perform the actual user erasure, and will not modify the application in\n any way.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "validateErasable"
      },
      "post": {
        "parameters": [
          {
            "description": "the username identifying the user to erase",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Erases personally identifying user data for a deleted user.\n <p>\n References in the application to the original username will be either removed or updated to a new non-identifying\n username. Refer to the\n <a href=\"https://confluence.atlassian.com/gdpr/bitbucket-right-to-erasure-949770560.html\">support guide</a> for\n details about what data is and isn't erased.\n <p>\n User erasure can only be performed on a deleted user. If the user has not been deleted first then this endpoint\n will return a bad request and no erasure will be performed.\n <p>\n Erasing user data is <strong>irreversible</strong> and may lead to a degraded user experience. This method should\n not be used as part of a standard user deletion and cleanup process.\n <p>\n Plugins can participate in user erasure by defining a {@code &lt;user-erasure-handler&gt;} module. If one or more plugin\n modules fail, an error summary of the failing modules is returned.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "eraseUser"
      }
    },
    "/admin/users/more-members": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "the user which should be used to locate groups",
            "in": "query",
            "name": "context",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "if specified only groups with names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a list of groups the specified user is a member of.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findGroupsForUser"
      }
    },
    "/admin/users/more-non-members": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "the user which should be used to locate groups",
            "in": "query",
            "name": "context",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "if specified only groups with names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a list of groups the specified user is <em>not</em> a member of.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findOtherGroupsForUser"
      }
    },
    "/admin/users/remove-group": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Remove a user from a group. This is very similar to <code>groups/remove-user</code>, but with the <em>context</em>\n and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear\n redundant, but it facilitates a specific UI component in Stash.\n <p>\n In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "removeGroupFromUser"
      }
    },
    "/admin/users/rename": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Rename a user.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "renameUser"
      }
    },
    "/application-properties": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve version information and other application properties.\n <p>\n No authentication is required to call this resource.",
        "operationId": "getApplicationProperties",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/build/capabilities": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Returns the build capabilities of this instance",
        "operationId": "getCapabilities",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/dashboard/pull-request-suggestions": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "default": "172800",
            "description": "restrict pull request suggestions to be based on events that occurred since some time\n                     in the past. This is expressed in seconds since \"now\". So to return suggestions\n                     based only on activity within the past 48 hours, pass a value of 172800.",
            "in": "query",
            "name": "changesSince",
            "required": false,
            "type": "string"
          },
          {
            "default": 3,
            "description": "restricts the result set to return at most this many suggestions.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a page of suggestions for pull requests that the currently authenticated user may wish to\n raise. Such suggestions are based on ref changes occurring and so contain the ref change that\n prompted the suggestion plus the time the change event occurred. Changes will be returned in\n descending order based on the time the change that prompted the suggestion occurred.\n <p>\n Note that although the response is a page object, the interface does not support paging, however\n a limit can be applied to the size of the returned page.",
        "operationId": "getPullRequestSuggestions"
      }
    },
    "/dashboard/pull-requests": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "(optional, defaults to returning pull requests in any state). If a state is supplied only pull\n              requests in the specified state will be returned. Either <strong>OPEN</strong>,\n              <strong>DECLINED</strong> or <strong>MERGED</strong>.\n              Omit this parameter to return pull request in any state.",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional, defaults to returning pull requests for any role). If a role is supplied only pull\n              requests where the authenticated user is a participant in the given role will be returned.\n              Either <strong>REVIEWER</strong>, <strong>AUTHOR</strong> or <strong>PARTICIPANT</strong>.",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional, defaults to returning pull requests with any participant status). A comma\n                          separated list of participant status. That is, one or more of\n                          <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or <strong>APPROVED</strong>.",
            "in": "query",
            "name": "participantStatus",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either\n              <strong>OLDEST</strong> (as in: \"oldest first\"), <strong>NEWEST</strong>,\n              <strong>PARTICIPANT_STATUS</strong>, or <strong>CLOSED_DATE</strong>. Where\n              <strong>CLOSED_DATE</strong> is specified and the result set includes pull requests that are not in\n              the closed state, these pull requests will appear first in the result set, followed by most recently\n              closed pull requests.",
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional, defaults to returning pull requests regardless of closed since date). Permits\n                      returning only pull requests with a closed timestamp set more recently that\n                      (now - closedSince). Units are in seconds. So for example if closed since 86400 is set only\n                      pull requests closed in the previous 24 hours will be returned.",
            "in": "query",
            "name": "closedSince",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of pull requests where the current authenticated user is involved as either a reviewer, author\n or a participant. The request may be filtered by pull request state, role or participant status.",
        "operationId": "getPullRequests"
      }
    },
    "/groups": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of group names.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getGroups"
      }
    },
    "/hooks/{hookKey}/avatar": {
      "parameters": [
        {
          "description": "the complete module key of the hook module",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "optional version used for HTTP caching only - any non-blank version will result in a large max-age Cache-Control header.\n                Note that this does not affect the Last-Modified header.",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the avatar for the project matching the supplied <strong>moduleKey</strong>.",
        "operationId": "getAvatar"
      }
    },
    "/inbox/pull-requests": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "default": 25,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "reviewer",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "getPullRequests"
      }
    },
    "/inbox/pull-requests/count": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "getPullRequestCount",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/labels": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "(optional) prefix to filter the labels on.",
            "in": "query",
            "name": "prefix",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Returns a paged response of all the labels in the system.\n <p>\n The user needs to be authenticated to use this resource.",
        "operationId": "getLabels"
      }
    },
    "/labels/{labelName}": {
      "parameters": [
        {
          "description": "the label name",
          "in": "path",
          "name": "labelName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Returns a label.\n <p>\n The user needs to be authenticated to use this resource.",
        "operationId": "getLabel",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/labels/{labelName}/labeled": {
      "parameters": [
        {
          "description": "the label name, provided on the path",
          "in": "path",
          "name": "labelName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the type of labelables to be returned. Supported values: REPOSITORY",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Returns a page of labelables for a given label.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "getLabelables"
      }
    },
    "/logs/logger/{loggerName}": {
      "parameters": [
        {
          "description": "the name of the logger.",
          "in": "path",
          "name": "loggerName",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the current log level for a given logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getLevel",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/logs/logger/{loggerName}/{levelName}": {
      "parameters": [
        {
          "description": "the level to set the logger to. Either TRACE, DEBUG, INFO, WARN or ERROR",
          "in": "path",
          "name": "levelName",
          "required": true,
          "type": "string"
        },
        {
          "description": "the name of the logger.",
          "in": "path",
          "name": "loggerName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Set the current log level for a given logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "setLevel"
      }
    },
    "/logs/rootLogger": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the current log level for the root logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getRootLevel",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/logs/rootLogger/{levelName}": {
      "parameters": [
        {
          "description": "the level to set the logger to. Either TRACE, DEBUG, INFO, WARN or ERROR",
          "in": "path",
          "name": "levelName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Set the current log level for the root logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "setRootLevel"
      }
    },
    "/markup/preview": {
      "parameters": [],
      "post": {
        "parameters": [
          {
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks.\n                         By default this is false which reflects the standard markdown specification.",
            "in": "query",
            "name": "hardwrap",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise.",
            "in": "query",
            "name": "htmlEscape",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "(Optional) true if headers should contain an ID based on the heading content.",
            "in": "query",
            "name": "includeHeadingId",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "(Optional) The mode to use when building URLs. One of: ABSOLUTE, RELATIVE or CONFIGURED.\n                         By default this is RELATIVE.",
            "in": "query",
            "name": "urlMode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Preview generated HTML for the given markdown content.\n <p>\n Only authenticated users may call this resource.",
        "operationId": "preview"
      }
    },
    "/migration/exports": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "<p>Starts a background job that exports the selected repositories.\n\n <p>Only 2 concurrent exports are supported <em>per cluster node</em>. If a request ends up on a node that is already\n running that many export jobs, the request will be rejected and an error returned.\n\n <p>The response includes a description of the job that has been started, and its ID can be used to query\n these details again, including the current progress, warnings and errors that occurred while processing the job,\n and to interrupt and cancel the execution of this job.\n\n <p>The request to start an export is similar to the one for previewing an export. Additionally, it accepts an optional\n parameter, <tt>exportLocation</tt>, which can be used to specify a <em>relative</em> path within\n <tt>data/migration/export</tt> in the shared home directory. No locations outside of that directory will be\n accepted for exports.\n\n <p>There are essentially three ways to select repositories for export. Regardless of which you use, a few\n general rules apply:\n <ul>\n     <li>You can supply a list of selectors. The selection will be additive.</li>\n     <li>Repositories that are selected more than once due to overlapping selectors will be de-duplicated and\n     effectively exported only once.</li>\n     <li>For every selected repository, its full fork hierarchy will be considered selected, even if parts of that\n     hierarchy would otherwise not be matched by the provided selectors. For example, when you explicitly\n     select a single repository only, but that repository is a fork, then its origin will be exported (and\n     eventually imported), too.</li>\n </ul>\n\n <p>Now, a single repository can be selected like this:\n\n <pre>\n     {\n        \"projectKey\": \"PRJ\",\n        \"slug\": \"my-repo\"\n     }\n     </pre>\n\n <p>Second, all repositories in a specific project can be selected like this:\n\n <pre>\n     {\n        \"projectKey\": \"PRJ\",\n        \"slug\": *\"\n     }\n     </pre>\n\n <p>And third, all projects and repositories in the system would be selected like this:\n\n <pre>\n     {\n        \"projectKey\": \"*\",\n        \"slug\": *\"\n     }\n     </pre>\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "startExport"
      }
    },
    "/migration/exports/preview": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Enumerates the projects and repositories that would be exported for a given export request.\n\n <p>All affected repositories will be enumerated explicitly, and while projects are listed as individual items in\n responses from this endpoint, their presence does not imply that all their repositories are included.\n\n <p>While this endpoint can be used to verify that all selectors in the request apply as intended, it should be\n noted that a subsequent, actual export might contain a different set of repositories, as they might have been\n added or deleted in the meantime.\n\n <p>Note that the overall response from this endpoint can become very large when a lot of repositories end up in\n the selection. This is why the server is streaming the response while it is being generated (as opposed to\n creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.\n\n <p>Also, due to the potential size of the response, projects and repositories are listed with fewer details than\n in other REST responses.\n\n <p>For a more detailed description of selectors, see the endpoint documentation for starting an export.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "previewExport"
      }
    },
    "/migration/exports/{jobId}": {
      "parameters": [
        {
          "description": "the ID of the job",
          "format": "int64",
          "in": "path",
          "name": "jobId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the details, including the current status and progress, of the export job identified by the given ID.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getExportJob",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/migration/exports/{jobId}/cancel": {
      "parameters": [
        {
          "description": "the ID of the job to cancel",
          "format": "int64",
          "in": "path",
          "name": "jobId",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Requests the cancellation of an export job.\n\n <p>The request to cancel a job will be processed successfully if the job is actually still running. If it has\n already finished (successfully or with errors) or if it has already been canceled before, then an error will be\n returned.\n\n <p>There might be a small delay between accepting the request and actually cancelling the job. In most cases,\n the delay will be close to instantaneously. In the unlikely case of communication issues across a cluster,\n it can however take a few seconds to cancel a job.\n\n <p>A client should always actively query the job status to confirm that a job has been successfully canceled.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "cancelExportJob"
      }
    },
    "/migration/exports/{jobId}/messages": {
      "parameters": [
        {
          "description": "the ID of the job",
          "format": "int64",
          "in": "path",
          "name": "jobId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the severity to include in the results",
            "in": "query",
            "name": "severity",
            "required": false,
            "type": "string"
          },
          {
            "description": "the subject",
            "in": "query",
            "name": "subject",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the messages generated by the job.\n\n <p>Without any filter, all messages will be returned, but the response can optionally be filtered for the\n following severities. The severity parameter can be repeated to include multiple severities\n in one response.\n\n <ul>\n     <li>INFO</li>\n     <li>WARN</li>\n     <li>ERROR</li>\n </ul>\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getExportJobMessages"
      }
    },
    "/migration/imports": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Starts a background job that imports the specified archive.\n\n <p>Only 1 import at a time is supported <em>per cluster</em>. If another request is made while an import is already\n running, the request will be rejected and an error returned.\n\n <p>The path in the request must point to a valid archive file. The file must be located within the\n <tt>data/migration/import</tt> directory in the shared home directory.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "startImport"
      }
    },
    "/migration/imports/{jobId}": {
      "parameters": [
        {
          "description": "the ID of the job",
          "format": "int64",
          "in": "path",
          "name": "jobId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the details, including the current status and progress, of the import job identified by the given ID.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getImportJob",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/migration/imports/{jobId}/cancel": {
      "parameters": [
        {
          "description": "the ID of the job to cancel",
          "format": "int64",
          "in": "path",
          "name": "jobId",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Requests the cancellation of an import job.\n\n <p>The request to cancel a job will be processed successfully if the job is actually still running. If it has\n already finished (successfully or with errors) or if it has already been canceled before, then an error will be\n returned.\n\n <p>Note that import jobs are not canceled as instantaneously as export jobs. Rather, once the request has been\n accepted, there are a number of checkpoints at which the job will actually apply it and stop. This is to keep\n the system in a reasonably consistent state:\n\n <ul>\n     <li>After the current fork hierarchy has been imported and verified.</li>\n     <li>Before the next repository is imported.</li>\n     <li>Before the next pull request is imported.</li>\n </ul>\n\n <p>A client should always actively query the job status to confirm that a job has been successfully canceled.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "cancelImportJob"
      }
    },
    "/migration/imports/{jobId}/messages": {
      "parameters": [
        {
          "description": "the ID of the job",
          "format": "int64",
          "in": "path",
          "name": "jobId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the severity to include in the results",
            "in": "query",
            "name": "severity",
            "required": false,
            "type": "string"
          },
          {
            "description": "the subject",
            "in": "query",
            "name": "subject",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the messages generated by the job.\n\n <p>Without any filter, all messages will be returned, but the response can optionally be filtered for the\n following severities. The severity parameter can be repeated to include multiple severities\n in one response.\n\n <ul>\n     <li>INFO</li>\n     <li>WARN</li>\n     <li>ERROR</li>\n </ul>\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getImportJobMessages"
      }
    },
    "/profile/recent/repos": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "(optional) if specified, it must be a valid repository permission level name and will limit\n                   the resulting repository list to ones that the requesting user has the specified permission\n                   level to. If not specified, the default <code>REPO_READ</code> permission level will be assumed.",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of recently accessed repositories for the currently authenticated user.\n <p>\n Repositories are ordered from most recently to least recently accessed.\n <p>\n Only authenticated users may call this resource.",
        "operationId": "getRepositoriesRecentlyAccessed"
      }
    },
    "/projects": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "name to filter by",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "permission to filter by",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of projects.\n <p>\n Only projects for which the authenticated user has the <strong>PROJECT_VIEW</strong> permission will be returned.",
        "operationId": "getProjects"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a new project.\n <p>\n To include a custom avatar for the project, the project definition should contain an additional attribute with\n the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in\n the following format:\n <pre>\n     data:(content type, e.g. image/png);base64,(data)\n </pre>\n If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid,\n <em>project creation will fail</em>.\n <p>\n The authenticated user must have <strong>PROJECT_CREATE</strong> permission to call this resource.",
        "operationId": "createProject"
      }
    },
    "/projects/{projectKey}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete the project matching the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "deleteProject"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the project matching the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this\n resource.",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the project matching the <strong>projectKey</strong> supplied in the resource path.\n <p>\n To include a custom avatar for the updated project, the project definition should contain an additional attribute\n with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be\n in the following format:\n <code>\n     data:(content type, e.g. image/png);base64,(data)\n </code>\n If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid,\n <em>project creation will fail</em>.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "updateProject"
      }
    },
    "/projects/{projectKey}/avatar.png": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": 0,
            "description": "The desired size of the image. The server will return an image as close as possible to the specified\n             size.",
            "format": "int32",
            "in": "query",
            "name": "s",
            "required": false,
            "type": "integer"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the avatar for the project matching the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this\n resource.",
        "operationId": "getProjectAvatar"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the avatar for the project matching the supplied <strong>projectKey</strong>.\n <p>\n This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.\n <p>\n There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded file size\n (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and\n <strong>JPEG</strong> are preferred due to the file size limit.\n <p>\n This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to\n pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the\n value <code>no-check</code>.\n <p>\n An example <a href=\"http://curl.haxx.se/\">curl</a> request to upload an image name 'avatar.png' would be:\n <pre>\n curl -X POST -u username:password -H \"X-Atlassian-Token: no-check\" http://example.com/rest/api/1.0/projects/STASH/avatar.png -F avatar=@avatar.png\n </pre>\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "uploadAvatar"
      }
    },
    "/projects/{projectKey}/permissions/groups": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "the name of the group",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Revoke all permissions for the specified project for a group.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.\n <p>\n In addition, a user may not revoke a group's permissions if it will reduce their own permission level.",
        "operationId": "revokePermissionsForGroup"
      },
      "get": {
        "parameters": [
          {
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups that have been granted at least one permission for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "getGroupsWithAnyPermission"
      },
      "put": {
        "parameters": [
          {
            "description": "The permission to grant.\n                       See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)\n                       for a detailed explanation of what each permission entails.\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "the names of the groups",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Promote or demote a group's permission level for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource. In addition, a user may not demote a group's permission level if their\n own permission level would be reduced as a result.",
        "operationId": "setPermissionForGroups"
      }
    },
    "/projects/{projectKey}/permissions/groups/none": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups that have no granted permissions for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "getGroupsWithoutAnyPermission"
      }
    },
    "/projects/{projectKey}/permissions/users": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "the name of the user",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Revoke all permissions for the specified project for a user.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.\n <p>\n In addition, a user may not revoke their own project permissions if they do not have a higher global permission.",
        "operationId": "revokePermissionsForUser"
      },
      "get": {
        "parameters": [
          {
            "description": "if specified only user names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of users that have been granted at least one permission for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "getUsersWithAnyPermission"
      },
      "put": {
        "parameters": [
          {
            "description": "the names of the users",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "the permission to grant. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)\n                       for a detailed explanation of what each permission entails.\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Promote or demote a user's permission level for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource. In addition, a user may not reduce their own permission level unless\n they have a global permission that already implies that permission.",
        "operationId": "setPermissionForUsers"
      }
    },
    "/projects/{projectKey}/permissions/users/none": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "if specified only user names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "getUsersWithoutPermission"
      }
    },
    "/projects/{projectKey}/permissions/{permission}/all": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "description": "the permission to grant\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
          "in": "path",
          "name": "permission",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Check whether the specified permission is the default permission (granted to all users) for a project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "hasAllUserPermission",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "<em>true</em> to grant the specified permission to all users, or <em>false</em> to revoke it",
            "in": "query",
            "name": "allow",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Grant or revoke a project permission to all users, i.e. set the default permission.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "modifyAllUserPermission"
      }
    },
    "/projects/{projectKey}/repos": {
      "parameters": [
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve repositories from the project corresponding to the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "getRepositories",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a new repository. Requires an existing project in which this repository will be created.\n The only parameters which will be used are name and scmId.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context project to call this\n resource.",
        "operationId": "createRepository"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}": {
      "parameters": [
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "description": "the repository slug",
          "in": "path",
          "name": "repositorySlug",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Schedule the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> to\n be deleted. If the request repository is not present\n <p>\n The authenticated user must have sufficient permissions specified by the repository delete policy to call this\n resource. The default permission required is <strong>REPO_ADMIN</strong> permission.",
        "operationId": "deleteRepository"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getRepository",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a new repository forked from an existing repository.\n <p>\n The JSON body for this <code>POST</code> is not required to contain <i>any</i> properties. Even the name may\n be omitted. The following properties will be used, if provided:\n <ul>\n     <li><code>\"name\":\"Fork name\"</code> - Specifies the forked repository's name\n     <ul>\n         <li>Defaults to the name of the origin repository if not specified</li>\n     </ul>\n     </li>\n     <li><code>\"defaultBranch\":\"main\"</code> - Specifies the forked repository's default branch\n     <ul>\n          <li>Defaults to the origin repository's default branch if not specified</li>\n     </ul>\n     </li>\n     <li><code>\"project\":{\"key\":\"TARGET_KEY\"}</code> - Specifies the forked repository's target project by key\n     <ul>\n         <li>Defaults to the current user's personal project if not specified</li>\n     </ul>\n     </li>\n </ul>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository and\n <strong>PROJECT_ADMIN</strong> on the target project to call this resource. Note that users <i>always</i>\n have <b>PROJECT_ADMIN</b> permission on their personal projects.",
        "operationId": "forkRepository"
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the repository matching the <strong>repositorySlug</strong> supplied in the resource path.\n <p>\n The repository's slug is derived from its name. If the name changes the slug may also change.\n <p>\n This resource can be used to change the repository's default branch by specifying a new default branch in the\n request. For example: <code>\"defaultBranch\":\"main\"</code>\n <p>\n This resource can be used to move the repository to a different project by specifying a new project in the\n request. For example: <code>\"project\":{\"key\":\"NEW_KEY\"}</code>\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "updateRepository"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/archive": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit to stream an archive of; if not supplied, an archive of the default branch is streamed",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "description": "a filename to include the \"Content-Disposition\" header",
            "in": "query",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "the format to stream the archive in; must be one of: zip, tar, tar.gz or tgz",
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string"
          },
          {
            "description": "paths to include in the streamed archive; may be repeated to include multiple paths",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "a prefix to apply to all entries in the streamed archive; if the supplied prefix does not end\n                 with a trailing <code>/</code>, one will be added automatically",
            "in": "query",
            "name": "prefix",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams an archive of the repository's contents at the requested commit. If no <code>at=</code> commit is\n requested, an archive of the default branch is streamed.\n <p>\n The <code>filename=</code> query parameter may be used to specify the exact filename to include in the\n <code>\"Content-Disposition\"</code> header. If an explicit filename is not provided, one will be automatically\n generated based on what is being archived. Its format depends on the <code>at=</code> value:\n <ul>\n     <li>No <code>at=</code> commit:\n     <code>&lt;slug&gt;-&lt;default-branch-name&gt;@&lt;commit&gt;.&lt;format&gt;</code>;\n     e.g. example-master@43c2f8a0fe8.zip</li>\n     <li><code>at=sha</code>: <code>&lt;slug&gt;-&lt;at&gt;.&lt;format&gt;</code>; e.g.\n     example-09bcbb00100cfbb5310fb6834a1d5ce6cac253e9.tar.gz</li>\n     <li><code>at=branchOrTag</code>: <code>&lt;slug&gt;-&lt;branchOrTag&gt;@&lt;commit&gt;.&lt;format&gt;</code>;\n     e.g. example-feature@bbb225f16e1.tar\n     <ul>\n         <li>If the branch or tag is qualified (e.g. <code>refs/heads/master</code>, the short name\n         (<code>master</code>) will be included in the filename</li>\n         <li>If the branch or tag's <i>short name</i> includes slashes (e.g. <code>release/4.6</code>),\n         they will be converted to hyphens in the filename (<code>release-4.5</code>)</li>\n     </ul>\n     </li>\n </ul>\n <p>\n Archives may be requested in the following formats by adding the <code>format=</code> query parameter:\n <ul>\n     <li><code>zip</code>: A zip file using standard compression (Default)</li>\n     <li><code>tar</code>: An uncompressed tarball</li>\n     <li><code>tar.gz</code> or <code>tgz</code>: A GZip-compressed tarball</li>\n </ul>\n The contents of the archive may be filtered by using the <code>path=</code> query parameter to specify paths to\n include. <code>path=</code> may be specified multiple times to include multiple paths.\n <p>\n The <code>prefix=</code> query parameter may be used to define a directory (or multiple directories) where\n the archive's contents should be placed. If the prefix does not end with <code>/</code>, one will be added\n automatically. The prefix is <i>always</i> treated as a directory; it is not possible to use it to prepend\n characters to the entries in the archive.\n <p>\n Archives of public repositories may be streamed by any authenticated or anonymous user. Streaming archives for\n non-public repositories requires an <i>authenticated user</i> with at least <b>REPO_READ</b> permission.",
        "operationId": "getArchive"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the attachment ID",
          "format": "int64",
          "in": "path",
          "name": "attachmentId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete an attachment.\n <p>\n The user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "deleteAttachment"
      },
      "get": {
        "parameters": [
          {
            "description": "the User-Agent header information",
            "in": "header",
            "name": "User-Agent",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the attachment.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is\n associated to the attachment.",
        "operationId": "getAttachment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}/metadata": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the attachment ID",
          "format": "int64",
          "in": "path",
          "name": "attachmentId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete attachment metadata.\n <p>\n The user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "deleteAttachmentMetadata"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the attachment metadata.\n<p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is\n associated to the attachment that has the attachment metadata.",
        "operationId": "getAttachmentMetadata",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Save attachment metadata.\n<p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is\n associated to the attachment that has the attachment metadata.",
        "operationId": "saveAttachmentMetadata"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/branches": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "base branch or tag to compare each branch to (for the metadata providers that uses that information)",
            "in": "query",
            "name": "base",
            "required": false,
            "type": "string"
          },
          {
            "description": "whether to retrieve plugin-provided metadata about each branch",
            "in": "query",
            "name": "details",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "the text to match on",
            "in": "query",
            "name": "filterText",
            "required": false,
            "type": "string"
          },
          {
            "description": "ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "controls whether exact and prefix matches will be boosted to the top",
            "in": "query",
            "name": "boostMatches",
            "required": false,
            "type": "boolean"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the branches matching the supplied <strong>filterText</strong> param.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getBranches"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Creates a branch using the information provided in the {@link RestCreateBranchRequest request}\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call\n this resource.",
        "operationId": "createBranch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/branches/default": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the repository's default branch, if it has been created. If the repository is empty, 204 No Content\n will be returned. For non-empty repositories, if the configured default branch has not yet been created a 404\n Not Found will be returned.\n <p>\n This URL is deprecated. Callers should use <code>GET /projects/{key}/repos/{slug}/default-branch</code> instead,\n which allows retrieving the <i>configured</i> default branch even if the ref has not been created yet.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getDefaultBranch",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the default branch of a repository.\n <p>\n This URL is deprecated. Callers should use <code>PUT /projects/{key}/repos/{slug}/default-branch</code> instead.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "setDefaultBranch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/browse": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "the commit ID or ref to retrieve the content for",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "if true only the size will be returned for the file path instead of the contents",
            "in": "query",
            "name": "size",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "if true only the type will be returned for the file path instead of the contents",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "if present and not equal to 'false', the blame will be returned for the file as well",
            "in": "query",
            "name": "blame",
            "required": false,
            "type": "string"
          },
          {
            "description": "if <code>blame&amp;noContent</code> only the blame is retrieved instead of the contents",
            "in": "query",
            "name": "noContent",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of content for a file path at a specified revision.\n <p>\n Responses from this endpoint vary widely depending on the query parameters. The example JSON is for a request\n that does not use <code>size</code>, <code>type</code>, <code>blame</code> or <code>noContent</code>.\n <ol>\n     <li><code>size</code> will return a response like <code>{\"size\":10000}</code></li>\n     <li><code>type</code> will return a response like <code>{\"type\":\"FILE\"}, where possible values are\n     \"DIRECTORY\", \"FILE\" and \"SUBMODULE\"</code></li>\n     <li><code>blame</code> <i>without</i> <code>noContent</code> will include blame for the lines of\n     content returned on the page</li>\n     <li><code>blame</code> <i>with</i> <code>noContent</code> will omit file contents and only return\n     blame for the requested lines</li>\n     <li><code>noContent</code> without <code>blame</code> is ignored and does nothing</li>\n </ol>\n The various parameters are \"processed\" in the above order. That means <code>?size=true&amp;type=true</code>\n will return a <code>size</code> response, not a <code>type</code> one; the <code>type</code> parameter will\n be ignored.\n <p>\n The <code>blame</code> and <code>noContent</code> query parameters are handled differently from\n <code>size</code> and <code>type</code>. For <code>blame</code> and <code>noContent</code>, the\n <i>presence</i> of the parameter implies \"true\" if no value is specified; <code>size</code> and\n and <code>type</code> both require an explicit <code>=true</code> or they're treated as \"false\".\n <ul>\n     <li><code>?blame</code> is the same as <code>?blame=true</code></li>\n     <li><code>?blame&amp;noContent</code> is the same as <code>?blame=true&amp;noContent=true</code></li>\n     <li><code>?size</code> is the same as <code>?size=false</code></li>\n     <li><code>?type</code> is the same as <code>?type=false</code></li>\n </ul>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getContent"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/browse/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "default": "",
          "description": "the file path to retrieve content from",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "the commit ID or ref to retrieve the content for",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "if true only the size will be returned for the file path instead of the contents",
            "in": "query",
            "name": "size",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "if true only the type will be returned for the file path instead of the contents",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "if present and not equal to 'false', the blame will be returned for the file as well",
            "in": "query",
            "name": "blame",
            "required": false,
            "type": "string"
          },
          {
            "description": "if <code>blame&amp;noContent</code> only the blame is retrieved instead of the contents",
            "in": "query",
            "name": "noContent",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of content for a file path at a specified revision.\n <p>\n Responses from this endpoint vary widely depending on the query parameters. The example JSON is for a request\n that does not use <code>size</code>, <code>type</code>, <code>blame</code> or <code>noContent</code>.\n <ol>\n     <li><code>size</code> will return a response like <code>{\"size\":10000}</code></li>\n     <li><code>type</code> will return a response like <code>{\"type\":\"FILE\"}, where possible values are\n     \"DIRECTORY\", \"FILE\" and \"SUBMODULE\"</code></li>\n     <li><code>blame</code> <i>without</i> <code>noContent</code> will include blame for the lines of\n     content returned on the page</li>\n     <li><code>blame</code> <i>with</i> <code>noContent</code> will omit file contents and only return\n     blame for the requested lines</li>\n     <li><code>noContent</code> without <code>blame</code> is ignored and does nothing</li>\n </ol>\n The various parameters are \"processed\" in the above order. That means <code>?size=true&amp;type=true</code>\n will return a <code>size</code> response, not a <code>type</code> one; the <code>type</code> parameter will\n be ignored.\n <p>\n The <code>blame</code> and <code>noContent</code> query parameters are handled differently from\n <code>size</code> and <code>type</code>. For <code>blame</code> and <code>noContent</code>, the\n <i>presence</i> of the parameter implies \"true\" if no value is specified; <code>size</code> and\n and <code>type</code> both require an explicit <code>=true</code> or they're treated as \"false\".\n <ul>\n     <li><code>?blame</code> is the same as <code>?blame=true</code></li>\n     <li><code>?blame&amp;noContent</code> is the same as <code>?blame=true&amp;noContent=true</code></li>\n     <li><code>?size</code> is the same as <code>?size=false</code></li>\n     <li><code>?type</code> is the same as <code>?type=false</code></li>\n </ul>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getContent"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the content of <code>path</code>, on the given <code>repository</code> and <code>branch</code>.\n <p>\n This resource accepts PUT multipart form data, containing the file in a form-field named <code>content</code>.\n <p>\n An example <a href=\"http://curl.haxx.se/\">curl</a> request to update 'README.md' would be:\n <pre>\n curl -X PUT -u username:password -F content=@README.md  -F 'message=Updated using file-edit REST API'\n -F branch=master -F  sourceCommitId=5636641a50b\n  http://example.com/rest/api/latest/projects/PROJECT_1/repos/repo_1/browse/README.md\n </pre>\n <ul>\n <li>branch:  the branch on which the <code>path</code> should be modified or created</li>\n <li>content: the full content of the file at <code>path</code> </li>\n <li>message: the message associated with this change, to be used as the commit message.\n Or null if the default message should be used.</li>\n <li>sourceCommitId: the commit ID of the file before it was edited, used to identify if\n content has changed. Or null if this is a new file</li>\n </ul>\n <p>\n The file can be updated or created on a new branch. In this case, the <code>sourceBranch</code> parameter should\n be provided to identify the starting point for the new branch and the <code>branch</code> parameter identifies\n the branch to create the new commit on.",
        "operationId": "editFile"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/changes": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit to which <code>until</code> should be compared to produce a page of changes.\n                     If not specified the commit's first parent is assumed (if one exists)",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the commit to retrieve changes for",
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of changes made in a specified commit.\n <p>\n <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not\n possible to request subsequent content when that cap is exceeded.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getChanges"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": false,
            "description": "if <code>true</code>, the commit history of the specified file will be followed past renames.\n                      Only valid for a path to a single file.",
            "in": "query",
            "name": "followRenames",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "<code>true</code> to ignore missing commits, <code>false</code> otherwise",
            "in": "query",
            "name": "ignoreMissing",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "if present, controls how merge commits should be filtered. Can be either <code>exclude</code>,\n               to exclude merge commits, <code>include</code>, to include both merge commits and non-merge\n               commits or <code>only</code>, to only return merge commits.",
            "in": "query",
            "name": "merges",
            "required": false,
            "type": "string"
          },
          {
            "description": "an optional path to filter commits by",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "the commit ID or ref (exclusively) to retrieve commits after",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the commit ID (SHA1) or ref (inclusively) to retrieve commits before",
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "optionally include the total number of commits and total number of unique authors",
            "in": "query",
            "name": "withCounts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "if present the service adds avatar URLs for commit authors. Should be an integer specifying\n                   the desired size in pixels. If the parameter is not present, avatar URLs will not be set",
            "in": "query",
            "name": "avatarSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "the desired scheme for the avatar URL. If the parameter is not present URLs will use the\n                     same scheme as this request",
            "in": "query",
            "name": "avatarScheme",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of commits from a given starting commit or \"between\" two commits. If no explicit commit is\n specified, the tip of the repository's default branch is assumed. commits may be identified by branch or tag\n name or by ID. A path may be supplied to restrict the returned commits to only those which affect that path.\n <p>\n The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this\n resource.",
        "operationId": "getCommits"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the commit ID to retrieve",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "an optional path to filter the commit by. If supplied the details returned <i>may not</i>\n             be for the specified commit. Instead, starting from the specified commit, they will be the\n             details for the first commit affecting the specified path.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a single commit <i>identified by its ID</i>. In general, that ID is a SHA1. <u>From 2.11, ref names\n like \"refs/heads/master\" are no longer accepted by this resource.</u>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getCommit"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "full SHA1 of the commit (ex: <code>e00cf62997a027bbf785614a93e2e55bb331d268</code>)",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Store a build status.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this\n build status is for. The request can also be made with anonymous 2-legged OAuth.",
        "operationId": "add"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/changes": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the commit to retrieve changes for",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit to which <code>until</code> should be compared to produce a page of changes.\n                      If not specified the commit's first parent is assumed (if one exists)",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "{@code true} to apply comment counts in the changes (the default); otherwise, {@code false}\n                      to stream changes without comment counts",
            "in": "query",
            "name": "withComments",
            "required": false,
            "type": "boolean"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of changes made in a specified commit.\n <p>\n <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not\n possible to request subsequent content when that cap is exceeded.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getChanges"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the path to the file on which comments were made",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "for a merge commit, a parent can be provided to specify which diff the comments are on. For\n                      a commit range, a {@code sinceId} can be provided to specify where the comments are anchored\n                      from.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the commit discussion comments that match the specified search criteria.\n <p>\n It is possible to retrieve commit discussion comments that are anchored to a range of commits by providing the\n {@code sinceId} that the comments anchored from.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "getComments"
      },
      "post": {
        "parameters": [
          {
            "description": "for a merge commit, a parent can be provided to specify which diff the comments should be on. For\n                 a commit range, a {@code sinceId} can be provided to specify where the comments should be\n                 anchored from.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add a new comment.\n <p>\n Comments can be added in a few places by setting different attributes:\n <p>\n General commit comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a commit.\"\n     }\n     </pre>\n\n Reply to a comment:\n\n <pre>\n     {\n         \"text\": \"A measured reply.\",\n         \"parent\": {\n             \"id\": 1\n         }\n     }\n     </pre>\n\n General file comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n File line comment:\n\n <pre>\n     {\n         \"text\": \"A pithy comment on a particular line within a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"line\": 1,\n             \"lineType\": \"CONTEXT\",\n             \"fileType\": \"FROM\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n     }\n     }\n     </pre>\n <strong>Note: general file comments are an experimental feature and may change in the near future!</strong>\n <p>\n For file and line comments, 'path' refers to the path of the file to which the comment should be applied and\n 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,\n fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment\n was added. Finally diffType refers to the type of diff the comment was added on.\n <p>\n For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to\n the type of diff hunk, which can be:\n <ul>\n     <li>'ADDED' - for an added line;</li>\n     <li>'REMOVED' - for a removed line; or</li>\n     <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>\n </ul>\n 'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when\n displaying the diff in a side-by-side way. Currently the supported values are:\n <ul>\n     <li>'FROM' - the source file of the diff</li>\n     <li>'TO' - the destination file of the diff</li>\n </ul>\n If the current user is not a participant the user is added as one and updated to watch the commit.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "createComment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        },
        {
          "description": "the ID of the comment to retrieve",
          "format": "int64",
          "in": "path",
          "name": "commentId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "parameters": [
          {
            "default": -1,
            "description": "the expected version of the comment. This must match the server's version of the comment or\n                  the delete will fail. To determine the current version of the comment, the comment should be\n                  fetched from the server prior to the delete. Look for the 'version' attribute in the returned\n                  JSON structure.",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete a commit comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>\n and above may delete comments created by other users. Comments which have replies <i>may not be deleted</i>,\n regardless of the user's granted permissions.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "deleteComment"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a commit discussion comment.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "getComment",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update a comment, with the following restrictions:\n <ul>\n     <li>only the author of the comment may update the <i>text</i> of the comment</li>\n     <li>only the author of the comment or repository admins and above may update the other fields of a comment</li>\n </ul>\n <p>\n <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match\n the server's version of the comment or the update will fail. To determine the current version of the comment,\n the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the\n returned JSON structure.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "updateComment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the target revision to diff to (required)",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "default": false,
            "description": "{@code true} to automatically try to find the source path when it's not provided,\n                      {@code false} otherwise. Requires the {@code path} to be provided.",
            "in": "query",
            "name": "autoSrcPath",
            "required": false,
            "type": "boolean"
          },
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the source path for the file, if it was copied, moved or renamed",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional whitespace flag which can be set to {@code ignore-all}",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Stream the diff between two provided revisions.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the target revision to diff to (required)",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        },
        {
          "description": "the path to the file which should be diffed (optional)",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "default": false,
            "description": "{@code true} to automatically try to find the source path when it's not provided,\n                      {@code false} otherwise. Requires the {@code path} to be provided.",
            "in": "query",
            "name": "autoSrcPath",
            "required": false,
            "type": "boolean"
          },
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the source path for the file, if it was copied, moved or renamed",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional whitespace flag which can be set to {@code ignore-all}",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Stream the diff between two provided revisions.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the commit ID",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of pull requests in the current repository that contain the given commit.\n <p>\n The user must be authenticated and have access to the specified repository to call this resource.",
        "operationId": "getPullRequests",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/watch": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
          "in": "path",
          "name": "commitId",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Remove the authenticated user as a watcher for the specified commit.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit\n to call this resource.",
        "operationId": "unwatch"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add the authenticated user as a watcher for the specified commit.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit\n to call this resource.",
        "operationId": "watch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/compare/changes": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "an optional parameter specifying the source repository containing the source commit\n                 if that commit is not present in the current repository; the repository can be specified\n                 by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by\n                 a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "in": "query",
            "name": "fromRepo",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the file changes available in the {@code from} commit but not in the {@code to} commit.\n <p>\n If either the {@code from} or {@code to} commit are not specified, they will be replaced by the\n default branch of their containing repository.",
        "operationId": "streamChanges"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/compare/commits": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "an optional parameter specifying the source repository containing the source commit\n                 if that commit is not present in the current repository; the repository can be specified\n                 by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by\n                 a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "in": "query",
            "name": "fromRepo",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets the commits accessible from the {@code from} commit but not in the {@code to} commit.\n <p>\n If either the {@code from} or {@code to} commit are not specified, they will be replaced by the\n default branch of their containing repository.",
        "operationId": "streamCommits"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/compare/diff{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the path to the file to diff (optional)",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "default": "",
            "description": "an optional parameter specifying the source repository containing the source commit\n                 if that commit is not present in the current repository; the repository can be specified\n                 by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by\n                 a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "in": "query",
            "name": "fromRepo",
            "required": false,
            "type": "string"
          },
          {
            "description": "source path",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "default": -1,
            "description": "an optional number of context lines to include around each added or removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "description": "an optional whitespace flag which can be set to <code>ignore-all</code>",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets a diff of the changes available in the {@code from} commit but not in the {@code to} commit.\n <p>\n If either the {@code from} or {@code to} commit are not specified, they will be replaced by the\n default branch of their containing repository.",
        "operationId": "streamDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/contributing": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "a specific commit or ref to retrieve the guidelines at, or the default branch if not\n                         specified",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks.\n                         If not specified, the value of the <code>markup.render.hardwrap</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "hardwrap",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise.\n                         If not specified, the value of the <code>markup.render.html.escape</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "htmlEscape",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if headings should contain an ID based on the heading content.\n                         If not specified, the value of the <code>markup.render.headerids</code> property,\n                         which is false by default, will be used",
            "in": "query",
            "name": "includeHeadingId",
            "required": false,
            "type": "string"
          },
          {
            "description": "if present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and\n                         returned as HTML; otherwise, if not specified, or any value other than\n                         <code>\"true\"</code>, the content is streamed without markup",
            "in": "query",
            "name": "markup",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the contributing guidelines for the repository, if they've been defined.\n <p>\n This checks the repository for a <pre>CONTRIBUTING</pre> file, optionally with an <pre>md</pre> or\n <pre>txt</pre> extension, and, if found, streams it. By default, the <i>raw content</i> of the file\n is streamed. Appending <pre>?markup</pre> to the URL will stream an HTML-rendered version instead.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamContributing"
      },
      "head": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "findContributing"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/default-branch": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the repository's <i>configured</i> default branch.\n <p>\n Every repository has a <i>configured</i> default branch, but that branch may not actually <i>exist</i> in\n the repository. For example, a newly-created repository will have a configured default branch even though\n no branches have been pushed yet.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "getDefaultBranch",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the default branch of a repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to\n call this resource.",
        "operationId": "setDefaultBranch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/diff": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the source path for the file, if it was copied, moved or renamed",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "the target revision to diff to (required)",
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Stream the raw diff between two provided revisions.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/diff/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the source path for the file, if it was copied, moved or renamed",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "description": "the target revision to diff to (required)",
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Stream the raw diff between two provided revisions.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/files": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit ID or ref (e.g. a branch or tag) to list the files at.\n             If not specified the default branch will be used instead.",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files\n from any sub-directory of the specified directory will be returned.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamFiles"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/files/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "default": "",
          "description": "the directory to list files for.",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit ID or ref (e.g. a branch or tag) to list the files at.\n             If not specified the default branch will be used instead.",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files\n from any sub-directory of the specified directory will be returned.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamFiles"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/forks": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve repositories which have been forked from this one. Unlike {@link #getRelatedRepositories(Repository,\n PageRequest) related repositories}, this only looks at a given repository's direct forks. If those forks have\n themselves been the origin of more forks, such \"grandchildren\" repositories will not be retrieved.\n <p>\n Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even\n if other repositories have been forked from this one.",
        "operationId": "getForkedRepositories",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/labels": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Get all labels applied to the given repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository.",
        "operationId": "getAllLabelsForRepository",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Applies a label to the repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "addLabel"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/labels/{labelName}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the label to remove",
          "in": "path",
          "name": "labelName",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Remove label that is applied to the given repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "removeLabel"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/last-modified": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit to use as the starting point when listing files and calculating modifications",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications\n are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.\n <p>\n Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.",
        "operationId": "stream"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/last-modified/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the path within the repository whose files should be streamed",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the commit to use as the starting point when listing files and calculating modifications",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications\n are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.\n <p>\n Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.",
        "operationId": "stream"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/license": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "a specific commit or ref to retrieve the license at, or the default branch if not\n                         specified",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks.\n                         If not specified, the value of the <code>markup.render.hardwrap</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "hardwrap",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise.\n                         If not specified, the value of the <code>markup.render.html.escape</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "htmlEscape",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if headings should contain an ID based on the heading content.\n                         If not specified, the value of the <code>markup.render.headerids</code> property,\n                         which is false by default, will be used",
            "in": "query",
            "name": "includeHeadingId",
            "required": false,
            "type": "string"
          },
          {
            "description": "if present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and\n                         returned as HTML; otherwise, if not specified, or any value other than\n                         <code>\"true\"</code>, the content is streamed without markup",
            "in": "query",
            "name": "markup",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the license for the repository, if it's been defined.\n <p>\n This checks the repository for a <pre>LICENSE</pre> file, optionally with an <pre>md</pre> or <pre>txt</pre>\n extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending\n <pre>?markup</pre> to the URL will stream an HTML-rendered version instead.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamLicense"
      },
      "head": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "findLicense"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/participants": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "incoming",
            "description": "(optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified\n                  repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.",
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) return only users, whose username, name or email address <i>contain</i>\n                  the {@code filter} value",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) The role associated with the pull request participant.\n                  This must be one of {@code AUTHOR}, {@code REVIEWER}, or{@code PARTICIPANT}",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of participant users for all the pull requests to or from the specified repository.\n <p>\n Optionally clients can specify following filters.",
        "operationId": "search"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/patch": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "indicates whether or not to generate a patch which includes all the ancestors of the until\n                     revision. If true, the value provided by {@code since} is ignored.",
            "in": "query",
            "name": "allAncestors",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "the base revision from which to generate the patch. This is only applicable when\n                     {@code allAncestors} is false. If omitted the patch will represent one single commit, the\n                     {@code until}.",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "the target revision from which to generate the patch (required)",
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the patch content for a repository at a specified revision.\n <p>\n Cache headers are added to the response (only if full commit hashes are used, not in the case of short hashes).\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamPatch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/permissions/groups": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "the name of the group",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Revoke all permissions for the specified repository for a group.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.\n <p>\n In addition, a user may not revoke a group's permissions if it will reduce their own permission level.",
        "operationId": "revokePermissionsForGroup"
      },
      "get": {
        "parameters": [
          {
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups that have been granted at least one permission for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getGroupsWithAnyPermission"
      },
      "put": {
        "parameters": [
          {
            "description": "the permission to grant",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "the names of the groups",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Promote or demote a group's permission level for the specified repository. Available repository permissions are:\n <ul>\n     <li>REPO_READ</li>\n     <li>REPO_WRITE</li>\n     <li>REPO_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions\">Bitbucket\n Server documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource. In addition, a user may not demote a group's permission level if their\n own permission level would be reduced as a result.",
        "operationId": "setPermissionForGroup"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/permissions/groups/none": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "if specified only group names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of groups that have no granted permissions for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getGroupsWithoutAnyPermission"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/permissions/users": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "the name of the user",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Revoke all permissions for the specified repository for a user.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.\n <p>\n In addition, a user may not revoke their own repository permissions if they do not have a higher\n project or global permission.",
        "operationId": "revokePermissionsForUser"
      },
      "get": {
        "parameters": [
          {
            "description": "if specified only user names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of users that have been granted at least one permission for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getUsersWithAnyPermission"
      },
      "put": {
        "parameters": [
          {
            "description": "the names of the users",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "the permission to grant",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Promote or demote a user's permission level for the specified repository. Available repository permissions are:\n <ul>\n     <li>REPO_READ</li>\n     <li>REPO_WRITE</li>\n     <li>REPO_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions\">Bitbucket\n Server documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource. In addition, a user may not reduce their own permission level unless\n they have a project or global permission that already implies that permission.",
        "operationId": "setPermissionForUser"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/permissions/users/none": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "if specified only user names containing the supplied string will be returned",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getUsersWithoutPermission"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "incoming",
            "description": "(optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified\n                  repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.",
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) a <i>fully-qualified</i> branch ID to find pull requests to or from,\n           such as {@code refs/heads/master}",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional, defaults to <strong>OPEN</strong>). Supply <strong>ALL</strong> to return pull request\n               in any state. If a state is supplied only pull requests in the specified state will be returned.\n               Either <strong>OPEN</strong>, <strong>DECLINED</strong> or <strong>MERGED</strong>.",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either\n              <strong>OLDEST</strong> (as in: \"oldest first\") or <strong>NEWEST</strong>.",
            "in": "query",
            "name": "order",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "(optional) defaults to true, whether to return additional pull request attributes",
            "in": "query",
            "name": "withAttributes",
            "required": false,
            "type": "boolean"
          },
          {
            "default": true,
            "description": "(optional) defaults to true, whether to return additional pull request properties",
            "in": "query",
            "name": "withProperties",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "(optional) If specified, only pull requests where the title or description contains the\n                   supplied string will be returned.",
            "in": "query",
            "name": "filterText",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of pull requests to or from the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.\n\n Optionally clients can specify PR participant filters. Each filter has a mandatory {@code username.N}\n parameter, and the optional {@code role.N} and {@code approved.N} parameters.\n <ul>\n     <li>\n         {@code username.N} - the \"root\" of a single participant filter, where \"N\" is a natural number\n         starting from 1. This allows clients to specify multiple participant filters, by providing consecutive\n         filters as {@code username.1}, {@code username.2} etc. Note that the filters numbering has to start\n         with 1 and be continuous for all filters to be processed. The total allowed number of participant\n         filters is 10 and all filters exceeding that limit will be dropped.\n     </li>\n     <li>\n         {@code role.N}(optional) the role associated with {@code username.N}.\n         This must be one of {@code AUTHOR}, {@code REVIEWER}, or{@code PARTICIPANT}\n     </li>\n     <li>\n         {@code approved.N}(optional) the approved status associated with {@code username.N}.\n         That is whether {@code username.N} has approved the PR. Either {@code true}, or {@code false}\n     </li>\n </ul>",
        "operationId": "getPage"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a new pull request between two branches. The branches may be in the same repository, or different ones.\n When using different repositories, they must still be in the same {@link Repository#getHierarchyId() hierarchy}.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the \"from\" and \"to\"repositories to\n call this resource.",
        "operationId": "create"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Deletes a pull request.\n <p>\n To call this resource, users must be authenticated and have permission to view the pull request.\n Additionally, they must:\n <ul>\n     <li>\n         be the pull request author, if the system is configured to allow authors to delete their own\n         pull requests (this is the default) OR\n     </li>\n     <li>have repository administrator permission for the repository the pull request is targeting</li>\n </ul>\n\n A body containing the version of the pull request must be provided with this request.\n\n <pre><code>{ \"version\": 1 }</code></pre>",
        "operationId": "delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "get",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the title, description, reviewers or destination branch of an existing pull request.\n <p>\n <strong>Note:</strong> the <em>reviewers</em> list may be updated using this resource. However the\n <em>author</em> and <em>participants</em> list may not.\n <p>\n The authenticated user must either:\n <ul>\n     <li>be the author of the pull request and have the <strong>REPO_READ</strong> permission for the repository\n     that this pull request targets; or</li>\n     <li>have the <strong>REPO_WRITE</strong> permission for the repository that this pull request targets</li>\n </ul>\n to call this resource.",
        "operationId": "update"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.diff": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams the raw diff for a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.patch": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams a patch representing a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "streamPatch",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "(optional) the ID of the activity item to use as the first item in the returned page",
            "format": "int64",
            "in": "query",
            "name": "fromId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "(required if <strong>fromId</strong> is present) the type of the activity item specified by\n                 <strong>fromId</strong> (either <strong>COMMENT</strong> or <strong>ACTIVITY</strong>)",
            "in": "query",
            "name": "fromType",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of activity associated with a pull request.\n <p>\n Activity items include comments, approvals, rescopes (i.e. adding and removing of commits), merges and more.\n <p>\n Different types of activity items may be introduced in newer versions of Stash or by user installed plugins, so\n clients should be flexible enough to handle unexpected entity shapes in the returned page.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getActivities"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Remove approval from a pull request as the current user. This does not remove the user as a participant.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead",
        "operationId": "withdrawApproval"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Approve a pull request as the current user. Implicitly adds the user as a participant if they are not already.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead",
        "operationId": "approve"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": false,
            "description": "if true only the count of the comments by state will be returned (and not the body of the comments).",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "(optional). If supplied, only comments with a state in the given list will be returned. The\n                    state can be OPEN or RESOLVED.",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets comments matching the given set of field values for the specified pull request.\n (Note this does <b>not</b> perform any kind of searching for comments by their text).\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getComments"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add a new blocker comment.\n <p>\n Comments can be added in a few places by setting different attributes:\n <p>\n General pull request blocker comment:\n\n <pre>\n     {\n         \"text\": \"A task on a pull request.\"\n     }\n     </pre>\n\n Blocker reply to a comment:\n\n <pre>\n     {\n         \"text\": \"This reply is a task.\",\n         \"parent\": {\n             \"id\": 1\n         }\n     }\n     </pre>\n\n General blocker file comment:\n\n <pre>\n     {\n         \"text\": \"A blocker comment on a file.\",\n         \"anchor\": {\n             \"diffType\": \"RANGE\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n Blocker file line comment:\n\n <pre>\n     {\n         \"text\": \"A task on a particular line within a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"line\": 1,\n             \"lineType\": \"CONTEXT\",\n             \"fileType\": \"FROM\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n <p>\n For file and line comments, 'path' refers to the path of the file to which the comment should be applied and\n 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,\n fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment\n was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility\n purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to\n 'EFFECTIVE'. In any other cases the diffType is REQUIRED.\n <p>\n For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to\n the type of diff hunk, which can be:\n <ul>\n     <li>'ADDED' - for an added line;</li>\n     <li>'REMOVED' - for a removed line; or</li>\n     <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>\n </ul>\n 'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when\n displaying the diff in a side-by-side way. Currently the supported values are:\n <ul>\n     <li>'FROM' - the source file of the diff</li>\n     <li>'TO' - the destination file of the diff</li>\n </ul>\n If the current user is not a participant the user is added as a watcher of the pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "createComment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the comment to retrieve",
          "format": "int64",
          "in": "path",
          "name": "commentId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "parameters": [
          {
            "default": -1,
            "description": "The expected version of the comment. This must match the server's version of the comment or\n                    the delete will fail. To determine the current version of the comment, the comment should be\n                    fetched from the server prior to the delete. Look for the 'version' attribute in the\n                    returned JSON structure.",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>\n and above may delete comments created by other users.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "deleteComment"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a pull request comment.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getComment",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update a comment, with the following restrictions:\n <ul>\n     <li>only the author of the comment may update the <i>text</i> of the comment</li>\n     <li>only the author of the comment, the author of the pull request or repository admins and above may update\n     the other fields of a comment</li>\n </ul>\n\n <p>\n Convert a comment to a task or vice versa.\n <p>\n Comments can be converted to tasks by setting the 'severity' attribute to 'BLOCKER':\n\n <pre>\n     {\n     \"severity\": \"BLOCKER\"\n     }\n     </pre>\n\n <p>\n Tasks can be converted to comments by setting the 'severity' attribute to 'NORMAL':\n\n <pre>\n     {\n     \"severity\": \"NORMAL\"\n     }\n     </pre>\n\n <p>\n Resolve a blocker comment.\n <p>\n Blocker comments can be resolved by setting the 'state' attribute to 'RESOLVED':\n\n <pre>\n     {\n     \"state\": \"RESOLVED\"\n     }\n     </pre>\n\n <p>\n <strong>Note:</strong> the supplied JSON object must contain a <code>version</code> that must match the\n server's version of the comment or the update will fail. To determine the current version of\n the comment, the comment should be fetched from the server prior to the update. Look for the\n 'version' attribute in the returned JSON structure.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "updateComment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "ALL",
            "description": "{@code UNREVIEWED} to stream the unreviewed changes for the current user (if they exist);\n                    {@code RANGE} to stream changes between two arbitrary commits (requires {@code sinceId} and\n                    {@code untilId}); otherwise {@code ALL} to stream all changes (the default)",
            "in": "query",
            "name": "changeScope",
            "required": false,
            "type": "string"
          },
          {
            "description": "the since commit hash to stream changes for a {@code RANGE} arbitrary change scope",
            "in": "query",
            "name": "sinceId",
            "required": false,
            "type": "string"
          },
          {
            "description": "the until commit hash to stream changes for a {@code RANGE} arbitrary change scope",
            "in": "query",
            "name": "untilId",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "{@code true} to apply comment counts in the changes (the default); otherwise, {@code false}\n                     to stream changes without comment counts",
            "in": "query",
            "name": "withComments",
            "required": false,
            "type": "boolean"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets changes for the specified PullRequest.\n <p>\n If the {@code changeScope} query parameter is set to {@code unreviewed}, the application will attempt to stream\n unreviewed changes based on the {@code lastReviewedCommit} of the current user, which are the changes between the\n {@code lastReviewedCommit} and the latest commit of the source branch. The current user is considered to\n <i>not</i> have any unreviewed changes for the pull request when the {@code lastReviewedCommit} is either\n {@code null} (everything is unreviewed, so all changes are streamed), equal to the latest commit of the source\n branch (everything is reviewed), or no longer on the source branch (the source branch has been rebased). In these\n cases, the application will fall back to streaming all changes (the default), which is the effective diff for the\n pull request. The type of changes streamed can be determined by the {@code changeScope} parameter included in the\n properties map of the response.\n <p>\n Note: This resource is currently <i>not paged</i>. The server will return at most one page. The server will\n truncate the number of changes to either the request's page limit or an internal maximum, whichever is smaller.\n The start parameter of the page request is also ignored.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "streamChanges"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "ACTIVE",
            "description": "{@code ACTIVE} to stream the active comments;\n                    {@code ORPHANED} to stream the orphaned comments;\n                    {@code ALL} to stream both the active and the orphaned comments;",
            "in": "query",
            "name": "anchorState",
            "required": false,
            "type": "string"
          },
          {
            "description": "{@code EFFECTIVE} to stream the comments related to the effective diff of the pull request;\n                    {@code RANGE} to stream comments related to a commit range between two arbitrary commits\n                                  (requires {@code fromHash} and {@code toHash});\n                    {@code COMMIT} to stream comments related to a commit between two arbitrary commits (requires\n                        {@code fromHash} and {@code toHash})",
            "in": "query",
            "name": "diffType",
            "required": false,
            "type": "string"
          },
          {
            "description": "the from commit hash to stream comments for a {@code RANGE} or {@code COMMIT} arbitrary change scope",
            "in": "query",
            "name": "fromHash",
            "required": false,
            "type": "string"
          },
          {
            "description": "the path to stream comments for a given path",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "the to commit hash to stream comments for a {@code RANGE} or {@code COMMIT} arbitrary change scope",
            "in": "query",
            "name": "toHash",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Gets comments for the specified pull request and path.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getComments"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add a new comment.\n <p>\n Comments can be added in a few places by setting different attributes:\n <p>\n General pull request comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a pull request.\"\n     }\n     </pre>\n\n Reply to a comment:\n\n <pre>\n     {\n         \"text\": \"A measured reply.\",\n         \"parent\": {\n             \"id\": 1\n         }\n     }\n     </pre>\n\n General file comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a file.\",\n         \"anchor\": {\n             \"diffType\": \"RANGE\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n File line comment:\n\n <pre>\n     {\n         \"text\": \"A pithy comment on a particular line within a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"line\": 1,\n             \"lineType\": \"CONTEXT\",\n             \"fileType\": \"FROM\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n <p>\n\n Add a new task.\n <p>\n Tasks are just comments with the attribute 'severity' set to 'BLOCKER':\n <p>\n General pull request task:\n\n <pre>\n     {\n     \"text\": \"A task on a pull request.\",\n     \"severity\": \"BLOCKER\"\n     }\n     </pre>\n\n <p>\n\n Add a pending comment.\n\n <p>\n Pending comments are just comments with the attribute 'state' set to 'PENDING':\n <p>\n Pending comment:\n <pre>\n     {\n        \"text\": \"This is a pending comment\",\n        \"state\": \"PENDING\"\n     }\n     </pre>\n\n <p>\n For file and line comments, 'path' refers to the path of the file to which the comment should be applied and\n 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,\n fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment\n was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility\n purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to\n 'EFFECTIVE'. In any other cases the diffType is REQUIRED.\n <p>\n For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to\n the type of diff hunk, which can be:\n <ul>\n     <li>'ADDED' - for an added line;</li>\n     <li>'REMOVED' - for a removed line; or</li>\n     <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>\n </ul>\n 'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when\n displaying the diff in a side-by-side way. Currently the supported values are:\n <ul>\n     <li>'FROM' - the source file of the diff</li>\n     <li>'TO' - the destination file of the diff</li>\n </ul>\n If the current user is not a participant the user is added as a watcher of the pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "createComment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the comment to retrieve",
          "format": "int64",
          "in": "path",
          "name": "commentId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "parameters": [
          {
            "default": -1,
            "description": "The expected version of the comment. This must match the server's version of the comment or\n                    the delete will fail. To determine the current version of the comment, the comment should be\n                    fetched from the server prior to the delete. Look for the 'version' attribute in the\n                    returned JSON structure.",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>\n and above may delete comments created by other users.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "deleteComment"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a pull request comment.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getComment",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update a comment, with the following restrictions:\n <ul>\n     <li>only the author of the comment may update the <i>text</i> of the comment</li>\n     <li>only the author of the comment, the author of the pull request or repository admins and above may update\n     the other fields of a comment</li>\n </ul>\n\n <p>\n Convert a comment to a task or vice versa.\n <p>\n Comments can be converted to tasks by setting the 'severity' attribute to 'BLOCKER':\n\n <pre>\n     {\n     \"severity\": \"BLOCKER\"\n     }\n     </pre>\n\n <p>\n Tasks can be converted to comments by setting the 'severity' attribute to 'NORMAL':\n\n <pre>\n     {\n     \"severity\": \"NORMAL\"\n     }\n     </pre>\n\n <p>\n Resolve a task.\n <p>\n Tasks can be resolved by setting the 'state' attribute to 'RESOLVED':\n\n <pre>\n     {\n     \"state\": \"RESOLVED\"\n     }\n     </pre>\n\n <p>\n <strong>Note:</strong> the supplied JSON object must contain a <code>version</code> that must match the\n server's version of the comment or the update will fail. To determine the current version of\n the comment, the comment should be fetched from the server prior to the update. Look for the\n 'version' attribute in the returned JSON structure.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "updateComment"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/apply-suggestion": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "commentId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Apply a suggestion contained within a comment.",
        "operationId": "applySuggestion"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "ID of the pullrequest, part of the path",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "if set to true, the service will add \"authorCount\" and \"totalCount\" at the end of the page.\n                      \"authorCount\" is the number of different authors and \"totalCount\" is the total number of commits.",
            "in": "query",
            "name": "withCounts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "if present the service adds avatar URLs for commit authors. Should be an integer\n                      specifying the desired size in pixels. If the parameter is not present, avatar URLs\n                      will not be set",
            "in": "query",
            "name": "avatarSize",
            "required": false,
            "type": "string"
          },
          {
            "description": "the desired scheme for the avatar URL. If the parameter is not present URLs will use\n                      the same scheme as this request",
            "in": "query",
            "name": "avatarScheme",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve commits for the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getCommits"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the pullrequest ID provided by the path",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "parameters": [
          {
            "default": -1,
            "description": "the current version of the pull request. If the server's version isn't the same as the specified\n                version the operation will fail. To determine the current version of the pull request it should be\n                fetched from the server prior to this operation. Look for the 'version' attribute in the returned\n                JSON structure.",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Decline a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "decline"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "sinceId",
            "required": false,
            "type": "string"
          },
          {
            "description": "the previous path to the file, if the file has been copied, moved or renamed",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "untilId",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams the raw diff for a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        },
        {
          "description": "the path to the file which should be diffed (optional)",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "default": -1,
            "description": "the number of context lines to include around added/removed lines in the diff",
            "format": "int32",
            "in": "query",
            "name": "contextLines",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "sinceId",
            "required": false,
            "type": "string"
          },
          {
            "description": "the previous path to the file, if the file has been copied, moved or renamed",
            "in": "query",
            "name": "srcPath",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "untilId",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "in": "query",
            "name": "whitespace",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Streams the raw diff for a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "streamRawDiff"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Test whether a pull request can be merged.\n <p>\n A pull request may not be merged if:\n <ul>\n     <li>there are conflicts that need to be manually resolved before merging; and/or</li>\n     <li>one or more merge checks have vetoed the merge.</li>\n </ul>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "canMerge",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "default": -1,
            "description": "the current version of the pull request. If the server's version isn't the same as the specified\n                version the operation will fail. To determine the current version of the pull request it should be\n                fetched from the server prior to this operation. Look for the 'version' attribute in the returned\n                JSON structure.",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Merge the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "merge"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "the participant's user name",
            "in": "query",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Unassigns a participant from the REVIEWER role they may have been given in a pull request.\n <p>\n If the participant has no explicit role this method has no effect.\n <p>\n Afterwards, the user will still remain a participant in the pull request but their role will be reduced to\n PARTICIPANT. This is because once made a participant of a pull request,\n a user will forever remain a participant. Only their role may be altered.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\n instead.",
        "operationId": "unassignParticipantRole"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves a page of the participants for a given pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "listParticipants",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Assigns a participant to an explicit role in pull request. Currently only the REVIEWER role may be assigned.\n <p>\n If the user is not yet a participant in the pull request, they are made one and assigned the supplied role.\n <p>\n If the user is already a participant in the pull request, their previous role is replaced with the supplied role\n unless they are already assigned the AUTHOR role which cannot be changed and will result in a Bad Request (400)\n response code.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "assignParticipantRole"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        },
        {
          "description": "the slug for the user changing their status",
          "in": "path",
          "name": "userSlug",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Unassigns a participant from the REVIEWER role they may have been given in a pull request.\n <p>\n If the participant has no explicit role this method has no effect.\n <p>\n Afterwards, the user will still remain a participant in the pull request but their role will be reduced to\n PARTICIPANT. This is because once made a participant of a pull request,\n a user will forever remain a participant. Only their role may be altered.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\n instead.",
        "operationId": "unassignParticipantRole"
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Change the current user's status for a pull request. Implicitly adds the user as a participant if they are not\n already. If the current user is the author, this method will fail.\n <p>\n The possible values for {@code status} are <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or\n <strong>APPROVED</strong>.\n <p>\n If the new {@code status} is <strong>NEEDS_WORK</strong> or <strong>APPROVED</strong> then the\n {@code lastReviewedCommit} for the participant will be updated to the latest commit of the source branch of the\n pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "updateStatus"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the ID of the pull request within the repository",
          "format": "int64",
          "in": "path",
          "name": "pullRequestId",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "parameters": [
          {
            "default": -1,
            "description": "the current version of the pull request. If the server's version isn't the same as the specified\n                version the operation will fail. To determine the current version of the pull request it should be\n                fetched from the server prior to this operation. Look for the 'version' attribute in the returned\n                JSON structure.",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Re-open a declined pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "reopen"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Discard a pull request review for the authenticated user.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "discardReview"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Get the {@link CommentThread threads} which have {@link Comment comments} that have a\n {@link CommentState#PENDING pending state} and are part of the pull request review for the authenticated user.",
        "operationId": "getReview",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Complete a review on a pull request.",
        "operationId": "finishReview"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the tasks associated with a pull request.\n\n <p>\n <strong>Deprecated since 7.2</strong>.\n Tasks are now managed using Comments with BLOCKER severity.\n Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments instead",
        "operationId": "getPullRequestTasks",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks/count": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the total number of OPEN and RESOLVED tasks associated with a pull request.\n\n <p>\n <strong>Deprecated since 7.2</strong>.\n Tasks are now managed using Comments with BLOCKER severity.\n Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments?count=true\n instead.",
        "operationId": "countPullRequestTasks",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "pullRequestId",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Remove the authenticated user as a watcher for the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "unwatch"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add the authenticated user as a watcher for the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "watch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/raw": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the raw content for a file path at a specified revision.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamRaw",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/raw/{path}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the file path to retrieve content from",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "a specific commit or ref to retrieve the raw content at, or the default branch if not\n                         specified",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks.\n                         If not specified, the value of the <code>markup.render.hardwrap</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "hardwrap",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise.\n                         If not specified, the value of the <code>markup.render.html.escape</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "htmlEscape",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if headings should contain an ID based on the heading content.\n                         If not specified, the value of the <code>markup.render.headerids</code> property,\n                         which is false by default, will be used",
            "in": "query",
            "name": "includeHeadingId",
            "required": false,
            "type": "string"
          },
          {
            "description": "if present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and\n                         returned as HTML; otherwise, if not specified, or any value other than\n                         <code>\"true\"</code>, the content is streamed without markup",
            "in": "query",
            "name": "markup",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the raw content for a file path at a specified revision.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamRaw"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/readme": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "a specific commit or ref to retrieve the README at, or the default branch if not\n                         specified",
            "in": "query",
            "name": "at",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks.\n                         If not specified, the value of the <code>markup.render.hardwrap</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "hardwrap",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise.\n                         If not specified, the value of the <code>markup.render.html.escape</code> property,\n                         which is <code>true</code> by default, will be used",
            "in": "query",
            "name": "htmlEscape",
            "required": false,
            "type": "string"
          },
          {
            "description": "(Optional) true if headings should contain an ID based on the heading content.\n                         If not specified, the value of the <code>markup.render.headerids</code> property,\n                         which is false by default, will be used",
            "in": "query",
            "name": "includeHeadingId",
            "required": false,
            "type": "string"
          },
          {
            "description": "if present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and\n                         returned as HTML; otherwise, if not specified, or any value other than\n                         <code>\"true\"</code>, the content is streamed without markup",
            "in": "query",
            "name": "markup",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the README for the repository, if it's been defined.\n <p>\n This checks the repository for a <pre>README</pre> file, optionally with an <pre>md</pre> or <pre>txt</pre>\n extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending\n <pre>?markup</pre> to the URL will stream an HTML-rendered version instead. Note that, when streaming HTML,\n relative URLs in the README will not work if applied relative to this URL.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamReadme"
      },
      "head": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "operationId": "findReadme"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/recreate": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "If a create or fork operation fails, calling this method will clean up the broken repository and try again. The\n repository must be in an INITIALISATION_FAILED state.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "retryCreateRepository"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "(optional) exact match for a ref ID to filter ref change activity for",
            "in": "query",
            "name": "ref",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of repository ref change activity.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission to call this resource.",
        "operationId": "getRefChangeActivity"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities/branches": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "(optional) partial match for a ref ID to filter minimal refs for",
            "in": "query",
            "name": "filterText",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of branches for a specific repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission to call this resource.",
        "operationId": "findBranches"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/related": {
      "parameters": [
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the parent project key",
          "in": "path",
          "name": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve repositories which are related to this one. Related repositories are from the same\n {@link Repository#getHierarchyId() hierarchy} as this repository.\n <p>\n Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even\n if more repositories are part of this repository's hierarchy.",
        "operationId": "getRelatedRepositories",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/settings/auto-decline": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete auto decline settings for the supplied repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.",
        "operationId": "delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the auto decline settings for the supplied repository. Project settings will be returned if no explicit\n settings have been set for the repository. In the case that there are no project settings, the default settings\n will be returned.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.",
        "operationId": "get",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Creates or updates the auto decline settings for the supplied repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.",
        "operationId": "set"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/settings/hooks": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "the optional type to filter by. Valid values are <code>PRE_RECEIVE</code> or <code>POST_RECEIVE</code>",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of repository hooks for this repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getRepositoryHooks"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the hook key",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete repository hook configuration for the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong>\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "deleteRepositoryHook"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a repository hook for this repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getRepositoryHook",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/enabled": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the hook key",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Disable a repository hook for this repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "disableHook"
      },
      "put": {
        "parameters": [
          {
            "default": 0,
            "description": "the content length as generated by the client",
            "format": "int32",
            "in": "header",
            "name": "Content-Length",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Enable a repository hook for this repository and optionally apply new configuration.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.\n <p>\n A JSON document may be provided to use as the settings for the hook. These structure and validity of\n the document is decided by the plugin providing the hook.",
        "operationId": "enableHook"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/settings": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the hook key",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the settings for a repository hook for this repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getSettings",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Modify the settings for a repository hook for this repository.\n <p>\n The service will reject any settings which are too large, the current limit is 32KB once serialized.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.\n <p>\n A JSON document can be provided to use as the settings for the hook. These structure and validity of the document\n is decided by the plugin providing the hook.",
        "operationId": "setSettings"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/settings/pull-requests": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the pull request settings for the context repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this\n resource.\n <p>\n This resource will call all RestFragments that are registered with the key\n <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a\n non-empty Map of errors, then no fragments will execute.\n <p>\n The property keys for the settings that are bundled with the application are\n <ul>\n     <li>mergeConfig - the merge strategy configuration for pull requests</li>\n     <li>requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 if the merge check is disabled</li>\n     <li>com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - the merge check configuration for required approvers</li>\n     <li>requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable</li>\n     <li>requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable</li>\n     <li>requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 if the merge check is disabled</li>\n     <li>com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - the merge check configuration for required builds</li>\n </ul>",
        "operationId": "getPullRequestSettings",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the pull request settings for the context repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the context repository to call this\n resource.\n <p>\n This resource will call all RestFragments that are registered with the key\n <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a\n non-empty Map of errors, then no fragments will execute.\n <p>\n Only the settings that should be updated need to be included in the request.\n <p>\n The property keys for the settings that are bundled with the application are\n <ul>\n     <li>mergeConfig - the merge strategy configuration for pull requests</li>\n     <li>requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 to disable the merge check</li>\n     <li>com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required approvals)</li>\n     <li>requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable</li>\n     <li>requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable</li>\n     <li>requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 to disable the merge check</li>\n     <li>com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required builds)</li>\n </ul>\n <strong>Merge strategy configuration deletion:</strong>\n <p>\n An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty\n \"mergeConfig\" attribute. i.e:\n <pre>\n {\n     \"mergeConfig\": {\n     }\n }\n </pre>\n Upon completion of this request, the effective configuration will be:\n <ul>\n     <li>The configuration set for this repository's SCM type as set at the project level, if present, otherwise</li>\n     <li>the configuration set for this repository's SCM type as set at the instance level, if present, otherwise</li>\n     <li>the default configuration for this repository's SCM type</li>\n </ul>",
        "operationId": "updatePullRequestSettings"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/tags": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the text to match on",
            "in": "query",
            "name": "filterText",
            "required": false,
            "type": "string"
          },
          {
            "description": "ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the tags matching the supplied <strong>filterText</strong> param.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this\n resource.",
        "operationId": "getTags"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Creates a tag using the information provided in the {@link RestCreateTagRequest request}\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this\n resource.",
        "operationId": "createTag"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/tags/{name}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the name of the tag to be retrieved",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a tag in the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this\n resource.",
        "operationId": "getTag",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/watch": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Remove the authenticated user as a watcher for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "unwatch"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Add the authenticated user as a watcher for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "watch"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/webhooks": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "list of {@link com.atlassian.webhooks.WebhookEvent} ids to filter for",
            "in": "query",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "{@code true} if statistics should be provided for all found webhooks",
            "in": "query",
            "name": "statistics",
            "required": false,
            "type": "boolean"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Find webhooks in this repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "findWebhooks"
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a webhook for the repository specified via the URL.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "createWebhook"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/webhooks/test": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "parameters": [
          {
            "description": "the url in which to connect to",
            "in": "query",
            "name": "url",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Test connectivity to a specific endpoint.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "testWebhook"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "the id of the webhook to be deleted.",
          "format": "int32",
          "in": "path",
          "name": "webhookId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete a webhook for the repository specified via the URL.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "deleteWebhook"
      },
      "get": {
        "parameters": [
          {
            "default": false,
            "description": "statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "type": "boolean"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Get a webhook by id.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getWebhook"
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update an existing webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "updateWebhook"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/latest": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "id of the webhook",
          "format": "int32",
          "in": "path",
          "name": "webhookId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the string id of a specific event to retrieve the last invocation for.",
            "in": "query",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "description": "the outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all\n                  will be considered",
            "in": "query",
            "name": "outcome",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Get the latest invocations for a specific webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getLatestInvocation"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "id of the webhook",
          "format": "int32",
          "in": "path",
          "name": "webhookId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "the string id of a specific event to retrieve the last invocation for. May be empty, in which\n                  case all events are considered",
            "in": "query",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Get the statistics for a specific webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getStatistics"
      }
    },
    "/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics/summary": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "repositorySlug",
          "in": "path",
          "required": true
        },
        {
          "description": "id of the webhook",
          "format": "int32",
          "in": "path",
          "name": "webhookId",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Get the statistics summary for a specific webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getStatisticsSummary",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/settings/auto-decline": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete auto decline settings for the supplied project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieves the auto decline settings for the supplied project. Default settings are returned if no explicit\n settings have been set for the project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "get",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Creates or updates the auto decline settings for the supplied project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "set"
      }
    },
    "/projects/{projectKey}/settings/hooks": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "parameters": [
          {
            "default": "",
            "description": "the optional type to filter by. Valid values are <code>PRE_RECEIVE</code> or <code>POST_RECEIVE</code>",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of repository hooks for this project.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "getRepositoryHooks"
      }
    },
    "/projects/{projectKey}/settings/hooks/{hookKey}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "description": "the hook key",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a repository hook for this project.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "getRepositoryHook",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/projects/{projectKey}/settings/hooks/{hookKey}/enabled": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "description": "the hook key",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Disable a repository hook for this project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "disableHook"
      },
      "put": {
        "parameters": [
          {
            "default": 0,
            "description": "the content length",
            "format": "int32",
            "in": "header",
            "name": "Content-Length",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Enable a repository hook for this project and optionally apply new configuration.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.\n <p>\n A JSON document may be provided to use as the settings for the hook. These structure and validity of\n the document is decided by the plugin providing the hook.",
        "operationId": "enableHook"
      }
    },
    "/projects/{projectKey}/settings/hooks/{hookKey}/settings": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "description": "the hook key",
          "in": "path",
          "name": "hookKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the settings for a repository hook for this project.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "getSettings",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Modify the settings for a repository hook for this project.\n <p>\n The service will reject any settings which are too large, the current limit is 32KB once serialized.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.\n <p>\n A JSON document can be provided to use as the settings for the hook. These structure and validity of the document\n is decided by the plugin providing the hook.",
        "operationId": "setSettings"
      }
    },
    "/projects/{projectKey}/settings/pull-requests/{scmId}": {
      "parameters": [
        {
          "type": "string",
          "name": "projectKey",
          "in": "path",
          "required": true
        },
        {
          "description": "the SCM to get strategies for",
          "in": "path",
          "name": "scmId",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the merge strategy configuration for this project and SCM.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the context repository to call this\n resource.",
        "operationId": "getPullRequestSettings",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the pull request merge strategy configuration for this project and SCM.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context repository to call this\n resource.\n <p>\n Only the strategies provided will be enabled, the default must be set and included in the set of strategies.\n <p>\n An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with\n an empty \"mergeConfig\" attribute. i.e:\n <pre>\n {\n     \"mergeConfig\": {\n     }\n }\n </pre>\n Upon completion of this request, the effective configuration will be the configuration explicitly set for\n the SCM, or if no such explicit configuration is set then the default configuration will be used.",
        "operationId": "updatePullRequestSettings"
      }
    },
    "/repos": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose name\n                    matches this parameter's value. The match will be done case-insensitive and any leading\n                    and/or trailing whitespace characters on the <code>name</code> parameter will be stripped.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose project's\n                    name matches this parameter's value. The match will be done case-insensitive and any leading\n                    and/or trailing whitespace characters on the <code>projectname</code> parameter will\n                    be stripped.",
            "in": "query",
            "name": "projectname",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) if specified, it must be a valid repository permission level name and will limit\n                    the resulting repository list to ones that the requesting user has the specified permission\n                    level to. If not specified, the default implicit 'read' permission level will be assumed. The\n                    currently supported explicit permission values are <tt>REPO_READ</tt>, <tt>REPO_WRITE</tt>\n                    and <tt>REPO_ADMIN</tt>.",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) if specified, it must be a valid repository state name and will limit the resulting\n                    repository list to ones that are in the specified state. The currently supported explicit state\n                    values are <tt>AVAILABLE</tt>, <tt>INITIALISING</tt> and <tt>INITIALISATION_FAILED</tt>.<br>\n                    <em>Available since 5.13</em>",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) if specified, this will limit the resulting repository list based on the\n                    repositories visibility. Valid values are <em>public</em> or <em>private</em>.",
            "in": "query",
            "name": "visibility",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of repositories based on query parameters that control the search. See the documentation of the\n parameters for more details.\n <p>\n This resource is anonymously accessible.\n <p>\n <b>Note on permissions.</b> In absence of the <code>permission</code> query parameter the implicit 'read' permission\n is assumed. Please note that this permission is lower than the REPO_READ permission rather than being equal to\n it. The implicit 'read' permission for a given repository is assigned to any user that has any of the higher\n permissions, such as <tt>REPO_READ</tt>, as well as to anonymous users if the repository is marked as public.\n The important implication of the above is that an anonymous request to this resource with a permission level\n <tt>REPO_READ</tt> is guaranteed to receive an empty list of repositories as a result. For anonymous requests\n it is therefore recommended to not specify the <tt>permission</tt> parameter at all.",
        "operationId": "getRepositories"
      }
    },
    "/tasks": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Create a new task.\n\n <p>\n <strong>Deprecated since 7.2</strong>.\n Tasks are now managed using Comments with severity BLOCKER.\n Call POST /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments instead,\n passing the attribute 'severity' set to 'BLOCKER'.",
        "operationId": "createTask"
      }
    },
    "/tasks/{taskId}": {
      "parameters": [
        {
          "description": "the id identifying the task to delete",
          "format": "int64",
          "in": "path",
          "name": "taskId",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete a task.\n\n <p>\n <strong>Deprecated since 7.2</strong>.\n Tasks are now managed using Comments with BLOCKER severity.\n Call DELETE /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}\n instead.",
        "operationId": "deleteTask"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve an existing task.\n\n <p>\n <strong>Deprecated since 7.2</strong>.\n Tasks are now managed using Comments with BLOCKER severity.\n Call GET /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}\n instead.",
        "operationId": "getTask",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update an existing task.\n\n <p>\n <strong>Deprecated since 7.2</strong>.\n Tasks are now managed using Comments with BLOCKER severity.\n Call PUT /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}\n instead.\n To resolve a task, pass the attribute 'state' set to 'RESOLVED'.",
        "operationId": "updateTask"
      }
    },
    "/users": {
      "parameters": [],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a page of users, optionally run through provided filters.\n <p>\n Only authenticated users may call this resource.\n\n <h3>Supported Filters</h3>\n <p>\n Filters are provided in query parameters in a standard <code>name=value</code> fashion. The following filters are\n currently supported:\n <ul>\n     <li>\n         {@code filter} - return only users, whose username, name or email address <i>contain</i> the\n         {@code filter} value\n     </li>\n     <li>\n         {@code group} - return only users who are members of the given group\n     </li>\n     <li>\n         {@code permission} - the \"root\" of a permission filter, whose value must be a valid global,\n         project, or repository permission. Additional filter parameters referring to this filter that specify the\n         resource (project or repository) to apply the filter to must be prefixed with <code>permission.</code>. See the\n         section \"Permission Filters\" below for more details.\n     </li>\n     <li>\n         {@code permission.N} - the \"root\" of a single permission filter, similar to the {@code permission}\n         parameter, where \"N\" is a natural number starting from 1. This allows clients to specify multiple permission\n         filters, by providing consecutive filters as {@code permission.1}, {@code permission.2} etc. Note that\n         the filters numbering has to start with 1 and be continuous for all filters to be processed. The total allowed\n         number of permission filters is 50 and all filters exceeding that limit will be dropped. See the section\n         \"Permission Filters\" below for more details on how the permission filters are processed.\n     </li>\n </ul>\n\n\n <h3>Permission Filters</h3>\n <p>\n The following three sub-sections list parameters supported for permission filters (where <code>[root]</code> is\n the root permission filter name, e.g. {@code permission}, {@code permission.1} etc.) depending on the\n permission resource. The system determines which filter to apply (Global, Project or Repository permission)\n based on the <code>[root]</code> permission value. E.g. {@code ADMIN} is a global permission,\n {@code PROJECT_ADMIN} is a project permission and {@code REPO_ADMIN} is a repository permission. Note\n that the parameters for a given resource will be looked up in the order as they are listed below, that is e.g.\n for a project resource, if both {@code projectId} and {@code projectKey} are provided, the system will\n use {@code projectId} for the lookup.\n <h4>Global permissions</h4>\n <p>\n The permission value under <code>[root]</code> is the only required and recognized parameter, as global\n permissions do not apply to a specific resource.\n <p>\n Example valid filter: <code>permission=ADMIN</code>.\n <h4>Project permissions</h4>\n <ul>\n     <li><code>[root]</code>- specifies the project permission</li>\n     <li><code>[root].projectId</code> - specifies the project ID to lookup the project by</li>\n     <li><code>[root].projectKey</code> - specifies the project key to lookup the project by</li>\n </ul>\n <p>\n Example valid filter: <code>permission.1=PROJECT_ADMIN&amp;permission.1.projectKey=TEST_PROJECT</code>.\n <h4>Repository permissions</h4>\n <ul>\n     <li><code>[root]</code>- specifies the repository permission</li>\n     <li><code>[root].projectId</code> - specifies the repository ID to lookup the repository by</li>\n     <li><code>[root].projectKey</code> and <code>[root].repositorySlug</code>- specifies the project key and\n     repository slug to lookup the repository by; both values <i>need to</i> be provided for this look up to be\n     triggered</li>\n </ul>\n Example valid filter: <code>permission.2=REPO_ADMIN&amp;permission.2.projectKey=TEST_PROJECT&amp;permission.2.repositorySlug=test_repo</code>.",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the currently authenticated user's details. The update will always be applied to the currently\n authenticated user.",
        "operationId": "updateUserDetails"
      }
    },
    "/users/credentials": {
      "parameters": [],
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the currently authenticated user's password.",
        "operationId": "updateUserPassword"
      }
    },
    "/users/{userSlug}": {
      "parameters": [
        {
          "type": "string",
          "name": "userSlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve the user matching the supplied <strong>userSlug</strong>.\n <p>",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      }
    },
    "/users/{userSlug}/avatar.png": {
      "parameters": [
        {
          "type": "string",
          "name": "userSlug",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Delete the avatar associated to a user.\n <p>\n Users are always allowed to delete their own avatar. To delete someone else's avatar the authenticated user must\n have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a\n <strong>SYS_ADMIN</strong> user's avatar.",
        "operationId": "deleteAvatar"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the avatar for the user with the supplied <strong>slug</strong>.\n <p>\n This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.\n <p>\n There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded\n file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and\n <strong>JPEG</strong> are preferred due to the file size limit.\n <p>\n This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to\n pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the\n value <code>no-check</code>.\n <p>\n An example <a href=\"http://curl.haxx.se/\">curl</a> request to upload an image name 'avatar.png' would be:\n <pre>\n curl -X POST -u username:password -H \"X-Atlassian-Token: no-check\" http://example.com/rest/api/latest/users/jdoe/avatar.png -F avatar=@avatar.png\n </pre>\n <p>\n Users are always allowed to update their own avatar. To update someone else's avatar the authenticated user must\n have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a\n <strong>SYS_ADMIN</strong> user's avatar.",
        "operationId": "uploadAvatar"
      }
    },
    "/users/{userSlug}/settings": {
      "parameters": [
        {
          "type": "string",
          "name": "userSlug",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Retrieve a map of user setting key values for a specific user identified by the user slug.\n <p>",
        "operationId": "getUserSettings",
        "parameters": [
          {
            "type": "string",
            "name": "expand",
            "in": "query",
            "required": false
          }
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "description": "Update the entries of a map of user setting key/values for a specific user identified by the user slug.\n <p>",
        "operationId": "updateSettings"
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}