/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence\'s REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Theme,
  ThemeArray,
  ThemeUpdate,
} from '../models';

export interface GetSpaceThemeRequest {
    spaceKey: string;
}

export interface GetThemeRequest {
    themeKey: string;
}

export interface GetThemesRequest {
    start?: number;
    limit?: number;
}

export interface ResetSpaceThemeRequest {
    spaceKey: string;
}

export interface SetSpaceThemeRequest {
    spaceKey: string;
    body: ThemeUpdate;
}

/**
 * 
 */
export class ThemesApi extends runtime.BaseAPI {

    /**
     * Returns the globally assigned theme.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     * Get global theme
     */
    async getGlobalThemeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["manage:confluence-configuration"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/settings/theme/selected`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the globally assigned theme.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     * Get global theme
     */
    async getGlobalTheme(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.getGlobalThemeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the theme selected for a space, if one is set. If no space theme is set, this means that the space is inheriting the global look and feel settings.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * Get space theme
     */
    async getSpaceThemeRaw(requestParameters: GetSpaceThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling getSpaceTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:confluence-space.summary"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/theme`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the theme selected for a space, if one is set. If no space theme is set, this means that the space is inheriting the global look and feel settings.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * Get space theme
     */
    async getSpaceTheme(requestParameters: GetSpaceThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.getSpaceThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a theme. This includes information about the theme name, description, and icon.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     * Get theme
     */
    async getThemeRaw(requestParameters: GetThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        if (requestParameters.themeKey === null || requestParameters.themeKey === undefined) {
            throw new runtime.RequiredError('themeKey','Required parameter requestParameters.themeKey was null or undefined when calling getTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["manage:confluence-configuration"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/settings/theme/{themeKey}`.replace(`{${"themeKey"}}`, encodeURIComponent(String(requestParameters.themeKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a theme. This includes information about the theme name, description, and icon.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     * Get theme
     */
    async getTheme(requestParameters: GetThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.getThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all themes, not including the default theme.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     * Get themes
     */
    async getThemesRaw(requestParameters: GetThemesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeArray>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["manage:confluence-configuration"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/settings/theme`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all themes, not including the default theme.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     * Get themes
     */
    async getThemes(requestParameters: GetThemesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeArray> {
        const response = await this.getThemesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resets the space theme. This means that the space will inherit the global look and feel settings  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Reset space theme
     */
    async resetSpaceThemeRaw(requestParameters: ResetSpaceThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling resetSpaceTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/theme`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the space theme. This means that the space will inherit the global look and feel settings  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Reset space theme
     */
    async resetSpaceTheme(requestParameters: ResetSpaceThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetSpaceThemeRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the theme for a space. Note, if you want to reset the space theme to the default Confluence theme, use the \'Reset space theme\' method instead of this method.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Set space theme
     */
    async setSpaceThemeRaw(requestParameters: SetSpaceThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Theme>> {
        if (requestParameters.spaceKey === null || requestParameters.spaceKey === undefined) {
            throw new runtime.RequiredError('spaceKey','Required parameter requestParameters.spaceKey was null or undefined when calling setSpaceTheme.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setSpaceTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:confluence-space"]);
        }

        const response = await this.request({
            path: `/wiki/rest/api/space/{spaceKey}/theme`.replace(`{${"spaceKey"}}`, encodeURIComponent(String(requestParameters.spaceKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the theme for a space. Note, if you want to reset the space theme to the default Confluence theme, use the \'Reset space theme\' method instead of this method.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \'Admin\' permission for the space.
     * Set space theme
     */
    async setSpaceTheme(requestParameters: SetSpaceThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Theme> {
        const response = await this.setSpaceThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
