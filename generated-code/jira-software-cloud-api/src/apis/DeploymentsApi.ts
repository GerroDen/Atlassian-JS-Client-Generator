/* tslint:disable */
/* eslint-disable */
/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeploymentData1,
  ErrorMessage1,
  SubmitDeploymentRequest,
  SubmitDeploymentsResponse,
  SubmitDeploymentsResponse1,
} from '../models';

export interface DeleteDeploymentByKeyRequest {
    authorization: string;
    pipelineId: string;
    environmentId: string;
    deploymentSequenceNumber: number;
    updateSequenceNumber?: number;
}

export interface DeleteDeploymentsByPropertyRequest {
    authorization: string;
    updateSequenceNumber?: number;
}

export interface GetDeploymentByKeyRequest {
    authorization: string;
    pipelineId: string;
    environmentId: string;
    deploymentSequenceNumber: number;
}

export interface GetDeploymentGatingStatusByKeyRequest {
    pipelineId: string;
    environmentId: string;
    deploymentSequenceNumber: number;
}

export interface SubmitDeploymentsRequest {
    authorization: string;
    submitDeploymentRequest: SubmitDeploymentRequest;
}

/**
 * 
 */
export class DeploymentsApi extends runtime.BaseAPI {

    /**
     * Delete the currently stored deployment data for the given `pipelineId`, `environmentId` and `deploymentSequenceNumber` combination.  Deletion is performed asynchronously. The `getDeploymentByKey` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a deployment by key
     */
    async deleteDeploymentByKeyRaw(requestParameters: DeleteDeploymentByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDeploymentByKey.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling deleteDeploymentByKey.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling deleteDeploymentByKey.');
        }

        if (requestParameters.deploymentSequenceNumber === null || requestParameters.deploymentSequenceNumber === undefined) {
            throw new runtime.RequiredError('deploymentSequenceNumber','Required parameter requestParameters.deploymentSequenceNumber was null or undefined when calling deleteDeploymentByKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateSequenceNumber !== undefined) {
            queryParameters['_updateSequenceNumber'] = requestParameters.updateSequenceNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/deployments/0.1/pipelines/{pipelineId}/environments/{environmentId}/deployments/{deploymentSequenceNumber}`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"deploymentSequenceNumber"}}`, encodeURIComponent(String(requestParameters.deploymentSequenceNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the currently stored deployment data for the given `pipelineId`, `environmentId` and `deploymentSequenceNumber` combination.  Deletion is performed asynchronously. The `getDeploymentByKey` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete a deployment by key
     */
    async deleteDeploymentByKey(requestParameters: DeleteDeploymentByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeploymentByKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk delete all deployments that match the given request.  One or more query params must be supplied to specify the Properties to delete by. Optional param `_updateSequenceNumber` is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (i.e. treated as AND). See the documentation for the `submitDeployments` operation for more details.  Example operation: DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The `getDeploymentByKey` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete deployments by Property
     */
    async deleteDeploymentsByPropertyRaw(requestParameters: DeleteDeploymentsByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDeploymentsByProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateSequenceNumber !== undefined) {
            queryParameters['_updateSequenceNumber'] = requestParameters.updateSequenceNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/deployments/0.1/bulkByProperties`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk delete all deployments that match the given request.  One or more query params must be supplied to specify the Properties to delete by. Optional param `_updateSequenceNumber` is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (i.e. treated as AND). See the documentation for the `submitDeployments` operation for more details.  Example operation: DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The `getDeploymentByKey` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'DELETE\' scope for Connect apps. 
     * Delete deployments by Property
     */
    async deleteDeploymentsByProperty(requestParameters: DeleteDeploymentsByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeploymentsByPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the currently stored deployment data for the given `pipelineId`, `environmentId` and `deploymentSequenceNumber` combination.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a deployment by key
     */
    async getDeploymentByKeyRaw(requestParameters: GetDeploymentByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploymentData1>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDeploymentByKey.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getDeploymentByKey.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getDeploymentByKey.');
        }

        if (requestParameters.deploymentSequenceNumber === null || requestParameters.deploymentSequenceNumber === undefined) {
            throw new runtime.RequiredError('deploymentSequenceNumber','Required parameter requestParameters.deploymentSequenceNumber was null or undefined when calling getDeploymentByKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/deployments/0.1/pipelines/{pipelineId}/environments/{environmentId}/deployments/{deploymentSequenceNumber}`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"deploymentSequenceNumber"}}`, encodeURIComponent(String(requestParameters.deploymentSequenceNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the currently stored deployment data for the given `pipelineId`, `environmentId` and `deploymentSequenceNumber` combination.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'READ\' scope for Connect apps. 
     * Get a deployment by key
     */
    async getDeploymentByKey(requestParameters: GetDeploymentByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploymentData1> {
        const response = await this.getDeploymentByKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the  Deployment gating status for the given `pipelineId + environmentId + deploymentSequenceNumber` combination. Only apps that define the `jiraDeploymentInfoProvider` module can access this resource. This resource requires the \'READ\' scope. 
     * Get deployment gating status by key
     */
    async getDeploymentGatingStatusByKeyRaw(requestParameters: GetDeploymentGatingStatusByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitDeploymentsResponse1>> {
        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getDeploymentGatingStatusByKey.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getDeploymentGatingStatusByKey.');
        }

        if (requestParameters.deploymentSequenceNumber === null || requestParameters.deploymentSequenceNumber === undefined) {
            throw new runtime.RequiredError('deploymentSequenceNumber','Required parameter requestParameters.deploymentSequenceNumber was null or undefined when calling getDeploymentGatingStatusByKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/deployments/0.1/pipelines/{pipelineId}/environments/{environmentId}/deployments/{deploymentSequenceNumber}/gating-status`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"deploymentSequenceNumber"}}`, encodeURIComponent(String(requestParameters.deploymentSequenceNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the  Deployment gating status for the given `pipelineId + environmentId + deploymentSequenceNumber` combination. Only apps that define the `jiraDeploymentInfoProvider` module can access this resource. This resource requires the \'READ\' scope. 
     * Get deployment gating status by key
     */
    async getDeploymentGatingStatusByKey(requestParameters: GetDeploymentGatingStatusByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitDeploymentsResponse1> {
        const response = await this.getDeploymentGatingStatusByKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update / insert deployment data.  Deployments are identified by the combination of `pipelineId`, `environmentId` and `deploymentSequenceNumber`, and existing deployment data for the same deployment will be replaced if it exists and the `updateSequenceNumber` of existing data is less than the incoming data.  Submissions are processed asynchronously. Submitted data will eventually be available in Jira. Most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The `getDeploymentByKey` operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple deployments being submitted in one request, each is validated individually prior to submission. Details of which deployments failed submission (if any) are available in the response object.  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit deployment data
     */
    async submitDeploymentsRaw(requestParameters: SubmitDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmitDeploymentsResponse>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling submitDeployments.');
        }

        if (requestParameters.submitDeploymentRequest === null || requestParameters.submitDeploymentRequest === undefined) {
            throw new runtime.RequiredError('submitDeploymentRequest','Required parameter requestParameters.submitDeploymentRequest was null or undefined when calling submitDeployments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/rest/deployments/0.1/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.submitDeploymentRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update / insert deployment data.  Deployments are identified by the combination of `pipelineId`, `environmentId` and `deploymentSequenceNumber`, and existing deployment data for the same deployment will be replaced if it exists and the `updateSequenceNumber` of existing data is less than the incoming data.  Submissions are processed asynchronously. Submitted data will eventually be available in Jira. Most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The `getDeploymentByKey` operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple deployments being submitted in one request, each is validated individually prior to submission. Details of which deployments failed submission (if any) are available in the response object.  Only Connect apps that define the `jiraDeploymentInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the \'WRITE\' scope for Connect apps. 
     * Submit deployment data
     */
    async submitDeployments(requestParameters: SubmitDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmitDeploymentsResponse> {
        const response = await this.submitDeploymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
