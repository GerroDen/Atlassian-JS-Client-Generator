/* tslint:disable */
/* eslint-disable */
/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSmartLink200Response,
  CreateSmartLinkRequest,
} from '../models/index';

export interface CreateSmartLinkOperationRequest {
    createSmartLinkRequest: CreateSmartLinkRequest;
}

export interface DeleteSmartLinkRequest {
    id: number;
}

export interface GetSmartLinkByIdRequest {
    id: number;
}

/**
 * 
 */
export class SmartLinkApi extends runtime.BaseAPI {

    /**
     * Creates a Smart Link in the content tree in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the corresponding space. Permission to create a Smart Link in the content tree in the space.
     * Create Smart Link in the content tree
     */
    async createSmartLinkRaw(requestParameters: CreateSmartLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSmartLink200Response>> {
        if (requestParameters['createSmartLinkRequest'] == null) {
            throw new runtime.RequiredError(
                'createSmartLinkRequest',
                'Required parameter "createSmartLinkRequest" was null or undefined when calling createSmartLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["write:embed:confluence"]);
        }

        const response = await this.request({
            path: `/embeds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createSmartLinkRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a Smart Link in the content tree in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the corresponding space. Permission to create a Smart Link in the content tree in the space.
     * Create Smart Link in the content tree
     */
    async createSmartLink(requestParameters: CreateSmartLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSmartLink200Response> {
        const response = await this.createSmartLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Smart Link in the content tree by id.  Deleting a Smart Link in the content tree moves the Smart Link to the trash, where it can be restored later  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the Smart Link in the content tree and its corresponding space. Permission to delete Smart Links in the content tree in the space.
     * Delete Smart Link in the content tree
     */
    async deleteSmartLinkRaw(requestParameters: DeleteSmartLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSmartLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["delete:embed:confluence"]);
        }

        const response = await this.request({
            path: `/embeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Smart Link in the content tree by id.  Deleting a Smart Link in the content tree moves the Smart Link to the trash, where it can be restored later  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the Smart Link in the content tree and its corresponding space. Permission to delete Smart Links in the content tree in the space.
     * Delete Smart Link in the content tree
     */
    async deleteSmartLink(requestParameters: DeleteSmartLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSmartLinkRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific Smart Link in the content tree.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the Smart Link in the content tree and its corresponding space.
     * Get Smart Link in the content tree by id
     */
    async getSmartLinkByIdRaw(requestParameters: GetSmartLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSmartLink200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSmartLinkById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuthDefinitions", ["read:embed:confluence"]);
        }

        const response = await this.request({
            path: `/embeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Smart Link in the content tree.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the Smart Link in the content tree and its corresponding space.
     * Get Smart Link in the content tree by id
     */
    async getSmartLinkById(requestParameters: GetSmartLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSmartLink200Response> {
        const response = await this.getSmartLinkByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
