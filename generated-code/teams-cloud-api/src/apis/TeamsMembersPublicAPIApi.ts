/* tslint:disable */
/* eslint-disable */
/**
 * Teams Public API
 * Teams Public API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PublicApiFetchResponsePublicApiMembershipAccountId,
  PublicApiMembershipAddPayload,
  PublicApiMembershipAddResponse,
  PublicApiMembershipFetchPayload,
  PublicApiMembershipRemovePayload,
  PublicApiMembershipRemoveResponse,
  PublicApiOverallCodedError,
} from '../models/index';

export interface AddMembers2Request {
    orgId: string;
    teamId: string;
    publicApiMembershipAddPayload: PublicApiMembershipAddPayload;
}

export interface FetchMembersRequest {
    orgId: string;
    teamId: string;
    siteId?: string;
    publicApiMembershipFetchPayload?: PublicApiMembershipFetchPayload;
}

export interface RemoveMembers1Request {
    orgId: string;
    teamId: string;
    publicApiMembershipRemovePayload: PublicApiMembershipRemovePayload;
}

/**
 * 
 */
export class TeamsMembersPublicAPIApi extends runtime.BaseAPI {

    /**
     * The account IDs specified will be added to the team.
     * Add a set of membership(s).
     */
    async addMembers2Raw(requestParameters: AddMembers2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiMembershipAddResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling addMembers2().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addMembers2().'
            );
        }

        if (requestParameters['publicApiMembershipAddPayload'] == null) {
            throw new runtime.RequiredError(
                'publicApiMembershipAddPayload',
                'Required parameter "publicApiMembershipAddPayload" was null or undefined when calling addMembers2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/members/add`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['publicApiMembershipAddPayload'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * The account IDs specified will be added to the team.
     * Add a set of membership(s).
     */
    async addMembers2(requestParameters: AddMembers2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiMembershipAddResponse> {
        const response = await this.addMembers2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a set of account IDs who are members of the team, alongside a pagination cursor to retrieve the next page (if available).
     * Fetch a set of membership(s).
     */
    async fetchMembersRaw(requestParameters: FetchMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiFetchResponsePublicApiMembershipAccountId>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling fetchMembers().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling fetchMembers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['siteId'] != null) {
            queryParameters['siteId'] = requestParameters['siteId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/members`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['publicApiMembershipFetchPayload'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a set of account IDs who are members of the team, alongside a pagination cursor to retrieve the next page (if available).
     * Fetch a set of membership(s).
     */
    async fetchMembers(requestParameters: FetchMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiFetchResponsePublicApiMembershipAccountId> {
        const response = await this.fetchMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The account IDs specified will be removed from the team.
     * Remove a set of membership(s).
     */
    async removeMembers1Raw(requestParameters: RemoveMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicApiMembershipRemoveResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeMembers1().'
            );
        }

        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removeMembers1().'
            );
        }

        if (requestParameters['publicApiMembershipRemovePayload'] == null) {
            throw new runtime.RequiredError(
                'publicApiMembershipRemovePayload',
                'Required parameter "publicApiMembershipRemovePayload" was null or undefined when calling removeMembers1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gateway/api/public/teams/v1/org/{orgId}/teams/{teamId}/members/remove`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['publicApiMembershipRemovePayload'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * The account IDs specified will be removed from the team.
     * Remove a set of membership(s).
     */
    async removeMembers1(requestParameters: RemoveMembers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicApiMembershipRemoveResponse> {
        const response = await this.removeMembers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
